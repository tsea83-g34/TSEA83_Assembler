(Pre remove_comments_and_whitespace)
(Code after 'remove_comments_and_whitespace')
 const SP r15
const NULL r14
const BP r13
const RR r12
.data MEMORY_SIZE
.dh 4096
.data VIDEO_TILE_WIDTH
.dh 40
.data VIDEO_TILE_HEIGHT
.dh 30
.data VIDEO_TILES
.dh 0
load[2] r0, NULL, VIDEO_TILE_WIDTH
load[2] r1, NULL, VIDEO_TILE_HEIGHT
mul r0, r0, r1
store[2] NULL, r0, VIDEO_TILES
.data PALETTE_START
.dh 0
load[2] r0, NULL, VIDEO_TILES
store[2] NULL, r0, PALETTE_START
.data PALETTE_SIZE
.dh 16
.data VIDEO_MEMORY_SIZE
.dh 0
load[2] r0, NULL, VIDEO_TILES
load[2] r2, NULL, PALETTE_SIZE
add r0, r0, r2
store[2] NULL, r0, VIDEO_MEMORY_SIZE
.data VIDEO_PIXEL_WIDTH
.dh 640
.data VIDEO_PIXEL_HEIGHT
.dh 480
.data FG_COLOR
.dh 0
.data BG_COLOR
.dh 0
.data CURSOR
.dh 0
.data CURSOR_X
.dh 0
.data CURSOR_Y
.dh 0
.data buffer
.db 0
.data changed_index
.dh 0
.data changed
.dh 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
.data SLEEP_MS_MULT
.dw 7692
subi SP, SP, 1
call main
subi SP, SP, 2
__halt:
rjmp __halt
in:
move BP, SP
load[2] r0, BP, 2
subi SP, SP, 4
load[4] r1, BP, -4
in r1, 0
move RR, r1
addi SP, SP, 4
ret
out:
move BP, SP
load[4] r0, BP, 4
load[2] r1, BP, 10
out 0, r0
store[4] BP, r0, 4
move RR, NULL
ret
vga_write:
move BP, SP
load[2] r0, BP, 4
load[2] r1, BP, 6
vgaw r1, r0, 0
store[2] BP, r1, 6
move RR, NULL
ret
outside_bound:
move BP, SP
load[2] r0, BP, 2
load[2] r1, BP, 4
load[2] r2, BP, 6
cmp r0, r2
brge L0
addi r0, NULL, 0
rjmp L1
L0:
addi r0, NULL, 1
L1:
load[2] r3, BP, 2
cmp r3, r1
brlt L2
addi r3, NULL, 0
rjmp L3
L2:
addi r3, NULL, 1
L3:
or r0, r0, r3
move RR, r0
ret
left_shift_l:
move BP, SP
load[4] r0, BP, 4
load[2] r1, BP, 10
L4:
load[2] r0, BP, 10
cmpi r0, 0
brgt L6
addi r0, NULL, 0
rjmp L7
L6:
addi r0, NULL, 1
L7:
cmpi r0, 0
breq L5
load[4] r1, BP, 4
lsl[4] r1, r1
load[2] r2, BP, 10
subi r2, r2, 1
store[4] BP, r1, 4
store[2] BP, r2, 10
rjmp L4
L5:
load[4] r0, BP, 4
move RR, r0
ret
right_shift_l:
move BP, SP
load[4] r0, BP, 4
load[2] r1, BP, 10
L8:
load[2] r0, BP, 10
cmpi r0, 0
brgt L10
addi r0, NULL, 0
rjmp L11
L10:
addi r0, NULL, 1
L11:
cmpi r0, 0
breq L9
load[4] r1, BP, 4
lsr[4] r1, r1
load[2] r2, BP, 10
subi r2, r2, 1
store[4] BP, r1, 4
store[2] BP, r2, 10
rjmp L8
L9:
load[4] r0, BP, 4
move RR, r0
ret
left_shift_i:
move BP, SP
load[2] r0, BP, 4
load[2] r1, BP, 6
L12:
load[2] r0, BP, 6
cmpi r0, 0
brgt L14
addi r0, NULL, 0
rjmp L15
L14:
addi r0, NULL, 1
L15:
cmpi r0, 0
breq L13
load[2] r1, BP, 4
lsl[2] r1, r1
load[2] r2, BP, 6
subi r2, r2, 1
store[2] BP, r1, 4
store[2] BP, r2, 6
rjmp L12
L13:
load[2] r0, BP, 4
move RR, r0
ret
right_shift_i:
move BP, SP
load[2] r0, BP, 4
load[2] r1, BP, 6
L16:
load[2] r0, BP, 6
cmpi r0, 0
brgt L18
addi r0, NULL, 0
rjmp L19
L18:
addi r0, NULL, 1
L19:
cmpi r0, 0
breq L17
load[2] r1, BP, 4
lsr[2] r1, r1
load[2] r2, BP, 6
subi r2, r2, 1
store[2] BP, r1, 4
store[2] BP, r2, 6
rjmp L16
L17:
load[2] r0, BP, 4
move RR, r0
ret
left_shift_c:
move BP, SP
load[1] r0, BP, 5
load[2] r1, BP, 6
L20:
load[2] r0, BP, 6
cmpi r0, 0
brgt L22
addi r0, NULL, 0
rjmp L23
L22:
addi r0, NULL, 1
L23:
cmpi r0, 0
breq L21
load[1] r1, BP, 5
lsl[1] r1, r1
load[2] r2, BP, 6
subi r2, r2, 1
store[1] BP, r1, 5
store[2] BP, r2, 6
rjmp L20
L21:
load[1] r0, BP, 5
move RR, r0
ret
right_shift_c:
move BP, SP
load[1] r0, BP, 5
load[2] r1, BP, 6
L24:
load[2] r0, BP, 6
cmpi r0, 0
brgt L26
addi r0, NULL, 0
rjmp L27
L26:
addi r0, NULL, 1
L27:
cmpi r0, 0
breq L25
load[1] r1, BP, 5
lsr[1] r1, r1
load[2] r2, BP, 6
subi r2, r2, 1
store[1] BP, r1, 5
store[2] BP, r2, 6
rjmp L24
L25:
load[1] r0, BP, 5
move RR, r0
ret
divide:
move BP, SP
load[2] r0, BP, 4
load[2] r1, BP, 6
subi SP, SP, 2
subi SP, SP, 2
addi r2, NULL, 0
store[2] BP, r0, -2
store[2] BP, r2, -4
L28:
load[2] r0, BP, -2
load[2] r1, BP, 6
cmp r0, r1
brgt L30
addi r0, NULL, 0
rjmp L31
L30:
addi r0, NULL, 1
L31:
cmpi r0, 0
breq L29
load[2] r2, BP, -2
sub r2, r2, r1
load[2] r3, BP, -4
addi r3, r3, 1
store[2] BP, r2, -2
store[2] BP, r3, -4
rjmp L28
L29:
subi SP, SP, 4
load[2] r0, BP, -4
push[2] BP
subi SP, SP, 2
addi r1, NULL, 16
push[2] r1
subi SP, SP, 2
push[4] r0
store[4] BP, r0, -8
subi SP, SP, 2
call left_shift_l
addi SP, SP, 12
pop[2] BP
move r0, RR
store[4] BP, r0, -8
load[2] r1, BP, -2
add r0, r0, r1
move RR, r0
addi SP, SP, 8
ret
tile_index_write:
move BP, SP
load[2] r0, BP, 4
load[2] r3, BP, 6
load[2] r4, NULL, VIDEO_TILES
cmp r3, r4
brge L32
addi r3, NULL, 0
rjmp L33
L32:
addi r3, NULL, 1
L33:
cmpi r3, 0
breq L34
addi RR, NULL, 0
ret
rjmp L35
L34:
L35:
push[2] BP
subi SP, SP, 2
load[2] r0, BP, 6
push[2] r0
load[2] r1, BP, 4
push[2] r1
subi SP, SP, 2
call vga_write
addi SP, SP, 8
pop[2] BP
addi RR, NULL, 1
ret
tile_coord_write:
move BP, SP
load[4] r0, BP, 4
load[2] r1, BP, 8
load[2] r2, BP, 10
load[2] r3, NULL, VIDEO_PIXEL_WIDTH
cmp r1, r3
brge L36
addi r1, NULL, 0
rjmp L37
L36:
addi r1, NULL, 1
L37:
load[2] r4, NULL, VIDEO_PIXEL_HEIGHT
cmp r2, r4
brge L38
addi r2, NULL, 0
rjmp L39
L38:
addi r2, NULL, 1
L39:
or r1, r1, r2
cmpi r1, 0
breq L40
addi RR, NULL, 0
ret
rjmp L41
L40:
L41:
subi SP, SP, 2
load[2] r0, BP, 8
load[2] r1, NULL, VIDEO_PIXEL_WIDTH
load[2] r2, BP, 10
mul r1, r1, r2
add r0, r0, r1
push[2] BP
push[2] r0
load[4] r3, BP, 4
push[2] r3
store[2] BP, r0, -2
subi SP, SP, 2
call vga_write
addi SP, SP, 6
pop[2] BP
addi RR, NULL, 1
addi SP, SP, 2
ret
palette_index_write:
move BP, SP
load[2] r0, BP, 2
load[2] r1, BP, 4
load[2] r2, BP, 6
load[2] r3, NULL, PALETTE_SIZE
cmp r0, r3
brge L42
addi r0, NULL, 0
rjmp L43
L42:
addi r0, NULL, 1
L43:
cmpi r0, 0
breq L44
addi RR, NULL, 0
ret
rjmp L45
L44:
L45:
subi SP, SP, 2
load[2] r0, NULL, PALETTE_START
load[2] r1, BP, 2
add r0, r0, r1
subi SP, SP, 2
load[2] r2, BP, 4
push[2] BP
subi SP, SP, 2
addi r3, NULL, 8
push[2] r3
load[2] r3, BP, 4
push[2] r3
store[2] BP, r0, -2
store[2] BP, r2, -4
subi SP, SP, 2
call left_shift_i
addi SP, SP, 8
pop[2] BP
move r0, RR
store[2] BP, r0, -4
load[2] r1, BP, 6
add r0, r0, r1
push[2] BP
subi SP, SP, 2
load[2] r2, BP, -2
push[2] r2
push[2] r0
store[2] BP, r0, -4
subi SP, SP, 2
call vga_write
addi SP, SP, 8
pop[2] BP
addi RR, NULL, 1
addi SP, SP, 4
ret
set_cursor:
move BP, SP
load[1] r0, BP, 2
load[1] r1, BP, 3
load[2] r2, NULL, VIDEO_TILE_WIDTH
cmp r0, r2
brge L46
addi r0, NULL, 0
rjmp L47
L46:
addi r0, NULL, 1
L47:
load[2] r3, NULL, VIDEO_TILE_HEIGHT
cmp r1, r3
brge L48
addi r1, NULL, 0
rjmp L49
L48:
addi r1, NULL, 1
L49:
or r0, r0, r1
cmpi r0, 0
breq L50
addi RR, NULL, 0
ret
rjmp L51
L50:
L51:
load[1] r0, BP, 2
move r1, r0
load[1] r2, BP, 3
move r3, r2
add r0, r0, r2
load[2] r4, NULL, VIDEO_TILE_WIDTH
mul r0, r0, r4
store[2] NULL, r0, CURSOR
store[2] NULL, r1, CURSOR_X
store[2] NULL, r3, CURSOR_Y
addi RR, NULL, 1
ret
advance_cursor:
move BP, SP
load[2] r0, NULL, CURSOR
addi r0, r0, 1
store[2] NULL, r0, CURSOR
load[2] r1, NULL, VIDEO_TILES
cmp r0, r1
brlt L52
addi r0, NULL, 0
rjmp L53
L52:
addi r0, NULL, 1
L53:
cmpi r0, 0
breq L54
load[2] r0, NULL, CURSOR_X
addi r0, r0, 1
store[2] NULL, r0, CURSOR_X
load[2] r1, NULL, VIDEO_TILE_WIDTH
cmp r0, r1
brge L56
addi r0, NULL, 0
rjmp L57
L56:
addi r0, NULL, 1
L57:
cmpi r0, 0
breq L58
addi r0, NULL, 0
load[2] r1, NULL, CURSOR_Y
addi r1, r1, 1
store[2] NULL, r0, CURSOR_X
store[2] NULL, r1, CURSOR_Y
rjmp L59
L58:
L59:
rjmp L55
L54:
addi r0, NULL, 0
addi r1, NULL, 0
addi r2, NULL, 0
store[2] NULL, r0, CURSOR
store[2] NULL, r1, CURSOR_X
store[2] NULL, r2, CURSOR_Y
L55:
move RR, NULL
ret
back_cursor:
move BP, SP
load[2] r0, NULL, CURSOR
cmpi r0, 0
breq L60
addi r0, NULL, 0
rjmp L61
L60:
addi r0, NULL, 1
L61:
cmpi r0, 0
breq L62
addi RR, NULL, 0
ret
rjmp L63
L62:
L63:
load[2] r0, NULL, CURSOR
subi r0, r0, 1
store[2] NULL, r0, CURSOR
load[2] r1, NULL, VIDEO_TILES
cmp r0, r1
brlt L64
addi r0, NULL, 0
rjmp L65
L64:
addi r0, NULL, 1
L65:
cmpi r0, 0
breq L66
load[2] r0, NULL, CURSOR_X
subi r0, r0, 1
store[2] NULL, r0, CURSOR_X
cmpi r0, 0
brlt L68
addi r0, NULL, 0
rjmp L69
L68:
addi r0, NULL, 1
L69:
cmpi r0, 0
breq L70
addi r0, NULL, 0
load[2] r1, NULL, CURSOR_Y
subi r1, r1, 1
store[2] NULL, r0, CURSOR_X
store[2] NULL, r1, CURSOR_Y
rjmp L71
L70:
L71:
rjmp L67
L66:
load[2] r0, NULL, VIDEO_TILES
subi r0, r0, 1
load[2] r1, NULL, VIDEO_TILE_WIDTH
move r2, r1
load[2] r3, NULL, VIDEO_TILE_HEIGHT
move r4, r3
store[2] NULL, r0, CURSOR
store[2] NULL, r2, CURSOR_X
store[2] NULL, r4, CURSOR_Y
L67:
move RR, NULL
ret
advance_steps:
move BP, SP
load[2] r0, BP, 2
load[2] r1, NULL, VIDEO_TILES
cmp r0, r1
brge L72
addi r0, NULL, 0
rjmp L73
L72:
addi r0, NULL, 1
L73:
cmpi r0, 0
breq L74
addi RR, NULL, 0
ret
rjmp L75
L74:
L75:
load[2] r0, NULL, CURSOR
load[2] r1, BP, 2
add r0, r0, r1
store[2] NULL, r0, CURSOR
load[2] r2, NULL, VIDEO_TILES
cmp r0, r2
brge L76
addi r0, NULL, 0
rjmp L77
L76:
addi r0, NULL, 1
L77:
cmpi r0, 0
breq L78
load[2] r0, NULL, CURSOR
load[2] r1, NULL, VIDEO_TILES
sub r0, r0, r1
store[2] NULL, r0, CURSOR
rjmp L79
L78:
L79:
subi SP, SP, 4
push[2] BP
subi SP, SP, 2
load[2] r0, NULL, VIDEO_TILE_WIDTH
push[2] r0
load[2] r1, NULL, CURSOR
push[2] r1
subi SP, SP, 2
call divide
addi SP, SP, 8
pop[2] BP
move r0, RR
subi SP, SP, 4
push[2] BP
subi SP, SP, 2
load[2] r1, NULL, VIDEO_TILE_HEIGHT
push[2] r1
load[2] r2, NULL, CURSOR
push[2] r2
store[4] BP, r0, -4
subi SP, SP, 2
call divide
addi SP, SP, 8
pop[2] BP
move r0, RR
push[2] BP
subi SP, SP, 2
addi r1, NULL, 16
push[2] r1
load[4] r1, BP, -4
subi SP, SP, 2
push[4] r1
store[4] BP, r0, -8
subi SP, SP, 2
call right_shift_l
addi SP, SP, 12
pop[2] BP
move r0, RR
push[2] BP
subi SP, SP, 2
addi r1, NULL, 16
push[2] r1
load[4] r1, BP, -8
subi SP, SP, 2
push[4] r1
store[2] NULL, r0, CURSOR_X
subi SP, SP, 2
call right_shift_l
addi SP, SP, 12
pop[2] BP
move r0, RR
store[2] NULL, r0, CURSOR_Y
addi RR, NULL, 1
addi SP, SP, 8
ret
advance_line:
move BP, SP
load[2] r0, NULL, CURSOR_Y
addi r0, r0, 1
store[2] NULL, r0, CURSOR_Y
load[2] r1, NULL, VIDEO_TILE_HEIGHT
cmp r0, r1
brlt L80
addi r0, NULL, 0
rjmp L81
L80:
addi r0, NULL, 1
L81:
cmpi r0, 0
breq L82
load[2] r0, NULL, VIDEO_TILE_WIDTH
load[2] r1, NULL, CURSOR_Y
mul r0, r0, r1
load[2] r2, NULL, CURSOR_X
add r0, r0, r2
store[2] NULL, r0, CURSOR
rjmp L83
L82:
load[2] r0, NULL, CURSOR_X
move r1, r0
addi r2, NULL, 0
store[2] NULL, r1, CURSOR
store[2] NULL, r2, CURSOR_Y
L83:
move RR, NULL
ret
back_line:
move BP, SP
load[2] r0, NULL, CURSOR_Y
subi r0, r0, 1
store[2] NULL, r0, CURSOR_Y
cmpi r0, 0
brge L84
addi r0, NULL, 0
rjmp L85
L84:
addi r0, NULL, 1
L85:
cmpi r0, 0
breq L86
load[2] r0, NULL, VIDEO_TILE_WIDTH
load[2] r1, NULL, CURSOR_Y
mul r0, r0, r1
load[2] r2, NULL, CURSOR_X
add r0, r0, r2
store[2] NULL, r0, CURSOR
rjmp L87
L86:
load[2] r0, NULL, CURSOR_X
move r1, r0
load[2] r2, NULL, VIDEO_TILE_HEIGHT
subi r2, r2, 1
store[2] NULL, r1, CURSOR
store[2] NULL, r2, CURSOR_Y
L87:
move RR, NULL
ret
new_line:
move BP, SP
load[2] r0, NULL, CURSOR_Y
addi r0, r0, 1
store[2] NULL, r0, CURSOR_Y
load[2] r1, NULL, VIDEO_TILE_HEIGHT
cmp r0, r1
brlt L88
addi r0, NULL, 0
rjmp L89
L88:
addi r0, NULL, 1
L89:
cmpi r0, 0
breq L90
load[2] r0, NULL, VIDEO_TILE_WIDTH
load[2] r1, NULL, CURSOR_Y
mul r0, r0, r1
store[2] NULL, r0, CURSOR
rjmp L91
L90:
addi r0, NULL, 0
addi r1, NULL, 0
store[2] NULL, r0, CURSOR
store[2] NULL, r1, CURSOR_Y
L91:
addi r0, NULL, 0
store[2] NULL, r0, CURSOR_X
move RR, NULL
ret
print_c_at:
move BP, SP
load[1] r0, BP, 5
load[2] r1, BP, 6
load[2] r2, NULL, FG_COLOR
load[2] r3, NULL, PALETTE_SIZE
cmp r2, r3
brge L92
addi r2, NULL, 0
rjmp L93
L92:
addi r2, NULL, 1
L93:
load[2] r4, NULL, BG_COLOR
cmp r4, r3
brge L94
addi r4, NULL, 0
rjmp L95
L94:
addi r4, NULL, 1
L95:
or r2, r2, r4
cmpi r2, 0
breq L96
addi RR, NULL, 0
ret
rjmp L97
L96:
L97:
subi SP, SP, 2
load[2] r0, NULL, FG_COLOR
push[2] BP
addi r1, NULL, 4
push[2] r1
push[2] r0
store[2] BP, r0, -2
subi SP, SP, 2
call left_shift_i
addi SP, SP, 6
pop[2] BP
move r0, RR
store[2] BP, r0, -2
load[2] r1, NULL, BG_COLOR
add r0, r0, r1
push[2] BP
addi r2, NULL, 8
push[2] r2
push[2] r0
store[2] BP, r0, -2
subi SP, SP, 2
call left_shift_i
addi SP, SP, 6
pop[2] BP
move r0, RR
subi SP, SP, 2
load[1] r1, BP, 5
store[2] BP, r1, -4
add r1, r1, r0
push[2] BP
subi SP, SP, 2
load[2] r2, BP, 6
push[2] r2
push[2] r1
store[2] BP, r0, -2
store[2] BP, r1, -4
subi SP, SP, 2
call tile_index_write
addi SP, SP, 8
pop[2] BP
addi SP, SP, 4
ret
print_c_at_pos:
move BP, SP
load[1] r0, BP, 3
load[2] r1, BP, 4
load[2] r2, BP, 6
push[2] BP
subi SP, SP, 2
load[2] r3, NULL, VIDEO_TILE_WIDTH
mul r3, r3, r2
add r1, r1, r3
push[2] r1
push[1] r0
subi SP, SP, 3
call print_c_at
addi SP, SP, 8
pop[2] BP
ret
print_c:
move BP, SP
load[1] r0, BP, 3
push[2] BP
subi SP, SP, 2
load[2] r1, NULL, CURSOR
push[2] r1
push[1] r0
subi SP, SP, 3
call print_c_at
addi SP, SP, 8
pop[2] BP
cmpi RR, 0
breq L98
push[2] BP
call advance_cursor
pop[2] BP
addi RR, NULL, 1
ret
rjmp L99
L98:
L99:
addi RR, NULL, 0
ret
print:
move BP, SP
load[2] r0, BP, 2
L100:
load[2] r0, BP, 2
load[1] r0, r0, 0
cmpi r0, 0
breq L101
push[2] BP
subi SP, SP, 2
load[2] r1, BP, 2
load[1] r1, r1, 0
push[1] r1
subi SP, SP, 1
call print_c
addi SP, SP, 4
pop[2] BP
load[2] r0, BP, 2
addi r0, r0, 1
store[2] BP, r0, 2
rjmp L100
L101:
move RR, NULL
ret
clear:
move BP, SP
subi SP, SP, 2
addi r0, NULL, 0
store[2] BP, r0, -2
L102:
load[2] r0, BP, -2
load[2] r1, NULL, VIDEO_TILES
cmp r0, r1
brlt L104
addi r0, NULL, 0
rjmp L105
L104:
addi r0, NULL, 1
L105:
cmpi r0, 0
breq L103
push[2] BP
load[2] r2, BP, -2
push[2] r2
addi r3, NULL, 0
push[2] r3
subi SP, SP, 2
call tile_index_write
addi SP, SP, 6
pop[2] BP
rjmp L102
L103:
addi r0, NULL, 0
addi r1, NULL, 0
addi r2, NULL, 0
addi SP, SP, 2
store[2] NULL, r0, CURSOR
store[2] NULL, r1, CURSOR_X
store[2] NULL, r2, CURSOR_Y
move RR, NULL
ret
memset:
move BP, SP
load[2] r0, BP, 2
load[2] r1, BP, 4
load[1] r2, BP, 7
subi SP, SP, 2
addi r3, NULL, 0
store[2] BP, r3, -2
L106:
load[2] r0, BP, -2
load[2] r1, BP, 4
cmp r0, r1
brlt L108
addi r0, NULL, 0
rjmp L109
L108:
addi r0, NULL, 1
L109:
cmpi r0, 0
breq L107
load[2] r2, BP, 2
load[2] r3, BP, -2
addi r4, NULL, 1
mul r3, r3, r4
add r2, r2, r3
load[1] r4, BP, 7
store[1] r2, r4, 0
addi r3, r3, 1
store[2] BP, r3, -2
rjmp L106
L107:
addi SP, SP, 2
move RR, NULL
ret
add_changed:
move BP, SP
load[2] r0, BP, 2
addi r1, NULL, changed
load[2] r2, NULL, changed_index
addi r3, NULL, 2
mul r2, r2, r3
add r1, r1, r2
store[2] r1, r0, 0
addi r2, r2, 1
store[2] NULL, r2, changed_index
move RR, NULL
ret
calc_next_gen:
move BP, SP
subi SP, SP, 2
addi r0, NULL, 0
subi SP, SP, 2
addi r1, NULL, 0
subi SP, SP, 2
addi r2, NULL, 0
store[2] BP, r0, -2
store[2] BP, r1, -4
store[2] BP, r2, -6
L110:
load[2] r0, BP, -2
load[2] r1, NULL, VIDEO_TILES
cmp r0, r1
brlt L112
addi r0, NULL, 0
rjmp L113
L112:
addi r0, NULL, 1
L113:
cmpi r0, 0
breq L111
subi SP, SP, 2
addi r2, NULL, 0
subi SP, SP, 2
addi r3, NULL, -1
subi SP, SP, 2
addi r4, NULL, -1
store[2] BP, r2, -8
store[2] BP, r3, -10
store[2] BP, r4, -12
L114:
load[2] r0, BP, -12
cmpi r0, 2
brlt L116
addi r0, NULL, 0
rjmp L117
L116:
addi r0, NULL, 1
L117:
cmpi r0, 0
breq L115
L118:
load[2] r0, BP, -10
cmpi r0, 2
brlt L120
addi r0, NULL, 0
rjmp L121
L120:
addi r0, NULL, 1
L121:
cmpi r0, 0
breq L119
subi SP, SP, 2
load[2] r1, BP, -4
load[2] r2, BP, -10
add r1, r1, r2
subi SP, SP, 2
load[2] r3, BP, -6
load[2] r4, BP, -12
add r3, r3, r4
store[2] BP, r1, -14
load[2] r5, NULL, VIDEO_TILE_WIDTH
cmp r1, r5
brge L122
addi r1, NULL, 0
rjmp L123
L122:
addi r1, NULL, 1
L123:
store[2] BP, r3, -16
cmpi r1, 0
breq L124
addi r0, NULL, 0
store[2] BP, r0, -14
rjmp L125
L124:
load[2] r0, BP, -14
load[2] r1, NULL, VIDEO_TILE_WIDTH
cmp r0, r1
brle L126
addi r0, NULL, 0
rjmp L127
L126:
addi r0, NULL, 1
L127:
cmpi r0, 0
breq L128
load[2] r0, NULL, VIDEO_TILE_WIDTH
subi r0, r0, 1
store[2] BP, r0, -14
rjmp L129
L128:
L129:
L125:
load[2] r0, BP, -16
load[2] r1, NULL, VIDEO_TILE_HEIGHT
cmp r0, r1
brge L130
addi r0, NULL, 0
rjmp L131
L130:
addi r0, NULL, 1
L131:
cmpi r0, 0
breq L132
addi r0, NULL, 0
store[2] BP, r0, -16
rjmp L133
L132:
load[2] r0, BP, -14
load[2] r1, NULL, VIDEO_TILE_WIDTH
cmp r0, r1
brle L134
addi r0, NULL, 0
rjmp L135
L134:
addi r0, NULL, 1
L135:
cmpi r0, 0
breq L136
load[2] r0, NULL, VIDEO_TILE_HEIGHT
subi r0, r0, 1
store[2] BP, r0, -16
rjmp L137
L136:
L137:
L133:
subi SP, SP, 2
load[2] r0, BP, -14
load[2] r1, NULL, VIDEO_TILE_WIDTH
load[2] r2, BP, -16
mul r1, r1, r2
add r0, r0, r1
load[2] r3, BP, -8
addi r4, NULL, buffer
store[2] BP, r0, -18
add r0, r4, r0
load[1] r0, r0, 0
add r3, r3, r0
load[2] r5, BP, -10
addi r5, r5, 1
addi SP, SP, 6
store[2] BP, r3, -8
store[2] BP, r5, -10
rjmp L118
L119:
load[2] r0, BP, -12
addi r0, r0, 1
store[2] BP, r0, -12
rjmp L114
L115:
addi r0, NULL, buffer
load[2] r1, BP, -2
add r1, r0, r1
load[1] r1, r1, 0
cmpi r1, 1
breq L138
addi r1, NULL, 0
rjmp L139
L138:
addi r1, NULL, 1
L139:
cmpi r1, 0
breq L140
load[2] r0, BP, -8
cmpi r0, 2
brlt L142
addi r0, NULL, 0
rjmp L143
L142:
addi r0, NULL, 1
L143:
load[2] r1, BP, -8
cmpi r1, 3
brgt L144
addi r1, NULL, 0
rjmp L145
L144:
addi r1, NULL, 1
L145:
or r0, r0, r1
cmpi r0, 0
breq L146
push[2] BP
subi SP, SP, 2
load[2] r0, BP, -2
push[2] r0
call add_changed
addi SP, SP, 4
pop[2] BP
rjmp L147
L146:
L147:
rjmp L141
L140:
load[2] r0, BP, -8
cmpi r0, 3
breq L148
addi r0, NULL, 0
rjmp L149
L148:
addi r0, NULL, 1
L149:
cmpi r0, 0
breq L150
push[2] BP
subi SP, SP, 2
load[2] r0, BP, -2
push[2] r0
call add_changed
addi SP, SP, 4
pop[2] BP
rjmp L151
L150:
L151:
L141:
load[2] r0, BP, -4
addi r0, r0, 1
load[2] r1, BP, -2
addi r1, r1, 1
store[2] BP, r0, -4
load[2] r2, NULL, VIDEO_TILE_WIDTH
cmp r0, r2
brge L152
addi r0, NULL, 0
rjmp L153
L152:
addi r0, NULL, 1
L153:
store[2] BP, r1, -2
cmpi r0, 0
breq L154
addi r0, NULL, 0
store[2] BP, r0, -4
rjmp L155
L154:
L155:
addi SP, SP, 6
rjmp L110
L111:
addi SP, SP, 6
move RR, NULL
ret
print_board:
move BP, SP
subi SP, SP, 2
addi r0, NULL, 0
store[2] BP, r0, -2
L156:
load[2] r0, BP, -2
load[2] r1, NULL, VIDEO_TILES
cmp r0, r1
brlt L158
addi r0, NULL, 0
rjmp L159
L158:
addi r0, NULL, 1
L159:
cmpi r0, 0
breq L157
addi r2, NULL, buffer
load[2] r3, BP, -2
add r3, r2, r3
load[1] r3, r3, 0
cmpi r3, 0
breq L160
push[2] BP
load[2] r0, BP, -2
push[2] r0
addi r1, NULL, 43
push[2] r1
subi SP, SP, 2
call vga_write
addi SP, SP, 6
pop[2] BP
rjmp L161
L160:
push[2] BP
load[2] r0, BP, -2
push[2] r0
addi r1, NULL, 32
push[2] r1
subi SP, SP, 2
call vga_write
addi SP, SP, 6
pop[2] BP
L161:
rjmp L156
L157:
addi SP, SP, 2
move RR, NULL
ret
update_changed:
move BP, SP
subi SP, SP, 2
addi r0, NULL, 0
store[2] BP, r0, -2
L162:
load[2] r0, BP, -2
load[2] r1, NULL, changed_index
cmp r0, r1
brlt L164
addi r0, NULL, 0
rjmp L165
L164:
addi r0, NULL, 1
L165:
cmpi r0, 0
breq L163
subi SP, SP, 2
addi r2, NULL, changed
load[2] r3, BP, -2
addi r4, NULL, 2
mul r3, r3, r4
add r3, r2, r3
load[2] r3, r3, 0
addi r4, NULL, buffer
store[2] BP, r3, -4
add r3, r4, r3
load[1] r3, r3, 0
cmpi r3, 0
breq L166
addi r0, NULL, buffer
load[2] r1, BP, -4
addi r2, NULL, 1
mul r1, r1, r2
add r0, r0, r1
addi r2, NULL, 0
store[1] r0, r2, 0
rjmp L167
L166:
addi r0, NULL, buffer
load[2] r1, BP, -4
addi r2, NULL, 1
mul r1, r1, r2
add r0, r0, r1
addi r2, NULL, 1
store[1] r0, r2, 0
L167:
addi SP, SP, 2
rjmp L162
L163:
addi r0, NULL, 0
addi SP, SP, 2
store[2] NULL, r0, changed_index
move RR, NULL
ret
sleep_ms:
move BP, SP
load[4] r0, BP, 4
subi SP, SP, 4
load[4] r1, NULL, SLEEP_MS_MULT
mul r0, r0, r1
subi SP, SP, 4
addi r2, NULL, 0
store[4] BP, r0, -4
store[4] BP, r2, -8
L168:
load[4] r0, BP, -8
load[4] r1, BP, -4
cmp r0, r1
brlt L170
addi r0, NULL, 0
rjmp L171
L170:
addi r0, NULL, 1
L171:
cmpi r0, 0
breq L169
load[4] r2, BP, -8
addi r2, r2, 1
store[4] BP, r2, -8
rjmp L168
L169:
addi SP, SP, 8
move RR, NULL
ret
next_gen:
move BP, SP
push[2] BP
call calc_next_gen
pop[2] BP
push[2] BP
call update_changed
pop[2] BP
move RR, NULL
ret
main:
move BP, SP
push[2] BP
subi SP, SP, 2
addi r0, NULL, 0
push[1] r0
load[2] r0, NULL, VIDEO_TILES
subi SP, SP, 1
push[2] r0
addi r1, NULL, buffer
push[2] r1
call memset
addi SP, SP, 8
pop[2] BP
addi r0, NULL, buffer
addi r0, r0, 41
addi r1, NULL, 1
store[1] r0, r1, 0
addi r0, NULL, buffer
addi r0, r0, 82
addi r1, NULL, 1
store[1] r0, r1, 0
addi r0, NULL, buffer
addi r0, r0, 121
addi r1, NULL, 1
store[1] r0, r1, 0
addi r0, NULL, buffer
addi r0, r0, 122
addi r1, NULL, 1
store[1] r0, r1, 0
addi r0, NULL, buffer
addi r0, r0, 123
addi r1, NULL, 1
store[1] r0, r1, 0
push[2] BP
call print_board
pop[2] BP
L172:
push[2] BP
subi SP, SP, 2
addi r0, NULL, 500
push[4] r0
subi SP, SP, 2
call sleep_ms
addi SP, SP, 8
pop[2] BP
push[2] BP
call next_gen
pop[2] BP
rjmp L172
L173:
move RR, NULL
ret
(Pre register_macros)
(Code after 'register_macros')
 const SP r15
const NULL r14
const BP r13
const RR r12
.data MEMORY_SIZE
.dh 4096
.data VIDEO_TILE_WIDTH
.dh 40
.data VIDEO_TILE_HEIGHT
.dh 30
.data VIDEO_TILES
.dh 0
load[2] r0, NULL, VIDEO_TILE_WIDTH
load[2] r1, NULL, VIDEO_TILE_HEIGHT
mul r0, r0, r1
store[2] NULL, r0, VIDEO_TILES
.data PALETTE_START
.dh 0
load[2] r0, NULL, VIDEO_TILES
store[2] NULL, r0, PALETTE_START
.data PALETTE_SIZE
.dh 16
.data VIDEO_MEMORY_SIZE
.dh 0
load[2] r0, NULL, VIDEO_TILES
load[2] r2, NULL, PALETTE_SIZE
add r0, r0, r2
store[2] NULL, r0, VIDEO_MEMORY_SIZE
.data VIDEO_PIXEL_WIDTH
.dh 640
.data VIDEO_PIXEL_HEIGHT
.dh 480
.data FG_COLOR
.dh 0
.data BG_COLOR
.dh 0
.data CURSOR
.dh 0
.data CURSOR_X
.dh 0
.data CURSOR_Y
.dh 0
.data buffer
.db 0
.data changed_index
.dh 0
.data changed
.dh 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
.data SLEEP_MS_MULT
.dw 7692
subi SP, SP, 1
call main
subi SP, SP, 2
__halt:
rjmp __halt
in:
move BP, SP
load[2] r0, BP, 2
subi SP, SP, 4
load[4] r1, BP, -4
in r1, 0
move RR, r1
addi SP, SP, 4
ret
out:
move BP, SP
load[4] r0, BP, 4
load[2] r1, BP, 10
out 0, r0
store[4] BP, r0, 4
move RR, NULL
ret
vga_write:
move BP, SP
load[2] r0, BP, 4
load[2] r1, BP, 6
vgaw r1, r0, 0
store[2] BP, r1, 6
move RR, NULL
ret
outside_bound:
move BP, SP
load[2] r0, BP, 2
load[2] r1, BP, 4
load[2] r2, BP, 6
cmp r0, r2
brge L0
addi r0, NULL, 0
rjmp L1
L0:
addi r0, NULL, 1
L1:
load[2] r3, BP, 2
cmp r3, r1
brlt L2
addi r3, NULL, 0
rjmp L3
L2:
addi r3, NULL, 1
L3:
or r0, r0, r3
move RR, r0
ret
left_shift_l:
move BP, SP
load[4] r0, BP, 4
load[2] r1, BP, 10
L4:
load[2] r0, BP, 10
cmpi r0, 0
brgt L6
addi r0, NULL, 0
rjmp L7
L6:
addi r0, NULL, 1
L7:
cmpi r0, 0
breq L5
load[4] r1, BP, 4
lsl[4] r1, r1
load[2] r2, BP, 10
subi r2, r2, 1
store[4] BP, r1, 4
store[2] BP, r2, 10
rjmp L4
L5:
load[4] r0, BP, 4
move RR, r0
ret
right_shift_l:
move BP, SP
load[4] r0, BP, 4
load[2] r1, BP, 10
L8:
load[2] r0, BP, 10
cmpi r0, 0
brgt L10
addi r0, NULL, 0
rjmp L11
L10:
addi r0, NULL, 1
L11:
cmpi r0, 0
breq L9
load[4] r1, BP, 4
lsr[4] r1, r1
load[2] r2, BP, 10
subi r2, r2, 1
store[4] BP, r1, 4
store[2] BP, r2, 10
rjmp L8
L9:
load[4] r0, BP, 4
move RR, r0
ret
left_shift_i:
move BP, SP
load[2] r0, BP, 4
load[2] r1, BP, 6
L12:
load[2] r0, BP, 6
cmpi r0, 0
brgt L14
addi r0, NULL, 0
rjmp L15
L14:
addi r0, NULL, 1
L15:
cmpi r0, 0
breq L13
load[2] r1, BP, 4
lsl[2] r1, r1
load[2] r2, BP, 6
subi r2, r2, 1
store[2] BP, r1, 4
store[2] BP, r2, 6
rjmp L12
L13:
load[2] r0, BP, 4
move RR, r0
ret
right_shift_i:
move BP, SP
load[2] r0, BP, 4
load[2] r1, BP, 6
L16:
load[2] r0, BP, 6
cmpi r0, 0
brgt L18
addi r0, NULL, 0
rjmp L19
L18:
addi r0, NULL, 1
L19:
cmpi r0, 0
breq L17
load[2] r1, BP, 4
lsr[2] r1, r1
load[2] r2, BP, 6
subi r2, r2, 1
store[2] BP, r1, 4
store[2] BP, r2, 6
rjmp L16
L17:
load[2] r0, BP, 4
move RR, r0
ret
left_shift_c:
move BP, SP
load[1] r0, BP, 5
load[2] r1, BP, 6
L20:
load[2] r0, BP, 6
cmpi r0, 0
brgt L22
addi r0, NULL, 0
rjmp L23
L22:
addi r0, NULL, 1
L23:
cmpi r0, 0
breq L21
load[1] r1, BP, 5
lsl[1] r1, r1
load[2] r2, BP, 6
subi r2, r2, 1
store[1] BP, r1, 5
store[2] BP, r2, 6
rjmp L20
L21:
load[1] r0, BP, 5
move RR, r0
ret
right_shift_c:
move BP, SP
load[1] r0, BP, 5
load[2] r1, BP, 6
L24:
load[2] r0, BP, 6
cmpi r0, 0
brgt L26
addi r0, NULL, 0
rjmp L27
L26:
addi r0, NULL, 1
L27:
cmpi r0, 0
breq L25
load[1] r1, BP, 5
lsr[1] r1, r1
load[2] r2, BP, 6
subi r2, r2, 1
store[1] BP, r1, 5
store[2] BP, r2, 6
rjmp L24
L25:
load[1] r0, BP, 5
move RR, r0
ret
divide:
move BP, SP
load[2] r0, BP, 4
load[2] r1, BP, 6
subi SP, SP, 2
subi SP, SP, 2
addi r2, NULL, 0
store[2] BP, r0, -2
store[2] BP, r2, -4
L28:
load[2] r0, BP, -2
load[2] r1, BP, 6
cmp r0, r1
brgt L30
addi r0, NULL, 0
rjmp L31
L30:
addi r0, NULL, 1
L31:
cmpi r0, 0
breq L29
load[2] r2, BP, -2
sub r2, r2, r1
load[2] r3, BP, -4
addi r3, r3, 1
store[2] BP, r2, -2
store[2] BP, r3, -4
rjmp L28
L29:
subi SP, SP, 4
load[2] r0, BP, -4
push[2] BP
subi SP, SP, 2
addi r1, NULL, 16
push[2] r1
subi SP, SP, 2
push[4] r0
store[4] BP, r0, -8
subi SP, SP, 2
call left_shift_l
addi SP, SP, 12
pop[2] BP
move r0, RR
store[4] BP, r0, -8
load[2] r1, BP, -2
add r0, r0, r1
move RR, r0
addi SP, SP, 8
ret
tile_index_write:
move BP, SP
load[2] r0, BP, 4
load[2] r3, BP, 6
load[2] r4, NULL, VIDEO_TILES
cmp r3, r4
brge L32
addi r3, NULL, 0
rjmp L33
L32:
addi r3, NULL, 1
L33:
cmpi r3, 0
breq L34
addi RR, NULL, 0
ret
rjmp L35
L34:
L35:
push[2] BP
subi SP, SP, 2
load[2] r0, BP, 6
push[2] r0
load[2] r1, BP, 4
push[2] r1
subi SP, SP, 2
call vga_write
addi SP, SP, 8
pop[2] BP
addi RR, NULL, 1
ret
tile_coord_write:
move BP, SP
load[4] r0, BP, 4
load[2] r1, BP, 8
load[2] r2, BP, 10
load[2] r3, NULL, VIDEO_PIXEL_WIDTH
cmp r1, r3
brge L36
addi r1, NULL, 0
rjmp L37
L36:
addi r1, NULL, 1
L37:
load[2] r4, NULL, VIDEO_PIXEL_HEIGHT
cmp r2, r4
brge L38
addi r2, NULL, 0
rjmp L39
L38:
addi r2, NULL, 1
L39:
or r1, r1, r2
cmpi r1, 0
breq L40
addi RR, NULL, 0
ret
rjmp L41
L40:
L41:
subi SP, SP, 2
load[2] r0, BP, 8
load[2] r1, NULL, VIDEO_PIXEL_WIDTH
load[2] r2, BP, 10
mul r1, r1, r2
add r0, r0, r1
push[2] BP
push[2] r0
load[4] r3, BP, 4
push[2] r3
store[2] BP, r0, -2
subi SP, SP, 2
call vga_write
addi SP, SP, 6
pop[2] BP
addi RR, NULL, 1
addi SP, SP, 2
ret
palette_index_write:
move BP, SP
load[2] r0, BP, 2
load[2] r1, BP, 4
load[2] r2, BP, 6
load[2] r3, NULL, PALETTE_SIZE
cmp r0, r3
brge L42
addi r0, NULL, 0
rjmp L43
L42:
addi r0, NULL, 1
L43:
cmpi r0, 0
breq L44
addi RR, NULL, 0
ret
rjmp L45
L44:
L45:
subi SP, SP, 2
load[2] r0, NULL, PALETTE_START
load[2] r1, BP, 2
add r0, r0, r1
subi SP, SP, 2
load[2] r2, BP, 4
push[2] BP
subi SP, SP, 2
addi r3, NULL, 8
push[2] r3
load[2] r3, BP, 4
push[2] r3
store[2] BP, r0, -2
store[2] BP, r2, -4
subi SP, SP, 2
call left_shift_i
addi SP, SP, 8
pop[2] BP
move r0, RR
store[2] BP, r0, -4
load[2] r1, BP, 6
add r0, r0, r1
push[2] BP
subi SP, SP, 2
load[2] r2, BP, -2
push[2] r2
push[2] r0
store[2] BP, r0, -4
subi SP, SP, 2
call vga_write
addi SP, SP, 8
pop[2] BP
addi RR, NULL, 1
addi SP, SP, 4
ret
set_cursor:
move BP, SP
load[1] r0, BP, 2
load[1] r1, BP, 3
load[2] r2, NULL, VIDEO_TILE_WIDTH
cmp r0, r2
brge L46
addi r0, NULL, 0
rjmp L47
L46:
addi r0, NULL, 1
L47:
load[2] r3, NULL, VIDEO_TILE_HEIGHT
cmp r1, r3
brge L48
addi r1, NULL, 0
rjmp L49
L48:
addi r1, NULL, 1
L49:
or r0, r0, r1
cmpi r0, 0
breq L50
addi RR, NULL, 0
ret
rjmp L51
L50:
L51:
load[1] r0, BP, 2
move r1, r0
load[1] r2, BP, 3
move r3, r2
add r0, r0, r2
load[2] r4, NULL, VIDEO_TILE_WIDTH
mul r0, r0, r4
store[2] NULL, r0, CURSOR
store[2] NULL, r1, CURSOR_X
store[2] NULL, r3, CURSOR_Y
addi RR, NULL, 1
ret
advance_cursor:
move BP, SP
load[2] r0, NULL, CURSOR
addi r0, r0, 1
store[2] NULL, r0, CURSOR
load[2] r1, NULL, VIDEO_TILES
cmp r0, r1
brlt L52
addi r0, NULL, 0
rjmp L53
L52:
addi r0, NULL, 1
L53:
cmpi r0, 0
breq L54
load[2] r0, NULL, CURSOR_X
addi r0, r0, 1
store[2] NULL, r0, CURSOR_X
load[2] r1, NULL, VIDEO_TILE_WIDTH
cmp r0, r1
brge L56
addi r0, NULL, 0
rjmp L57
L56:
addi r0, NULL, 1
L57:
cmpi r0, 0
breq L58
addi r0, NULL, 0
load[2] r1, NULL, CURSOR_Y
addi r1, r1, 1
store[2] NULL, r0, CURSOR_X
store[2] NULL, r1, CURSOR_Y
rjmp L59
L58:
L59:
rjmp L55
L54:
addi r0, NULL, 0
addi r1, NULL, 0
addi r2, NULL, 0
store[2] NULL, r0, CURSOR
store[2] NULL, r1, CURSOR_X
store[2] NULL, r2, CURSOR_Y
L55:
move RR, NULL
ret
back_cursor:
move BP, SP
load[2] r0, NULL, CURSOR
cmpi r0, 0
breq L60
addi r0, NULL, 0
rjmp L61
L60:
addi r0, NULL, 1
L61:
cmpi r0, 0
breq L62
addi RR, NULL, 0
ret
rjmp L63
L62:
L63:
load[2] r0, NULL, CURSOR
subi r0, r0, 1
store[2] NULL, r0, CURSOR
load[2] r1, NULL, VIDEO_TILES
cmp r0, r1
brlt L64
addi r0, NULL, 0
rjmp L65
L64:
addi r0, NULL, 1
L65:
cmpi r0, 0
breq L66
load[2] r0, NULL, CURSOR_X
subi r0, r0, 1
store[2] NULL, r0, CURSOR_X
cmpi r0, 0
brlt L68
addi r0, NULL, 0
rjmp L69
L68:
addi r0, NULL, 1
L69:
cmpi r0, 0
breq L70
addi r0, NULL, 0
load[2] r1, NULL, CURSOR_Y
subi r1, r1, 1
store[2] NULL, r0, CURSOR_X
store[2] NULL, r1, CURSOR_Y
rjmp L71
L70:
L71:
rjmp L67
L66:
load[2] r0, NULL, VIDEO_TILES
subi r0, r0, 1
load[2] r1, NULL, VIDEO_TILE_WIDTH
move r2, r1
load[2] r3, NULL, VIDEO_TILE_HEIGHT
move r4, r3
store[2] NULL, r0, CURSOR
store[2] NULL, r2, CURSOR_X
store[2] NULL, r4, CURSOR_Y
L67:
move RR, NULL
ret
advance_steps:
move BP, SP
load[2] r0, BP, 2
load[2] r1, NULL, VIDEO_TILES
cmp r0, r1
brge L72
addi r0, NULL, 0
rjmp L73
L72:
addi r0, NULL, 1
L73:
cmpi r0, 0
breq L74
addi RR, NULL, 0
ret
rjmp L75
L74:
L75:
load[2] r0, NULL, CURSOR
load[2] r1, BP, 2
add r0, r0, r1
store[2] NULL, r0, CURSOR
load[2] r2, NULL, VIDEO_TILES
cmp r0, r2
brge L76
addi r0, NULL, 0
rjmp L77
L76:
addi r0, NULL, 1
L77:
cmpi r0, 0
breq L78
load[2] r0, NULL, CURSOR
load[2] r1, NULL, VIDEO_TILES
sub r0, r0, r1
store[2] NULL, r0, CURSOR
rjmp L79
L78:
L79:
subi SP, SP, 4
push[2] BP
subi SP, SP, 2
load[2] r0, NULL, VIDEO_TILE_WIDTH
push[2] r0
load[2] r1, NULL, CURSOR
push[2] r1
subi SP, SP, 2
call divide
addi SP, SP, 8
pop[2] BP
move r0, RR
subi SP, SP, 4
push[2] BP
subi SP, SP, 2
load[2] r1, NULL, VIDEO_TILE_HEIGHT
push[2] r1
load[2] r2, NULL, CURSOR
push[2] r2
store[4] BP, r0, -4
subi SP, SP, 2
call divide
addi SP, SP, 8
pop[2] BP
move r0, RR
push[2] BP
subi SP, SP, 2
addi r1, NULL, 16
push[2] r1
load[4] r1, BP, -4
subi SP, SP, 2
push[4] r1
store[4] BP, r0, -8
subi SP, SP, 2
call right_shift_l
addi SP, SP, 12
pop[2] BP
move r0, RR
push[2] BP
subi SP, SP, 2
addi r1, NULL, 16
push[2] r1
load[4] r1, BP, -8
subi SP, SP, 2
push[4] r1
store[2] NULL, r0, CURSOR_X
subi SP, SP, 2
call right_shift_l
addi SP, SP, 12
pop[2] BP
move r0, RR
store[2] NULL, r0, CURSOR_Y
addi RR, NULL, 1
addi SP, SP, 8
ret
advance_line:
move BP, SP
load[2] r0, NULL, CURSOR_Y
addi r0, r0, 1
store[2] NULL, r0, CURSOR_Y
load[2] r1, NULL, VIDEO_TILE_HEIGHT
cmp r0, r1
brlt L80
addi r0, NULL, 0
rjmp L81
L80:
addi r0, NULL, 1
L81:
cmpi r0, 0
breq L82
load[2] r0, NULL, VIDEO_TILE_WIDTH
load[2] r1, NULL, CURSOR_Y
mul r0, r0, r1
load[2] r2, NULL, CURSOR_X
add r0, r0, r2
store[2] NULL, r0, CURSOR
rjmp L83
L82:
load[2] r0, NULL, CURSOR_X
move r1, r0
addi r2, NULL, 0
store[2] NULL, r1, CURSOR
store[2] NULL, r2, CURSOR_Y
L83:
move RR, NULL
ret
back_line:
move BP, SP
load[2] r0, NULL, CURSOR_Y
subi r0, r0, 1
store[2] NULL, r0, CURSOR_Y
cmpi r0, 0
brge L84
addi r0, NULL, 0
rjmp L85
L84:
addi r0, NULL, 1
L85:
cmpi r0, 0
breq L86
load[2] r0, NULL, VIDEO_TILE_WIDTH
load[2] r1, NULL, CURSOR_Y
mul r0, r0, r1
load[2] r2, NULL, CURSOR_X
add r0, r0, r2
store[2] NULL, r0, CURSOR
rjmp L87
L86:
load[2] r0, NULL, CURSOR_X
move r1, r0
load[2] r2, NULL, VIDEO_TILE_HEIGHT
subi r2, r2, 1
store[2] NULL, r1, CURSOR
store[2] NULL, r2, CURSOR_Y
L87:
move RR, NULL
ret
new_line:
move BP, SP
load[2] r0, NULL, CURSOR_Y
addi r0, r0, 1
store[2] NULL, r0, CURSOR_Y
load[2] r1, NULL, VIDEO_TILE_HEIGHT
cmp r0, r1
brlt L88
addi r0, NULL, 0
rjmp L89
L88:
addi r0, NULL, 1
L89:
cmpi r0, 0
breq L90
load[2] r0, NULL, VIDEO_TILE_WIDTH
load[2] r1, NULL, CURSOR_Y
mul r0, r0, r1
store[2] NULL, r0, CURSOR
rjmp L91
L90:
addi r0, NULL, 0
addi r1, NULL, 0
store[2] NULL, r0, CURSOR
store[2] NULL, r1, CURSOR_Y
L91:
addi r0, NULL, 0
store[2] NULL, r0, CURSOR_X
move RR, NULL
ret
print_c_at:
move BP, SP
load[1] r0, BP, 5
load[2] r1, BP, 6
load[2] r2, NULL, FG_COLOR
load[2] r3, NULL, PALETTE_SIZE
cmp r2, r3
brge L92
addi r2, NULL, 0
rjmp L93
L92:
addi r2, NULL, 1
L93:
load[2] r4, NULL, BG_COLOR
cmp r4, r3
brge L94
addi r4, NULL, 0
rjmp L95
L94:
addi r4, NULL, 1
L95:
or r2, r2, r4
cmpi r2, 0
breq L96
addi RR, NULL, 0
ret
rjmp L97
L96:
L97:
subi SP, SP, 2
load[2] r0, NULL, FG_COLOR
push[2] BP
addi r1, NULL, 4
push[2] r1
push[2] r0
store[2] BP, r0, -2
subi SP, SP, 2
call left_shift_i
addi SP, SP, 6
pop[2] BP
move r0, RR
store[2] BP, r0, -2
load[2] r1, NULL, BG_COLOR
add r0, r0, r1
push[2] BP
addi r2, NULL, 8
push[2] r2
push[2] r0
store[2] BP, r0, -2
subi SP, SP, 2
call left_shift_i
addi SP, SP, 6
pop[2] BP
move r0, RR
subi SP, SP, 2
load[1] r1, BP, 5
store[2] BP, r1, -4
add r1, r1, r0
push[2] BP
subi SP, SP, 2
load[2] r2, BP, 6
push[2] r2
push[2] r1
store[2] BP, r0, -2
store[2] BP, r1, -4
subi SP, SP, 2
call tile_index_write
addi SP, SP, 8
pop[2] BP
addi SP, SP, 4
ret
print_c_at_pos:
move BP, SP
load[1] r0, BP, 3
load[2] r1, BP, 4
load[2] r2, BP, 6
push[2] BP
subi SP, SP, 2
load[2] r3, NULL, VIDEO_TILE_WIDTH
mul r3, r3, r2
add r1, r1, r3
push[2] r1
push[1] r0
subi SP, SP, 3
call print_c_at
addi SP, SP, 8
pop[2] BP
ret
print_c:
move BP, SP
load[1] r0, BP, 3
push[2] BP
subi SP, SP, 2
load[2] r1, NULL, CURSOR
push[2] r1
push[1] r0
subi SP, SP, 3
call print_c_at
addi SP, SP, 8
pop[2] BP
cmpi RR, 0
breq L98
push[2] BP
call advance_cursor
pop[2] BP
addi RR, NULL, 1
ret
rjmp L99
L98:
L99:
addi RR, NULL, 0
ret
print:
move BP, SP
load[2] r0, BP, 2
L100:
load[2] r0, BP, 2
load[1] r0, r0, 0
cmpi r0, 0
breq L101
push[2] BP
subi SP, SP, 2
load[2] r1, BP, 2
load[1] r1, r1, 0
push[1] r1
subi SP, SP, 1
call print_c
addi SP, SP, 4
pop[2] BP
load[2] r0, BP, 2
addi r0, r0, 1
store[2] BP, r0, 2
rjmp L100
L101:
move RR, NULL
ret
clear:
move BP, SP
subi SP, SP, 2
addi r0, NULL, 0
store[2] BP, r0, -2
L102:
load[2] r0, BP, -2
load[2] r1, NULL, VIDEO_TILES
cmp r0, r1
brlt L104
addi r0, NULL, 0
rjmp L105
L104:
addi r0, NULL, 1
L105:
cmpi r0, 0
breq L103
push[2] BP
load[2] r2, BP, -2
push[2] r2
addi r3, NULL, 0
push[2] r3
subi SP, SP, 2
call tile_index_write
addi SP, SP, 6
pop[2] BP
rjmp L102
L103:
addi r0, NULL, 0
addi r1, NULL, 0
addi r2, NULL, 0
addi SP, SP, 2
store[2] NULL, r0, CURSOR
store[2] NULL, r1, CURSOR_X
store[2] NULL, r2, CURSOR_Y
move RR, NULL
ret
memset:
move BP, SP
load[2] r0, BP, 2
load[2] r1, BP, 4
load[1] r2, BP, 7
subi SP, SP, 2
addi r3, NULL, 0
store[2] BP, r3, -2
L106:
load[2] r0, BP, -2
load[2] r1, BP, 4
cmp r0, r1
brlt L108
addi r0, NULL, 0
rjmp L109
L108:
addi r0, NULL, 1
L109:
cmpi r0, 0
breq L107
load[2] r2, BP, 2
load[2] r3, BP, -2
addi r4, NULL, 1
mul r3, r3, r4
add r2, r2, r3
load[1] r4, BP, 7
store[1] r2, r4, 0
addi r3, r3, 1
store[2] BP, r3, -2
rjmp L106
L107:
addi SP, SP, 2
move RR, NULL
ret
add_changed:
move BP, SP
load[2] r0, BP, 2
addi r1, NULL, changed
load[2] r2, NULL, changed_index
addi r3, NULL, 2
mul r2, r2, r3
add r1, r1, r2
store[2] r1, r0, 0
addi r2, r2, 1
store[2] NULL, r2, changed_index
move RR, NULL
ret
calc_next_gen:
move BP, SP
subi SP, SP, 2
addi r0, NULL, 0
subi SP, SP, 2
addi r1, NULL, 0
subi SP, SP, 2
addi r2, NULL, 0
store[2] BP, r0, -2
store[2] BP, r1, -4
store[2] BP, r2, -6
L110:
load[2] r0, BP, -2
load[2] r1, NULL, VIDEO_TILES
cmp r0, r1
brlt L112
addi r0, NULL, 0
rjmp L113
L112:
addi r0, NULL, 1
L113:
cmpi r0, 0
breq L111
subi SP, SP, 2
addi r2, NULL, 0
subi SP, SP, 2
addi r3, NULL, -1
subi SP, SP, 2
addi r4, NULL, -1
store[2] BP, r2, -8
store[2] BP, r3, -10
store[2] BP, r4, -12
L114:
load[2] r0, BP, -12
cmpi r0, 2
brlt L116
addi r0, NULL, 0
rjmp L117
L116:
addi r0, NULL, 1
L117:
cmpi r0, 0
breq L115
L118:
load[2] r0, BP, -10
cmpi r0, 2
brlt L120
addi r0, NULL, 0
rjmp L121
L120:
addi r0, NULL, 1
L121:
cmpi r0, 0
breq L119
subi SP, SP, 2
load[2] r1, BP, -4
load[2] r2, BP, -10
add r1, r1, r2
subi SP, SP, 2
load[2] r3, BP, -6
load[2] r4, BP, -12
add r3, r3, r4
store[2] BP, r1, -14
load[2] r5, NULL, VIDEO_TILE_WIDTH
cmp r1, r5
brge L122
addi r1, NULL, 0
rjmp L123
L122:
addi r1, NULL, 1
L123:
store[2] BP, r3, -16
cmpi r1, 0
breq L124
addi r0, NULL, 0
store[2] BP, r0, -14
rjmp L125
L124:
load[2] r0, BP, -14
load[2] r1, NULL, VIDEO_TILE_WIDTH
cmp r0, r1
brle L126
addi r0, NULL, 0
rjmp L127
L126:
addi r0, NULL, 1
L127:
cmpi r0, 0
breq L128
load[2] r0, NULL, VIDEO_TILE_WIDTH
subi r0, r0, 1
store[2] BP, r0, -14
rjmp L129
L128:
L129:
L125:
load[2] r0, BP, -16
load[2] r1, NULL, VIDEO_TILE_HEIGHT
cmp r0, r1
brge L130
addi r0, NULL, 0
rjmp L131
L130:
addi r0, NULL, 1
L131:
cmpi r0, 0
breq L132
addi r0, NULL, 0
store[2] BP, r0, -16
rjmp L133
L132:
load[2] r0, BP, -14
load[2] r1, NULL, VIDEO_TILE_WIDTH
cmp r0, r1
brle L134
addi r0, NULL, 0
rjmp L135
L134:
addi r0, NULL, 1
L135:
cmpi r0, 0
breq L136
load[2] r0, NULL, VIDEO_TILE_HEIGHT
subi r0, r0, 1
store[2] BP, r0, -16
rjmp L137
L136:
L137:
L133:
subi SP, SP, 2
load[2] r0, BP, -14
load[2] r1, NULL, VIDEO_TILE_WIDTH
load[2] r2, BP, -16
mul r1, r1, r2
add r0, r0, r1
load[2] r3, BP, -8
addi r4, NULL, buffer
store[2] BP, r0, -18
add r0, r4, r0
load[1] r0, r0, 0
add r3, r3, r0
load[2] r5, BP, -10
addi r5, r5, 1
addi SP, SP, 6
store[2] BP, r3, -8
store[2] BP, r5, -10
rjmp L118
L119:
load[2] r0, BP, -12
addi r0, r0, 1
store[2] BP, r0, -12
rjmp L114
L115:
addi r0, NULL, buffer
load[2] r1, BP, -2
add r1, r0, r1
load[1] r1, r1, 0
cmpi r1, 1
breq L138
addi r1, NULL, 0
rjmp L139
L138:
addi r1, NULL, 1
L139:
cmpi r1, 0
breq L140
load[2] r0, BP, -8
cmpi r0, 2
brlt L142
addi r0, NULL, 0
rjmp L143
L142:
addi r0, NULL, 1
L143:
load[2] r1, BP, -8
cmpi r1, 3
brgt L144
addi r1, NULL, 0
rjmp L145
L144:
addi r1, NULL, 1
L145:
or r0, r0, r1
cmpi r0, 0
breq L146
push[2] BP
subi SP, SP, 2
load[2] r0, BP, -2
push[2] r0
call add_changed
addi SP, SP, 4
pop[2] BP
rjmp L147
L146:
L147:
rjmp L141
L140:
load[2] r0, BP, -8
cmpi r0, 3
breq L148
addi r0, NULL, 0
rjmp L149
L148:
addi r0, NULL, 1
L149:
cmpi r0, 0
breq L150
push[2] BP
subi SP, SP, 2
load[2] r0, BP, -2
push[2] r0
call add_changed
addi SP, SP, 4
pop[2] BP
rjmp L151
L150:
L151:
L141:
load[2] r0, BP, -4
addi r0, r0, 1
load[2] r1, BP, -2
addi r1, r1, 1
store[2] BP, r0, -4
load[2] r2, NULL, VIDEO_TILE_WIDTH
cmp r0, r2
brge L152
addi r0, NULL, 0
rjmp L153
L152:
addi r0, NULL, 1
L153:
store[2] BP, r1, -2
cmpi r0, 0
breq L154
addi r0, NULL, 0
store[2] BP, r0, -4
rjmp L155
L154:
L155:
addi SP, SP, 6
rjmp L110
L111:
addi SP, SP, 6
move RR, NULL
ret
print_board:
move BP, SP
subi SP, SP, 2
addi r0, NULL, 0
store[2] BP, r0, -2
L156:
load[2] r0, BP, -2
load[2] r1, NULL, VIDEO_TILES
cmp r0, r1
brlt L158
addi r0, NULL, 0
rjmp L159
L158:
addi r0, NULL, 1
L159:
cmpi r0, 0
breq L157
addi r2, NULL, buffer
load[2] r3, BP, -2
add r3, r2, r3
load[1] r3, r3, 0
cmpi r3, 0
breq L160
push[2] BP
load[2] r0, BP, -2
push[2] r0
addi r1, NULL, 43
push[2] r1
subi SP, SP, 2
call vga_write
addi SP, SP, 6
pop[2] BP
rjmp L161
L160:
push[2] BP
load[2] r0, BP, -2
push[2] r0
addi r1, NULL, 32
push[2] r1
subi SP, SP, 2
call vga_write
addi SP, SP, 6
pop[2] BP
L161:
rjmp L156
L157:
addi SP, SP, 2
move RR, NULL
ret
update_changed:
move BP, SP
subi SP, SP, 2
addi r0, NULL, 0
store[2] BP, r0, -2
L162:
load[2] r0, BP, -2
load[2] r1, NULL, changed_index
cmp r0, r1
brlt L164
addi r0, NULL, 0
rjmp L165
L164:
addi r0, NULL, 1
L165:
cmpi r0, 0
breq L163
subi SP, SP, 2
addi r2, NULL, changed
load[2] r3, BP, -2
addi r4, NULL, 2
mul r3, r3, r4
add r3, r2, r3
load[2] r3, r3, 0
addi r4, NULL, buffer
store[2] BP, r3, -4
add r3, r4, r3
load[1] r3, r3, 0
cmpi r3, 0
breq L166
addi r0, NULL, buffer
load[2] r1, BP, -4
addi r2, NULL, 1
mul r1, r1, r2
add r0, r0, r1
addi r2, NULL, 0
store[1] r0, r2, 0
rjmp L167
L166:
addi r0, NULL, buffer
load[2] r1, BP, -4
addi r2, NULL, 1
mul r1, r1, r2
add r0, r0, r1
addi r2, NULL, 1
store[1] r0, r2, 0
L167:
addi SP, SP, 2
rjmp L162
L163:
addi r0, NULL, 0
addi SP, SP, 2
store[2] NULL, r0, changed_index
move RR, NULL
ret
sleep_ms:
move BP, SP
load[4] r0, BP, 4
subi SP, SP, 4
load[4] r1, NULL, SLEEP_MS_MULT
mul r0, r0, r1
subi SP, SP, 4
addi r2, NULL, 0
store[4] BP, r0, -4
store[4] BP, r2, -8
L168:
load[4] r0, BP, -8
load[4] r1, BP, -4
cmp r0, r1
brlt L170
addi r0, NULL, 0
rjmp L171
L170:
addi r0, NULL, 1
L171:
cmpi r0, 0
breq L169
load[4] r2, BP, -8
addi r2, r2, 1
store[4] BP, r2, -8
rjmp L168
L169:
addi SP, SP, 8
move RR, NULL
ret
next_gen:
move BP, SP
push[2] BP
call calc_next_gen
pop[2] BP
push[2] BP
call update_changed
pop[2] BP
move RR, NULL
ret
main:
move BP, SP
push[2] BP
subi SP, SP, 2
addi r0, NULL, 0
push[1] r0
load[2] r0, NULL, VIDEO_TILES
subi SP, SP, 1
push[2] r0
addi r1, NULL, buffer
push[2] r1
call memset
addi SP, SP, 8
pop[2] BP
addi r0, NULL, buffer
addi r0, r0, 41
addi r1, NULL, 1
store[1] r0, r1, 0
addi r0, NULL, buffer
addi r0, r0, 82
addi r1, NULL, 1
store[1] r0, r1, 0
addi r0, NULL, buffer
addi r0, r0, 121
addi r1, NULL, 1
store[1] r0, r1, 0
addi r0, NULL, buffer
addi r0, r0, 122
addi r1, NULL, 1
store[1] r0, r1, 0
addi r0, NULL, buffer
addi r0, r0, 123
addi r1, NULL, 1
store[1] r0, r1, 0
push[2] BP
call print_board
pop[2] BP
L172:
push[2] BP
subi SP, SP, 2
addi r0, NULL, 500
push[4] r0
subi SP, SP, 2
call sleep_ms
addi SP, SP, 8
pop[2] BP
push[2] BP
call next_gen
pop[2] BP
rjmp L172
L173:
move RR, NULL
ret
(Pre handle_macros)
(Code after 'handle_macros')
 const SP r15
const NULL r14
const BP r13
const RR r12
.data MEMORY_SIZE
.dh 4096
.data VIDEO_TILE_WIDTH
.dh 40
.data VIDEO_TILE_HEIGHT
.dh 30
.data VIDEO_TILES
.dh 0
load[2] r0, NULL, VIDEO_TILE_WIDTH
load[2] r1, NULL, VIDEO_TILE_HEIGHT
mul r0, r0, r1
store[2] NULL, r0, VIDEO_TILES
.data PALETTE_START
.dh 0
load[2] r0, NULL, VIDEO_TILES
store[2] NULL, r0, PALETTE_START
.data PALETTE_SIZE
.dh 16
.data VIDEO_MEMORY_SIZE
.dh 0
load[2] r0, NULL, VIDEO_TILES
load[2] r2, NULL, PALETTE_SIZE
add r0, r0, r2
store[2] NULL, r0, VIDEO_MEMORY_SIZE
.data VIDEO_PIXEL_WIDTH
.dh 640
.data VIDEO_PIXEL_HEIGHT
.dh 480
.data FG_COLOR
.dh 0
.data BG_COLOR
.dh 0
.data CURSOR
.dh 0
.data CURSOR_X
.dh 0
.data CURSOR_Y
.dh 0
.data buffer
.db 0
.data changed_index
.dh 0
.data changed
.dh 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
.data SLEEP_MS_MULT
.dw 7692
subi SP, SP, 1
call main
subi SP, SP, 2
__halt:
rjmp __halt
in:
move BP, SP
load[2] r0, BP, 2
subi SP, SP, 4
load[4] r1, BP, -4
in r1, 0
move RR, r1
addi SP, SP, 4
ret
out:
move BP, SP
load[4] r0, BP, 4
load[2] r1, BP, 10
out 0, r0
store[4] BP, r0, 4
move RR, NULL
ret
vga_write:
move BP, SP
load[2] r0, BP, 4
load[2] r1, BP, 6
vgaw r1, r0, 0
store[2] BP, r1, 6
move RR, NULL
ret
outside_bound:
move BP, SP
load[2] r0, BP, 2
load[2] r1, BP, 4
load[2] r2, BP, 6
cmp r0, r2
brge L0
addi r0, NULL, 0
rjmp L1
L0:
addi r0, NULL, 1
L1:
load[2] r3, BP, 2
cmp r3, r1
brlt L2
addi r3, NULL, 0
rjmp L3
L2:
addi r3, NULL, 1
L3:
or r0, r0, r3
move RR, r0
ret
left_shift_l:
move BP, SP
load[4] r0, BP, 4
load[2] r1, BP, 10
L4:
load[2] r0, BP, 10
cmpi r0, 0
brgt L6
addi r0, NULL, 0
rjmp L7
L6:
addi r0, NULL, 1
L7:
cmpi r0, 0
breq L5
load[4] r1, BP, 4
lsl[4] r1, r1
load[2] r2, BP, 10
subi r2, r2, 1
store[4] BP, r1, 4
store[2] BP, r2, 10
rjmp L4
L5:
load[4] r0, BP, 4
move RR, r0
ret
right_shift_l:
move BP, SP
load[4] r0, BP, 4
load[2] r1, BP, 10
L8:
load[2] r0, BP, 10
cmpi r0, 0
brgt L10
addi r0, NULL, 0
rjmp L11
L10:
addi r0, NULL, 1
L11:
cmpi r0, 0
breq L9
load[4] r1, BP, 4
lsr[4] r1, r1
load[2] r2, BP, 10
subi r2, r2, 1
store[4] BP, r1, 4
store[2] BP, r2, 10
rjmp L8
L9:
load[4] r0, BP, 4
move RR, r0
ret
left_shift_i:
move BP, SP
load[2] r0, BP, 4
load[2] r1, BP, 6
L12:
load[2] r0, BP, 6
cmpi r0, 0
brgt L14
addi r0, NULL, 0
rjmp L15
L14:
addi r0, NULL, 1
L15:
cmpi r0, 0
breq L13
load[2] r1, BP, 4
lsl[2] r1, r1
load[2] r2, BP, 6
subi r2, r2, 1
store[2] BP, r1, 4
store[2] BP, r2, 6
rjmp L12
L13:
load[2] r0, BP, 4
move RR, r0
ret
right_shift_i:
move BP, SP
load[2] r0, BP, 4
load[2] r1, BP, 6
L16:
load[2] r0, BP, 6
cmpi r0, 0
brgt L18
addi r0, NULL, 0
rjmp L19
L18:
addi r0, NULL, 1
L19:
cmpi r0, 0
breq L17
load[2] r1, BP, 4
lsr[2] r1, r1
load[2] r2, BP, 6
subi r2, r2, 1
store[2] BP, r1, 4
store[2] BP, r2, 6
rjmp L16
L17:
load[2] r0, BP, 4
move RR, r0
ret
left_shift_c:
move BP, SP
load[1] r0, BP, 5
load[2] r1, BP, 6
L20:
load[2] r0, BP, 6
cmpi r0, 0
brgt L22
addi r0, NULL, 0
rjmp L23
L22:
addi r0, NULL, 1
L23:
cmpi r0, 0
breq L21
load[1] r1, BP, 5
lsl[1] r1, r1
load[2] r2, BP, 6
subi r2, r2, 1
store[1] BP, r1, 5
store[2] BP, r2, 6
rjmp L20
L21:
load[1] r0, BP, 5
move RR, r0
ret
right_shift_c:
move BP, SP
load[1] r0, BP, 5
load[2] r1, BP, 6
L24:
load[2] r0, BP, 6
cmpi r0, 0
brgt L26
addi r0, NULL, 0
rjmp L27
L26:
addi r0, NULL, 1
L27:
cmpi r0, 0
breq L25
load[1] r1, BP, 5
lsr[1] r1, r1
load[2] r2, BP, 6
subi r2, r2, 1
store[1] BP, r1, 5
store[2] BP, r2, 6
rjmp L24
L25:
load[1] r0, BP, 5
move RR, r0
ret
divide:
move BP, SP
load[2] r0, BP, 4
load[2] r1, BP, 6
subi SP, SP, 2
subi SP, SP, 2
addi r2, NULL, 0
store[2] BP, r0, -2
store[2] BP, r2, -4
L28:
load[2] r0, BP, -2
load[2] r1, BP, 6
cmp r0, r1
brgt L30
addi r0, NULL, 0
rjmp L31
L30:
addi r0, NULL, 1
L31:
cmpi r0, 0
breq L29
load[2] r2, BP, -2
sub r2, r2, r1
load[2] r3, BP, -4
addi r3, r3, 1
store[2] BP, r2, -2
store[2] BP, r3, -4
rjmp L28
L29:
subi SP, SP, 4
load[2] r0, BP, -4
push[2] BP
subi SP, SP, 2
addi r1, NULL, 16
push[2] r1
subi SP, SP, 2
push[4] r0
store[4] BP, r0, -8
subi SP, SP, 2
call left_shift_l
addi SP, SP, 12
pop[2] BP
move r0, RR
store[4] BP, r0, -8
load[2] r1, BP, -2
add r0, r0, r1
move RR, r0
addi SP, SP, 8
ret
tile_index_write:
move BP, SP
load[2] r0, BP, 4
load[2] r3, BP, 6
load[2] r4, NULL, VIDEO_TILES
cmp r3, r4
brge L32
addi r3, NULL, 0
rjmp L33
L32:
addi r3, NULL, 1
L33:
cmpi r3, 0
breq L34
addi RR, NULL, 0
ret
rjmp L35
L34:
L35:
push[2] BP
subi SP, SP, 2
load[2] r0, BP, 6
push[2] r0
load[2] r1, BP, 4
push[2] r1
subi SP, SP, 2
call vga_write
addi SP, SP, 8
pop[2] BP
addi RR, NULL, 1
ret
tile_coord_write:
move BP, SP
load[4] r0, BP, 4
load[2] r1, BP, 8
load[2] r2, BP, 10
load[2] r3, NULL, VIDEO_PIXEL_WIDTH
cmp r1, r3
brge L36
addi r1, NULL, 0
rjmp L37
L36:
addi r1, NULL, 1
L37:
load[2] r4, NULL, VIDEO_PIXEL_HEIGHT
cmp r2, r4
brge L38
addi r2, NULL, 0
rjmp L39
L38:
addi r2, NULL, 1
L39:
or r1, r1, r2
cmpi r1, 0
breq L40
addi RR, NULL, 0
ret
rjmp L41
L40:
L41:
subi SP, SP, 2
load[2] r0, BP, 8
load[2] r1, NULL, VIDEO_PIXEL_WIDTH
load[2] r2, BP, 10
mul r1, r1, r2
add r0, r0, r1
push[2] BP
push[2] r0
load[4] r3, BP, 4
push[2] r3
store[2] BP, r0, -2
subi SP, SP, 2
call vga_write
addi SP, SP, 6
pop[2] BP
addi RR, NULL, 1
addi SP, SP, 2
ret
palette_index_write:
move BP, SP
load[2] r0, BP, 2
load[2] r1, BP, 4
load[2] r2, BP, 6
load[2] r3, NULL, PALETTE_SIZE
cmp r0, r3
brge L42
addi r0, NULL, 0
rjmp L43
L42:
addi r0, NULL, 1
L43:
cmpi r0, 0
breq L44
addi RR, NULL, 0
ret
rjmp L45
L44:
L45:
subi SP, SP, 2
load[2] r0, NULL, PALETTE_START
load[2] r1, BP, 2
add r0, r0, r1
subi SP, SP, 2
load[2] r2, BP, 4
push[2] BP
subi SP, SP, 2
addi r3, NULL, 8
push[2] r3
load[2] r3, BP, 4
push[2] r3
store[2] BP, r0, -2
store[2] BP, r2, -4
subi SP, SP, 2
call left_shift_i
addi SP, SP, 8
pop[2] BP
move r0, RR
store[2] BP, r0, -4
load[2] r1, BP, 6
add r0, r0, r1
push[2] BP
subi SP, SP, 2
load[2] r2, BP, -2
push[2] r2
push[2] r0
store[2] BP, r0, -4
subi SP, SP, 2
call vga_write
addi SP, SP, 8
pop[2] BP
addi RR, NULL, 1
addi SP, SP, 4
ret
set_cursor:
move BP, SP
load[1] r0, BP, 2
load[1] r1, BP, 3
load[2] r2, NULL, VIDEO_TILE_WIDTH
cmp r0, r2
brge L46
addi r0, NULL, 0
rjmp L47
L46:
addi r0, NULL, 1
L47:
load[2] r3, NULL, VIDEO_TILE_HEIGHT
cmp r1, r3
brge L48
addi r1, NULL, 0
rjmp L49
L48:
addi r1, NULL, 1
L49:
or r0, r0, r1
cmpi r0, 0
breq L50
addi RR, NULL, 0
ret
rjmp L51
L50:
L51:
load[1] r0, BP, 2
move r1, r0
load[1] r2, BP, 3
move r3, r2
add r0, r0, r2
load[2] r4, NULL, VIDEO_TILE_WIDTH
mul r0, r0, r4
store[2] NULL, r0, CURSOR
store[2] NULL, r1, CURSOR_X
store[2] NULL, r3, CURSOR_Y
addi RR, NULL, 1
ret
advance_cursor:
move BP, SP
load[2] r0, NULL, CURSOR
addi r0, r0, 1
store[2] NULL, r0, CURSOR
load[2] r1, NULL, VIDEO_TILES
cmp r0, r1
brlt L52
addi r0, NULL, 0
rjmp L53
L52:
addi r0, NULL, 1
L53:
cmpi r0, 0
breq L54
load[2] r0, NULL, CURSOR_X
addi r0, r0, 1
store[2] NULL, r0, CURSOR_X
load[2] r1, NULL, VIDEO_TILE_WIDTH
cmp r0, r1
brge L56
addi r0, NULL, 0
rjmp L57
L56:
addi r0, NULL, 1
L57:
cmpi r0, 0
breq L58
addi r0, NULL, 0
load[2] r1, NULL, CURSOR_Y
addi r1, r1, 1
store[2] NULL, r0, CURSOR_X
store[2] NULL, r1, CURSOR_Y
rjmp L59
L58:
L59:
rjmp L55
L54:
addi r0, NULL, 0
addi r1, NULL, 0
addi r2, NULL, 0
store[2] NULL, r0, CURSOR
store[2] NULL, r1, CURSOR_X
store[2] NULL, r2, CURSOR_Y
L55:
move RR, NULL
ret
back_cursor:
move BP, SP
load[2] r0, NULL, CURSOR
cmpi r0, 0
breq L60
addi r0, NULL, 0
rjmp L61
L60:
addi r0, NULL, 1
L61:
cmpi r0, 0
breq L62
addi RR, NULL, 0
ret
rjmp L63
L62:
L63:
load[2] r0, NULL, CURSOR
subi r0, r0, 1
store[2] NULL, r0, CURSOR
load[2] r1, NULL, VIDEO_TILES
cmp r0, r1
brlt L64
addi r0, NULL, 0
rjmp L65
L64:
addi r0, NULL, 1
L65:
cmpi r0, 0
breq L66
load[2] r0, NULL, CURSOR_X
subi r0, r0, 1
store[2] NULL, r0, CURSOR_X
cmpi r0, 0
brlt L68
addi r0, NULL, 0
rjmp L69
L68:
addi r0, NULL, 1
L69:
cmpi r0, 0
breq L70
addi r0, NULL, 0
load[2] r1, NULL, CURSOR_Y
subi r1, r1, 1
store[2] NULL, r0, CURSOR_X
store[2] NULL, r1, CURSOR_Y
rjmp L71
L70:
L71:
rjmp L67
L66:
load[2] r0, NULL, VIDEO_TILES
subi r0, r0, 1
load[2] r1, NULL, VIDEO_TILE_WIDTH
move r2, r1
load[2] r3, NULL, VIDEO_TILE_HEIGHT
move r4, r3
store[2] NULL, r0, CURSOR
store[2] NULL, r2, CURSOR_X
store[2] NULL, r4, CURSOR_Y
L67:
move RR, NULL
ret
advance_steps:
move BP, SP
load[2] r0, BP, 2
load[2] r1, NULL, VIDEO_TILES
cmp r0, r1
brge L72
addi r0, NULL, 0
rjmp L73
L72:
addi r0, NULL, 1
L73:
cmpi r0, 0
breq L74
addi RR, NULL, 0
ret
rjmp L75
L74:
L75:
load[2] r0, NULL, CURSOR
load[2] r1, BP, 2
add r0, r0, r1
store[2] NULL, r0, CURSOR
load[2] r2, NULL, VIDEO_TILES
cmp r0, r2
brge L76
addi r0, NULL, 0
rjmp L77
L76:
addi r0, NULL, 1
L77:
cmpi r0, 0
breq L78
load[2] r0, NULL, CURSOR
load[2] r1, NULL, VIDEO_TILES
sub r0, r0, r1
store[2] NULL, r0, CURSOR
rjmp L79
L78:
L79:
subi SP, SP, 4
push[2] BP
subi SP, SP, 2
load[2] r0, NULL, VIDEO_TILE_WIDTH
push[2] r0
load[2] r1, NULL, CURSOR
push[2] r1
subi SP, SP, 2
call divide
addi SP, SP, 8
pop[2] BP
move r0, RR
subi SP, SP, 4
push[2] BP
subi SP, SP, 2
load[2] r1, NULL, VIDEO_TILE_HEIGHT
push[2] r1
load[2] r2, NULL, CURSOR
push[2] r2
store[4] BP, r0, -4
subi SP, SP, 2
call divide
addi SP, SP, 8
pop[2] BP
move r0, RR
push[2] BP
subi SP, SP, 2
addi r1, NULL, 16
push[2] r1
load[4] r1, BP, -4
subi SP, SP, 2
push[4] r1
store[4] BP, r0, -8
subi SP, SP, 2
call right_shift_l
addi SP, SP, 12
pop[2] BP
move r0, RR
push[2] BP
subi SP, SP, 2
addi r1, NULL, 16
push[2] r1
load[4] r1, BP, -8
subi SP, SP, 2
push[4] r1
store[2] NULL, r0, CURSOR_X
subi SP, SP, 2
call right_shift_l
addi SP, SP, 12
pop[2] BP
move r0, RR
store[2] NULL, r0, CURSOR_Y
addi RR, NULL, 1
addi SP, SP, 8
ret
advance_line:
move BP, SP
load[2] r0, NULL, CURSOR_Y
addi r0, r0, 1
store[2] NULL, r0, CURSOR_Y
load[2] r1, NULL, VIDEO_TILE_HEIGHT
cmp r0, r1
brlt L80
addi r0, NULL, 0
rjmp L81
L80:
addi r0, NULL, 1
L81:
cmpi r0, 0
breq L82
load[2] r0, NULL, VIDEO_TILE_WIDTH
load[2] r1, NULL, CURSOR_Y
mul r0, r0, r1
load[2] r2, NULL, CURSOR_X
add r0, r0, r2
store[2] NULL, r0, CURSOR
rjmp L83
L82:
load[2] r0, NULL, CURSOR_X
move r1, r0
addi r2, NULL, 0
store[2] NULL, r1, CURSOR
store[2] NULL, r2, CURSOR_Y
L83:
move RR, NULL
ret
back_line:
move BP, SP
load[2] r0, NULL, CURSOR_Y
subi r0, r0, 1
store[2] NULL, r0, CURSOR_Y
cmpi r0, 0
brge L84
addi r0, NULL, 0
rjmp L85
L84:
addi r0, NULL, 1
L85:
cmpi r0, 0
breq L86
load[2] r0, NULL, VIDEO_TILE_WIDTH
load[2] r1, NULL, CURSOR_Y
mul r0, r0, r1
load[2] r2, NULL, CURSOR_X
add r0, r0, r2
store[2] NULL, r0, CURSOR
rjmp L87
L86:
load[2] r0, NULL, CURSOR_X
move r1, r0
load[2] r2, NULL, VIDEO_TILE_HEIGHT
subi r2, r2, 1
store[2] NULL, r1, CURSOR
store[2] NULL, r2, CURSOR_Y
L87:
move RR, NULL
ret
new_line:
move BP, SP
load[2] r0, NULL, CURSOR_Y
addi r0, r0, 1
store[2] NULL, r0, CURSOR_Y
load[2] r1, NULL, VIDEO_TILE_HEIGHT
cmp r0, r1
brlt L88
addi r0, NULL, 0
rjmp L89
L88:
addi r0, NULL, 1
L89:
cmpi r0, 0
breq L90
load[2] r0, NULL, VIDEO_TILE_WIDTH
load[2] r1, NULL, CURSOR_Y
mul r0, r0, r1
store[2] NULL, r0, CURSOR
rjmp L91
L90:
addi r0, NULL, 0
addi r1, NULL, 0
store[2] NULL, r0, CURSOR
store[2] NULL, r1, CURSOR_Y
L91:
addi r0, NULL, 0
store[2] NULL, r0, CURSOR_X
move RR, NULL
ret
print_c_at:
move BP, SP
load[1] r0, BP, 5
load[2] r1, BP, 6
load[2] r2, NULL, FG_COLOR
load[2] r3, NULL, PALETTE_SIZE
cmp r2, r3
brge L92
addi r2, NULL, 0
rjmp L93
L92:
addi r2, NULL, 1
L93:
load[2] r4, NULL, BG_COLOR
cmp r4, r3
brge L94
addi r4, NULL, 0
rjmp L95
L94:
addi r4, NULL, 1
L95:
or r2, r2, r4
cmpi r2, 0
breq L96
addi RR, NULL, 0
ret
rjmp L97
L96:
L97:
subi SP, SP, 2
load[2] r0, NULL, FG_COLOR
push[2] BP
addi r1, NULL, 4
push[2] r1
push[2] r0
store[2] BP, r0, -2
subi SP, SP, 2
call left_shift_i
addi SP, SP, 6
pop[2] BP
move r0, RR
store[2] BP, r0, -2
load[2] r1, NULL, BG_COLOR
add r0, r0, r1
push[2] BP
addi r2, NULL, 8
push[2] r2
push[2] r0
store[2] BP, r0, -2
subi SP, SP, 2
call left_shift_i
addi SP, SP, 6
pop[2] BP
move r0, RR
subi SP, SP, 2
load[1] r1, BP, 5
store[2] BP, r1, -4
add r1, r1, r0
push[2] BP
subi SP, SP, 2
load[2] r2, BP, 6
push[2] r2
push[2] r1
store[2] BP, r0, -2
store[2] BP, r1, -4
subi SP, SP, 2
call tile_index_write
addi SP, SP, 8
pop[2] BP
addi SP, SP, 4
ret
print_c_at_pos:
move BP, SP
load[1] r0, BP, 3
load[2] r1, BP, 4
load[2] r2, BP, 6
push[2] BP
subi SP, SP, 2
load[2] r3, NULL, VIDEO_TILE_WIDTH
mul r3, r3, r2
add r1, r1, r3
push[2] r1
push[1] r0
subi SP, SP, 3
call print_c_at
addi SP, SP, 8
pop[2] BP
ret
print_c:
move BP, SP
load[1] r0, BP, 3
push[2] BP
subi SP, SP, 2
load[2] r1, NULL, CURSOR
push[2] r1
push[1] r0
subi SP, SP, 3
call print_c_at
addi SP, SP, 8
pop[2] BP
cmpi RR, 0
breq L98
push[2] BP
call advance_cursor
pop[2] BP
addi RR, NULL, 1
ret
rjmp L99
L98:
L99:
addi RR, NULL, 0
ret
print:
move BP, SP
load[2] r0, BP, 2
L100:
load[2] r0, BP, 2
load[1] r0, r0, 0
cmpi r0, 0
breq L101
push[2] BP
subi SP, SP, 2
load[2] r1, BP, 2
load[1] r1, r1, 0
push[1] r1
subi SP, SP, 1
call print_c
addi SP, SP, 4
pop[2] BP
load[2] r0, BP, 2
addi r0, r0, 1
store[2] BP, r0, 2
rjmp L100
L101:
move RR, NULL
ret
clear:
move BP, SP
subi SP, SP, 2
addi r0, NULL, 0
store[2] BP, r0, -2
L102:
load[2] r0, BP, -2
load[2] r1, NULL, VIDEO_TILES
cmp r0, r1
brlt L104
addi r0, NULL, 0
rjmp L105
L104:
addi r0, NULL, 1
L105:
cmpi r0, 0
breq L103
push[2] BP
load[2] r2, BP, -2
push[2] r2
addi r3, NULL, 0
push[2] r3
subi SP, SP, 2
call tile_index_write
addi SP, SP, 6
pop[2] BP
rjmp L102
L103:
addi r0, NULL, 0
addi r1, NULL, 0
addi r2, NULL, 0
addi SP, SP, 2
store[2] NULL, r0, CURSOR
store[2] NULL, r1, CURSOR_X
store[2] NULL, r2, CURSOR_Y
move RR, NULL
ret
memset:
move BP, SP
load[2] r0, BP, 2
load[2] r1, BP, 4
load[1] r2, BP, 7
subi SP, SP, 2
addi r3, NULL, 0
store[2] BP, r3, -2
L106:
load[2] r0, BP, -2
load[2] r1, BP, 4
cmp r0, r1
brlt L108
addi r0, NULL, 0
rjmp L109
L108:
addi r0, NULL, 1
L109:
cmpi r0, 0
breq L107
load[2] r2, BP, 2
load[2] r3, BP, -2
addi r4, NULL, 1
mul r3, r3, r4
add r2, r2, r3
load[1] r4, BP, 7
store[1] r2, r4, 0
addi r3, r3, 1
store[2] BP, r3, -2
rjmp L106
L107:
addi SP, SP, 2
move RR, NULL
ret
add_changed:
move BP, SP
load[2] r0, BP, 2
addi r1, NULL, changed
load[2] r2, NULL, changed_index
addi r3, NULL, 2
mul r2, r2, r3
add r1, r1, r2
store[2] r1, r0, 0
addi r2, r2, 1
store[2] NULL, r2, changed_index
move RR, NULL
ret
calc_next_gen:
move BP, SP
subi SP, SP, 2
addi r0, NULL, 0
subi SP, SP, 2
addi r1, NULL, 0
subi SP, SP, 2
addi r2, NULL, 0
store[2] BP, r0, -2
store[2] BP, r1, -4
store[2] BP, r2, -6
L110:
load[2] r0, BP, -2
load[2] r1, NULL, VIDEO_TILES
cmp r0, r1
brlt L112
addi r0, NULL, 0
rjmp L113
L112:
addi r0, NULL, 1
L113:
cmpi r0, 0
breq L111
subi SP, SP, 2
addi r2, NULL, 0
subi SP, SP, 2
addi r3, NULL, -1
subi SP, SP, 2
addi r4, NULL, -1
store[2] BP, r2, -8
store[2] BP, r3, -10
store[2] BP, r4, -12
L114:
load[2] r0, BP, -12
cmpi r0, 2
brlt L116
addi r0, NULL, 0
rjmp L117
L116:
addi r0, NULL, 1
L117:
cmpi r0, 0
breq L115
L118:
load[2] r0, BP, -10
cmpi r0, 2
brlt L120
addi r0, NULL, 0
rjmp L121
L120:
addi r0, NULL, 1
L121:
cmpi r0, 0
breq L119
subi SP, SP, 2
load[2] r1, BP, -4
load[2] r2, BP, -10
add r1, r1, r2
subi SP, SP, 2
load[2] r3, BP, -6
load[2] r4, BP, -12
add r3, r3, r4
store[2] BP, r1, -14
load[2] r5, NULL, VIDEO_TILE_WIDTH
cmp r1, r5
brge L122
addi r1, NULL, 0
rjmp L123
L122:
addi r1, NULL, 1
L123:
store[2] BP, r3, -16
cmpi r1, 0
breq L124
addi r0, NULL, 0
store[2] BP, r0, -14
rjmp L125
L124:
load[2] r0, BP, -14
load[2] r1, NULL, VIDEO_TILE_WIDTH
cmp r0, r1
brle L126
addi r0, NULL, 0
rjmp L127
L126:
addi r0, NULL, 1
L127:
cmpi r0, 0
breq L128
load[2] r0, NULL, VIDEO_TILE_WIDTH
subi r0, r0, 1
store[2] BP, r0, -14
rjmp L129
L128:
L129:
L125:
load[2] r0, BP, -16
load[2] r1, NULL, VIDEO_TILE_HEIGHT
cmp r0, r1
brge L130
addi r0, NULL, 0
rjmp L131
L130:
addi r0, NULL, 1
L131:
cmpi r0, 0
breq L132
addi r0, NULL, 0
store[2] BP, r0, -16
rjmp L133
L132:
load[2] r0, BP, -14
load[2] r1, NULL, VIDEO_TILE_WIDTH
cmp r0, r1
brle L134
addi r0, NULL, 0
rjmp L135
L134:
addi r0, NULL, 1
L135:
cmpi r0, 0
breq L136
load[2] r0, NULL, VIDEO_TILE_HEIGHT
subi r0, r0, 1
store[2] BP, r0, -16
rjmp L137
L136:
L137:
L133:
subi SP, SP, 2
load[2] r0, BP, -14
load[2] r1, NULL, VIDEO_TILE_WIDTH
load[2] r2, BP, -16
mul r1, r1, r2
add r0, r0, r1
load[2] r3, BP, -8
addi r4, NULL, buffer
store[2] BP, r0, -18
add r0, r4, r0
load[1] r0, r0, 0
add r3, r3, r0
load[2] r5, BP, -10
addi r5, r5, 1
addi SP, SP, 6
store[2] BP, r3, -8
store[2] BP, r5, -10
rjmp L118
L119:
load[2] r0, BP, -12
addi r0, r0, 1
store[2] BP, r0, -12
rjmp L114
L115:
addi r0, NULL, buffer
load[2] r1, BP, -2
add r1, r0, r1
load[1] r1, r1, 0
cmpi r1, 1
breq L138
addi r1, NULL, 0
rjmp L139
L138:
addi r1, NULL, 1
L139:
cmpi r1, 0
breq L140
load[2] r0, BP, -8
cmpi r0, 2
brlt L142
addi r0, NULL, 0
rjmp L143
L142:
addi r0, NULL, 1
L143:
load[2] r1, BP, -8
cmpi r1, 3
brgt L144
addi r1, NULL, 0
rjmp L145
L144:
addi r1, NULL, 1
L145:
or r0, r0, r1
cmpi r0, 0
breq L146
push[2] BP
subi SP, SP, 2
load[2] r0, BP, -2
push[2] r0
call add_changed
addi SP, SP, 4
pop[2] BP
rjmp L147
L146:
L147:
rjmp L141
L140:
load[2] r0, BP, -8
cmpi r0, 3
breq L148
addi r0, NULL, 0
rjmp L149
L148:
addi r0, NULL, 1
L149:
cmpi r0, 0
breq L150
push[2] BP
subi SP, SP, 2
load[2] r0, BP, -2
push[2] r0
call add_changed
addi SP, SP, 4
pop[2] BP
rjmp L151
L150:
L151:
L141:
load[2] r0, BP, -4
addi r0, r0, 1
load[2] r1, BP, -2
addi r1, r1, 1
store[2] BP, r0, -4
load[2] r2, NULL, VIDEO_TILE_WIDTH
cmp r0, r2
brge L152
addi r0, NULL, 0
rjmp L153
L152:
addi r0, NULL, 1
L153:
store[2] BP, r1, -2
cmpi r0, 0
breq L154
addi r0, NULL, 0
store[2] BP, r0, -4
rjmp L155
L154:
L155:
addi SP, SP, 6
rjmp L110
L111:
addi SP, SP, 6
move RR, NULL
ret
print_board:
move BP, SP
subi SP, SP, 2
addi r0, NULL, 0
store[2] BP, r0, -2
L156:
load[2] r0, BP, -2
load[2] r1, NULL, VIDEO_TILES
cmp r0, r1
brlt L158
addi r0, NULL, 0
rjmp L159
L158:
addi r0, NULL, 1
L159:
cmpi r0, 0
breq L157
addi r2, NULL, buffer
load[2] r3, BP, -2
add r3, r2, r3
load[1] r3, r3, 0
cmpi r3, 0
breq L160
push[2] BP
load[2] r0, BP, -2
push[2] r0
addi r1, NULL, 43
push[2] r1
subi SP, SP, 2
call vga_write
addi SP, SP, 6
pop[2] BP
rjmp L161
L160:
push[2] BP
load[2] r0, BP, -2
push[2] r0
addi r1, NULL, 32
push[2] r1
subi SP, SP, 2
call vga_write
addi SP, SP, 6
pop[2] BP
L161:
rjmp L156
L157:
addi SP, SP, 2
move RR, NULL
ret
update_changed:
move BP, SP
subi SP, SP, 2
addi r0, NULL, 0
store[2] BP, r0, -2
L162:
load[2] r0, BP, -2
load[2] r1, NULL, changed_index
cmp r0, r1
brlt L164
addi r0, NULL, 0
rjmp L165
L164:
addi r0, NULL, 1
L165:
cmpi r0, 0
breq L163
subi SP, SP, 2
addi r2, NULL, changed
load[2] r3, BP, -2
addi r4, NULL, 2
mul r3, r3, r4
add r3, r2, r3
load[2] r3, r3, 0
addi r4, NULL, buffer
store[2] BP, r3, -4
add r3, r4, r3
load[1] r3, r3, 0
cmpi r3, 0
breq L166
addi r0, NULL, buffer
load[2] r1, BP, -4
addi r2, NULL, 1
mul r1, r1, r2
add r0, r0, r1
addi r2, NULL, 0
store[1] r0, r2, 0
rjmp L167
L166:
addi r0, NULL, buffer
load[2] r1, BP, -4
addi r2, NULL, 1
mul r1, r1, r2
add r0, r0, r1
addi r2, NULL, 1
store[1] r0, r2, 0
L167:
addi SP, SP, 2
rjmp L162
L163:
addi r0, NULL, 0
addi SP, SP, 2
store[2] NULL, r0, changed_index
move RR, NULL
ret
sleep_ms:
move BP, SP
load[4] r0, BP, 4
subi SP, SP, 4
load[4] r1, NULL, SLEEP_MS_MULT
mul r0, r0, r1
subi SP, SP, 4
addi r2, NULL, 0
store[4] BP, r0, -4
store[4] BP, r2, -8
L168:
load[4] r0, BP, -8
load[4] r1, BP, -4
cmp r0, r1
brlt L170
addi r0, NULL, 0
rjmp L171
L170:
addi r0, NULL, 1
L171:
cmpi r0, 0
breq L169
load[4] r2, BP, -8
addi r2, r2, 1
store[4] BP, r2, -8
rjmp L168
L169:
addi SP, SP, 8
move RR, NULL
ret
next_gen:
move BP, SP
push[2] BP
call calc_next_gen
pop[2] BP
push[2] BP
call update_changed
pop[2] BP
move RR, NULL
ret
main:
move BP, SP
push[2] BP
subi SP, SP, 2
addi r0, NULL, 0
push[1] r0
load[2] r0, NULL, VIDEO_TILES
subi SP, SP, 1
push[2] r0
addi r1, NULL, buffer
push[2] r1
call memset
addi SP, SP, 8
pop[2] BP
addi r0, NULL, buffer
addi r0, r0, 41
addi r1, NULL, 1
store[1] r0, r1, 0
addi r0, NULL, buffer
addi r0, r0, 82
addi r1, NULL, 1
store[1] r0, r1, 0
addi r0, NULL, buffer
addi r0, r0, 121
addi r1, NULL, 1
store[1] r0, r1, 0
addi r0, NULL, buffer
addi r0, r0, 122
addi r1, NULL, 1
store[1] r0, r1, 0
addi r0, NULL, buffer
addi r0, r0, 123
addi r1, NULL, 1
store[1] r0, r1, 0
push[2] BP
call print_board
pop[2] BP
L172:
push[2] BP
subi SP, SP, 2
addi r0, NULL, 500
push[4] r0
subi SP, SP, 2
call sleep_ms
addi SP, SP, 8
pop[2] BP
push[2] BP
call next_gen
pop[2] BP
rjmp L172
L173:
move RR, NULL
ret
(Pre handle_macros)
(Code after 'handle_macros')
 const SP r15
const NULL r14
const BP r13
const RR r12
.data MEMORY_SIZE
.dh 4096
.data VIDEO_TILE_WIDTH
.dh 40
.data VIDEO_TILE_HEIGHT
.dh 30
.data VIDEO_TILES
.dh 0
load[2] r0, NULL, VIDEO_TILE_WIDTH
load[2] r1, NULL, VIDEO_TILE_HEIGHT
mul r0, r0, r1
store[2] NULL, r0, VIDEO_TILES
.data PALETTE_START
.dh 0
load[2] r0, NULL, VIDEO_TILES
store[2] NULL, r0, PALETTE_START
.data PALETTE_SIZE
.dh 16
.data VIDEO_MEMORY_SIZE
.dh 0
load[2] r0, NULL, VIDEO_TILES
load[2] r2, NULL, PALETTE_SIZE
add r0, r0, r2
store[2] NULL, r0, VIDEO_MEMORY_SIZE
.data VIDEO_PIXEL_WIDTH
.dh 640
.data VIDEO_PIXEL_HEIGHT
.dh 480
.data FG_COLOR
.dh 0
.data BG_COLOR
.dh 0
.data CURSOR
.dh 0
.data CURSOR_X
.dh 0
.data CURSOR_Y
.dh 0
.data buffer
.db 0
.data changed_index
.dh 0
.data changed
.dh 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
.data SLEEP_MS_MULT
.dw 7692
subi SP, SP, 1
call main
subi SP, SP, 2
__halt:
rjmp __halt
in:
move BP, SP
load[2] r0, BP, 2
subi SP, SP, 4
load[4] r1, BP, -4
in r1, 0
move RR, r1
addi SP, SP, 4
ret
out:
move BP, SP
load[4] r0, BP, 4
load[2] r1, BP, 10
out 0, r0
store[4] BP, r0, 4
move RR, NULL
ret
vga_write:
move BP, SP
load[2] r0, BP, 4
load[2] r1, BP, 6
vgaw r1, r0, 0
store[2] BP, r1, 6
move RR, NULL
ret
outside_bound:
move BP, SP
load[2] r0, BP, 2
load[2] r1, BP, 4
load[2] r2, BP, 6
cmp r0, r2
brge L0
addi r0, NULL, 0
rjmp L1
L0:
addi r0, NULL, 1
L1:
load[2] r3, BP, 2
cmp r3, r1
brlt L2
addi r3, NULL, 0
rjmp L3
L2:
addi r3, NULL, 1
L3:
or r0, r0, r3
move RR, r0
ret
left_shift_l:
move BP, SP
load[4] r0, BP, 4
load[2] r1, BP, 10
L4:
load[2] r0, BP, 10
cmpi r0, 0
brgt L6
addi r0, NULL, 0
rjmp L7
L6:
addi r0, NULL, 1
L7:
cmpi r0, 0
breq L5
load[4] r1, BP, 4
lsl[4] r1, r1
load[2] r2, BP, 10
subi r2, r2, 1
store[4] BP, r1, 4
store[2] BP, r2, 10
rjmp L4
L5:
load[4] r0, BP, 4
move RR, r0
ret
right_shift_l:
move BP, SP
load[4] r0, BP, 4
load[2] r1, BP, 10
L8:
load[2] r0, BP, 10
cmpi r0, 0
brgt L10
addi r0, NULL, 0
rjmp L11
L10:
addi r0, NULL, 1
L11:
cmpi r0, 0
breq L9
load[4] r1, BP, 4
lsr[4] r1, r1
load[2] r2, BP, 10
subi r2, r2, 1
store[4] BP, r1, 4
store[2] BP, r2, 10
rjmp L8
L9:
load[4] r0, BP, 4
move RR, r0
ret
left_shift_i:
move BP, SP
load[2] r0, BP, 4
load[2] r1, BP, 6
L12:
load[2] r0, BP, 6
cmpi r0, 0
brgt L14
addi r0, NULL, 0
rjmp L15
L14:
addi r0, NULL, 1
L15:
cmpi r0, 0
breq L13
load[2] r1, BP, 4
lsl[2] r1, r1
load[2] r2, BP, 6
subi r2, r2, 1
store[2] BP, r1, 4
store[2] BP, r2, 6
rjmp L12
L13:
load[2] r0, BP, 4
move RR, r0
ret
right_shift_i:
move BP, SP
load[2] r0, BP, 4
load[2] r1, BP, 6
L16:
load[2] r0, BP, 6
cmpi r0, 0
brgt L18
addi r0, NULL, 0
rjmp L19
L18:
addi r0, NULL, 1
L19:
cmpi r0, 0
breq L17
load[2] r1, BP, 4
lsr[2] r1, r1
load[2] r2, BP, 6
subi r2, r2, 1
store[2] BP, r1, 4
store[2] BP, r2, 6
rjmp L16
L17:
load[2] r0, BP, 4
move RR, r0
ret
left_shift_c:
move BP, SP
load[1] r0, BP, 5
load[2] r1, BP, 6
L20:
load[2] r0, BP, 6
cmpi r0, 0
brgt L22
addi r0, NULL, 0
rjmp L23
L22:
addi r0, NULL, 1
L23:
cmpi r0, 0
breq L21
load[1] r1, BP, 5
lsl[1] r1, r1
load[2] r2, BP, 6
subi r2, r2, 1
store[1] BP, r1, 5
store[2] BP, r2, 6
rjmp L20
L21:
load[1] r0, BP, 5
move RR, r0
ret
right_shift_c:
move BP, SP
load[1] r0, BP, 5
load[2] r1, BP, 6
L24:
load[2] r0, BP, 6
cmpi r0, 0
brgt L26
addi r0, NULL, 0
rjmp L27
L26:
addi r0, NULL, 1
L27:
cmpi r0, 0
breq L25
load[1] r1, BP, 5
lsr[1] r1, r1
load[2] r2, BP, 6
subi r2, r2, 1
store[1] BP, r1, 5
store[2] BP, r2, 6
rjmp L24
L25:
load[1] r0, BP, 5
move RR, r0
ret
divide:
move BP, SP
load[2] r0, BP, 4
load[2] r1, BP, 6
subi SP, SP, 2
subi SP, SP, 2
addi r2, NULL, 0
store[2] BP, r0, -2
store[2] BP, r2, -4
L28:
load[2] r0, BP, -2
load[2] r1, BP, 6
cmp r0, r1
brgt L30
addi r0, NULL, 0
rjmp L31
L30:
addi r0, NULL, 1
L31:
cmpi r0, 0
breq L29
load[2] r2, BP, -2
sub r2, r2, r1
load[2] r3, BP, -4
addi r3, r3, 1
store[2] BP, r2, -2
store[2] BP, r3, -4
rjmp L28
L29:
subi SP, SP, 4
load[2] r0, BP, -4
push[2] BP
subi SP, SP, 2
addi r1, NULL, 16
push[2] r1
subi SP, SP, 2
push[4] r0
store[4] BP, r0, -8
subi SP, SP, 2
call left_shift_l
addi SP, SP, 12
pop[2] BP
move r0, RR
store[4] BP, r0, -8
load[2] r1, BP, -2
add r0, r0, r1
move RR, r0
addi SP, SP, 8
ret
tile_index_write:
move BP, SP
load[2] r0, BP, 4
load[2] r3, BP, 6
load[2] r4, NULL, VIDEO_TILES
cmp r3, r4
brge L32
addi r3, NULL, 0
rjmp L33
L32:
addi r3, NULL, 1
L33:
cmpi r3, 0
breq L34
addi RR, NULL, 0
ret
rjmp L35
L34:
L35:
push[2] BP
subi SP, SP, 2
load[2] r0, BP, 6
push[2] r0
load[2] r1, BP, 4
push[2] r1
subi SP, SP, 2
call vga_write
addi SP, SP, 8
pop[2] BP
addi RR, NULL, 1
ret
tile_coord_write:
move BP, SP
load[4] r0, BP, 4
load[2] r1, BP, 8
load[2] r2, BP, 10
load[2] r3, NULL, VIDEO_PIXEL_WIDTH
cmp r1, r3
brge L36
addi r1, NULL, 0
rjmp L37
L36:
addi r1, NULL, 1
L37:
load[2] r4, NULL, VIDEO_PIXEL_HEIGHT
cmp r2, r4
brge L38
addi r2, NULL, 0
rjmp L39
L38:
addi r2, NULL, 1
L39:
or r1, r1, r2
cmpi r1, 0
breq L40
addi RR, NULL, 0
ret
rjmp L41
L40:
L41:
subi SP, SP, 2
load[2] r0, BP, 8
load[2] r1, NULL, VIDEO_PIXEL_WIDTH
load[2] r2, BP, 10
mul r1, r1, r2
add r0, r0, r1
push[2] BP
push[2] r0
load[4] r3, BP, 4
push[2] r3
store[2] BP, r0, -2
subi SP, SP, 2
call vga_write
addi SP, SP, 6
pop[2] BP
addi RR, NULL, 1
addi SP, SP, 2
ret
palette_index_write:
move BP, SP
load[2] r0, BP, 2
load[2] r1, BP, 4
load[2] r2, BP, 6
load[2] r3, NULL, PALETTE_SIZE
cmp r0, r3
brge L42
addi r0, NULL, 0
rjmp L43
L42:
addi r0, NULL, 1
L43:
cmpi r0, 0
breq L44
addi RR, NULL, 0
ret
rjmp L45
L44:
L45:
subi SP, SP, 2
load[2] r0, NULL, PALETTE_START
load[2] r1, BP, 2
add r0, r0, r1
subi SP, SP, 2
load[2] r2, BP, 4
push[2] BP
subi SP, SP, 2
addi r3, NULL, 8
push[2] r3
load[2] r3, BP, 4
push[2] r3
store[2] BP, r0, -2
store[2] BP, r2, -4
subi SP, SP, 2
call left_shift_i
addi SP, SP, 8
pop[2] BP
move r0, RR
store[2] BP, r0, -4
load[2] r1, BP, 6
add r0, r0, r1
push[2] BP
subi SP, SP, 2
load[2] r2, BP, -2
push[2] r2
push[2] r0
store[2] BP, r0, -4
subi SP, SP, 2
call vga_write
addi SP, SP, 8
pop[2] BP
addi RR, NULL, 1
addi SP, SP, 4
ret
set_cursor:
move BP, SP
load[1] r0, BP, 2
load[1] r1, BP, 3
load[2] r2, NULL, VIDEO_TILE_WIDTH
cmp r0, r2
brge L46
addi r0, NULL, 0
rjmp L47
L46:
addi r0, NULL, 1
L47:
load[2] r3, NULL, VIDEO_TILE_HEIGHT
cmp r1, r3
brge L48
addi r1, NULL, 0
rjmp L49
L48:
addi r1, NULL, 1
L49:
or r0, r0, r1
cmpi r0, 0
breq L50
addi RR, NULL, 0
ret
rjmp L51
L50:
L51:
load[1] r0, BP, 2
move r1, r0
load[1] r2, BP, 3
move r3, r2
add r0, r0, r2
load[2] r4, NULL, VIDEO_TILE_WIDTH
mul r0, r0, r4
store[2] NULL, r0, CURSOR
store[2] NULL, r1, CURSOR_X
store[2] NULL, r3, CURSOR_Y
addi RR, NULL, 1
ret
advance_cursor:
move BP, SP
load[2] r0, NULL, CURSOR
addi r0, r0, 1
store[2] NULL, r0, CURSOR
load[2] r1, NULL, VIDEO_TILES
cmp r0, r1
brlt L52
addi r0, NULL, 0
rjmp L53
L52:
addi r0, NULL, 1
L53:
cmpi r0, 0
breq L54
load[2] r0, NULL, CURSOR_X
addi r0, r0, 1
store[2] NULL, r0, CURSOR_X
load[2] r1, NULL, VIDEO_TILE_WIDTH
cmp r0, r1
brge L56
addi r0, NULL, 0
rjmp L57
L56:
addi r0, NULL, 1
L57:
cmpi r0, 0
breq L58
addi r0, NULL, 0
load[2] r1, NULL, CURSOR_Y
addi r1, r1, 1
store[2] NULL, r0, CURSOR_X
store[2] NULL, r1, CURSOR_Y
rjmp L59
L58:
L59:
rjmp L55
L54:
addi r0, NULL, 0
addi r1, NULL, 0
addi r2, NULL, 0
store[2] NULL, r0, CURSOR
store[2] NULL, r1, CURSOR_X
store[2] NULL, r2, CURSOR_Y
L55:
move RR, NULL
ret
back_cursor:
move BP, SP
load[2] r0, NULL, CURSOR
cmpi r0, 0
breq L60
addi r0, NULL, 0
rjmp L61
L60:
addi r0, NULL, 1
L61:
cmpi r0, 0
breq L62
addi RR, NULL, 0
ret
rjmp L63
L62:
L63:
load[2] r0, NULL, CURSOR
subi r0, r0, 1
store[2] NULL, r0, CURSOR
load[2] r1, NULL, VIDEO_TILES
cmp r0, r1
brlt L64
addi r0, NULL, 0
rjmp L65
L64:
addi r0, NULL, 1
L65:
cmpi r0, 0
breq L66
load[2] r0, NULL, CURSOR_X
subi r0, r0, 1
store[2] NULL, r0, CURSOR_X
cmpi r0, 0
brlt L68
addi r0, NULL, 0
rjmp L69
L68:
addi r0, NULL, 1
L69:
cmpi r0, 0
breq L70
addi r0, NULL, 0
load[2] r1, NULL, CURSOR_Y
subi r1, r1, 1
store[2] NULL, r0, CURSOR_X
store[2] NULL, r1, CURSOR_Y
rjmp L71
L70:
L71:
rjmp L67
L66:
load[2] r0, NULL, VIDEO_TILES
subi r0, r0, 1
load[2] r1, NULL, VIDEO_TILE_WIDTH
move r2, r1
load[2] r3, NULL, VIDEO_TILE_HEIGHT
move r4, r3
store[2] NULL, r0, CURSOR
store[2] NULL, r2, CURSOR_X
store[2] NULL, r4, CURSOR_Y
L67:
move RR, NULL
ret
advance_steps:
move BP, SP
load[2] r0, BP, 2
load[2] r1, NULL, VIDEO_TILES
cmp r0, r1
brge L72
addi r0, NULL, 0
rjmp L73
L72:
addi r0, NULL, 1
L73:
cmpi r0, 0
breq L74
addi RR, NULL, 0
ret
rjmp L75
L74:
L75:
load[2] r0, NULL, CURSOR
load[2] r1, BP, 2
add r0, r0, r1
store[2] NULL, r0, CURSOR
load[2] r2, NULL, VIDEO_TILES
cmp r0, r2
brge L76
addi r0, NULL, 0
rjmp L77
L76:
addi r0, NULL, 1
L77:
cmpi r0, 0
breq L78
load[2] r0, NULL, CURSOR
load[2] r1, NULL, VIDEO_TILES
sub r0, r0, r1
store[2] NULL, r0, CURSOR
rjmp L79
L78:
L79:
subi SP, SP, 4
push[2] BP
subi SP, SP, 2
load[2] r0, NULL, VIDEO_TILE_WIDTH
push[2] r0
load[2] r1, NULL, CURSOR
push[2] r1
subi SP, SP, 2
call divide
addi SP, SP, 8
pop[2] BP
move r0, RR
subi SP, SP, 4
push[2] BP
subi SP, SP, 2
load[2] r1, NULL, VIDEO_TILE_HEIGHT
push[2] r1
load[2] r2, NULL, CURSOR
push[2] r2
store[4] BP, r0, -4
subi SP, SP, 2
call divide
addi SP, SP, 8
pop[2] BP
move r0, RR
push[2] BP
subi SP, SP, 2
addi r1, NULL, 16
push[2] r1
load[4] r1, BP, -4
subi SP, SP, 2
push[4] r1
store[4] BP, r0, -8
subi SP, SP, 2
call right_shift_l
addi SP, SP, 12
pop[2] BP
move r0, RR
push[2] BP
subi SP, SP, 2
addi r1, NULL, 16
push[2] r1
load[4] r1, BP, -8
subi SP, SP, 2
push[4] r1
store[2] NULL, r0, CURSOR_X
subi SP, SP, 2
call right_shift_l
addi SP, SP, 12
pop[2] BP
move r0, RR
store[2] NULL, r0, CURSOR_Y
addi RR, NULL, 1
addi SP, SP, 8
ret
advance_line:
move BP, SP
load[2] r0, NULL, CURSOR_Y
addi r0, r0, 1
store[2] NULL, r0, CURSOR_Y
load[2] r1, NULL, VIDEO_TILE_HEIGHT
cmp r0, r1
brlt L80
addi r0, NULL, 0
rjmp L81
L80:
addi r0, NULL, 1
L81:
cmpi r0, 0
breq L82
load[2] r0, NULL, VIDEO_TILE_WIDTH
load[2] r1, NULL, CURSOR_Y
mul r0, r0, r1
load[2] r2, NULL, CURSOR_X
add r0, r0, r2
store[2] NULL, r0, CURSOR
rjmp L83
L82:
load[2] r0, NULL, CURSOR_X
move r1, r0
addi r2, NULL, 0
store[2] NULL, r1, CURSOR
store[2] NULL, r2, CURSOR_Y
L83:
move RR, NULL
ret
back_line:
move BP, SP
load[2] r0, NULL, CURSOR_Y
subi r0, r0, 1
store[2] NULL, r0, CURSOR_Y
cmpi r0, 0
brge L84
addi r0, NULL, 0
rjmp L85
L84:
addi r0, NULL, 1
L85:
cmpi r0, 0
breq L86
load[2] r0, NULL, VIDEO_TILE_WIDTH
load[2] r1, NULL, CURSOR_Y
mul r0, r0, r1
load[2] r2, NULL, CURSOR_X
add r0, r0, r2
store[2] NULL, r0, CURSOR
rjmp L87
L86:
load[2] r0, NULL, CURSOR_X
move r1, r0
load[2] r2, NULL, VIDEO_TILE_HEIGHT
subi r2, r2, 1
store[2] NULL, r1, CURSOR
store[2] NULL, r2, CURSOR_Y
L87:
move RR, NULL
ret
new_line:
move BP, SP
load[2] r0, NULL, CURSOR_Y
addi r0, r0, 1
store[2] NULL, r0, CURSOR_Y
load[2] r1, NULL, VIDEO_TILE_HEIGHT
cmp r0, r1
brlt L88
addi r0, NULL, 0
rjmp L89
L88:
addi r0, NULL, 1
L89:
cmpi r0, 0
breq L90
load[2] r0, NULL, VIDEO_TILE_WIDTH
load[2] r1, NULL, CURSOR_Y
mul r0, r0, r1
store[2] NULL, r0, CURSOR
rjmp L91
L90:
addi r0, NULL, 0
addi r1, NULL, 0
store[2] NULL, r0, CURSOR
store[2] NULL, r1, CURSOR_Y
L91:
addi r0, NULL, 0
store[2] NULL, r0, CURSOR_X
move RR, NULL
ret
print_c_at:
move BP, SP
load[1] r0, BP, 5
load[2] r1, BP, 6
load[2] r2, NULL, FG_COLOR
load[2] r3, NULL, PALETTE_SIZE
cmp r2, r3
brge L92
addi r2, NULL, 0
rjmp L93
L92:
addi r2, NULL, 1
L93:
load[2] r4, NULL, BG_COLOR
cmp r4, r3
brge L94
addi r4, NULL, 0
rjmp L95
L94:
addi r4, NULL, 1
L95:
or r2, r2, r4
cmpi r2, 0
breq L96
addi RR, NULL, 0
ret
rjmp L97
L96:
L97:
subi SP, SP, 2
load[2] r0, NULL, FG_COLOR
push[2] BP
addi r1, NULL, 4
push[2] r1
push[2] r0
store[2] BP, r0, -2
subi SP, SP, 2
call left_shift_i
addi SP, SP, 6
pop[2] BP
move r0, RR
store[2] BP, r0, -2
load[2] r1, NULL, BG_COLOR
add r0, r0, r1
push[2] BP
addi r2, NULL, 8
push[2] r2
push[2] r0
store[2] BP, r0, -2
subi SP, SP, 2
call left_shift_i
addi SP, SP, 6
pop[2] BP
move r0, RR
subi SP, SP, 2
load[1] r1, BP, 5
store[2] BP, r1, -4
add r1, r1, r0
push[2] BP
subi SP, SP, 2
load[2] r2, BP, 6
push[2] r2
push[2] r1
store[2] BP, r0, -2
store[2] BP, r1, -4
subi SP, SP, 2
call tile_index_write
addi SP, SP, 8
pop[2] BP
addi SP, SP, 4
ret
print_c_at_pos:
move BP, SP
load[1] r0, BP, 3
load[2] r1, BP, 4
load[2] r2, BP, 6
push[2] BP
subi SP, SP, 2
load[2] r3, NULL, VIDEO_TILE_WIDTH
mul r3, r3, r2
add r1, r1, r3
push[2] r1
push[1] r0
subi SP, SP, 3
call print_c_at
addi SP, SP, 8
pop[2] BP
ret
print_c:
move BP, SP
load[1] r0, BP, 3
push[2] BP
subi SP, SP, 2
load[2] r1, NULL, CURSOR
push[2] r1
push[1] r0
subi SP, SP, 3
call print_c_at
addi SP, SP, 8
pop[2] BP
cmpi RR, 0
breq L98
push[2] BP
call advance_cursor
pop[2] BP
addi RR, NULL, 1
ret
rjmp L99
L98:
L99:
addi RR, NULL, 0
ret
print:
move BP, SP
load[2] r0, BP, 2
L100:
load[2] r0, BP, 2
load[1] r0, r0, 0
cmpi r0, 0
breq L101
push[2] BP
subi SP, SP, 2
load[2] r1, BP, 2
load[1] r1, r1, 0
push[1] r1
subi SP, SP, 1
call print_c
addi SP, SP, 4
pop[2] BP
load[2] r0, BP, 2
addi r0, r0, 1
store[2] BP, r0, 2
rjmp L100
L101:
move RR, NULL
ret
clear:
move BP, SP
subi SP, SP, 2
addi r0, NULL, 0
store[2] BP, r0, -2
L102:
load[2] r0, BP, -2
load[2] r1, NULL, VIDEO_TILES
cmp r0, r1
brlt L104
addi r0, NULL, 0
rjmp L105
L104:
addi r0, NULL, 1
L105:
cmpi r0, 0
breq L103
push[2] BP
load[2] r2, BP, -2
push[2] r2
addi r3, NULL, 0
push[2] r3
subi SP, SP, 2
call tile_index_write
addi SP, SP, 6
pop[2] BP
rjmp L102
L103:
addi r0, NULL, 0
addi r1, NULL, 0
addi r2, NULL, 0
addi SP, SP, 2
store[2] NULL, r0, CURSOR
store[2] NULL, r1, CURSOR_X
store[2] NULL, r2, CURSOR_Y
move RR, NULL
ret
memset:
move BP, SP
load[2] r0, BP, 2
load[2] r1, BP, 4
load[1] r2, BP, 7
subi SP, SP, 2
addi r3, NULL, 0
store[2] BP, r3, -2
L106:
load[2] r0, BP, -2
load[2] r1, BP, 4
cmp r0, r1
brlt L108
addi r0, NULL, 0
rjmp L109
L108:
addi r0, NULL, 1
L109:
cmpi r0, 0
breq L107
load[2] r2, BP, 2
load[2] r3, BP, -2
addi r4, NULL, 1
mul r3, r3, r4
add r2, r2, r3
load[1] r4, BP, 7
store[1] r2, r4, 0
addi r3, r3, 1
store[2] BP, r3, -2
rjmp L106
L107:
addi SP, SP, 2
move RR, NULL
ret
add_changed:
move BP, SP
load[2] r0, BP, 2
addi r1, NULL, changed
load[2] r2, NULL, changed_index
addi r3, NULL, 2
mul r2, r2, r3
add r1, r1, r2
store[2] r1, r0, 0
addi r2, r2, 1
store[2] NULL, r2, changed_index
move RR, NULL
ret
calc_next_gen:
move BP, SP
subi SP, SP, 2
addi r0, NULL, 0
subi SP, SP, 2
addi r1, NULL, 0
subi SP, SP, 2
addi r2, NULL, 0
store[2] BP, r0, -2
store[2] BP, r1, -4
store[2] BP, r2, -6
L110:
load[2] r0, BP, -2
load[2] r1, NULL, VIDEO_TILES
cmp r0, r1
brlt L112
addi r0, NULL, 0
rjmp L113
L112:
addi r0, NULL, 1
L113:
cmpi r0, 0
breq L111
subi SP, SP, 2
addi r2, NULL, 0
subi SP, SP, 2
addi r3, NULL, -1
subi SP, SP, 2
addi r4, NULL, -1
store[2] BP, r2, -8
store[2] BP, r3, -10
store[2] BP, r4, -12
L114:
load[2] r0, BP, -12
cmpi r0, 2
brlt L116
addi r0, NULL, 0
rjmp L117
L116:
addi r0, NULL, 1
L117:
cmpi r0, 0
breq L115
L118:
load[2] r0, BP, -10
cmpi r0, 2
brlt L120
addi r0, NULL, 0
rjmp L121
L120:
addi r0, NULL, 1
L121:
cmpi r0, 0
breq L119
subi SP, SP, 2
load[2] r1, BP, -4
load[2] r2, BP, -10
add r1, r1, r2
subi SP, SP, 2
load[2] r3, BP, -6
load[2] r4, BP, -12
add r3, r3, r4
store[2] BP, r1, -14
load[2] r5, NULL, VIDEO_TILE_WIDTH
cmp r1, r5
brge L122
addi r1, NULL, 0
rjmp L123
L122:
addi r1, NULL, 1
L123:
store[2] BP, r3, -16
cmpi r1, 0
breq L124
addi r0, NULL, 0
store[2] BP, r0, -14
rjmp L125
L124:
load[2] r0, BP, -14
load[2] r1, NULL, VIDEO_TILE_WIDTH
cmp r0, r1
brle L126
addi r0, NULL, 0
rjmp L127
L126:
addi r0, NULL, 1
L127:
cmpi r0, 0
breq L128
load[2] r0, NULL, VIDEO_TILE_WIDTH
subi r0, r0, 1
store[2] BP, r0, -14
rjmp L129
L128:
L129:
L125:
load[2] r0, BP, -16
load[2] r1, NULL, VIDEO_TILE_HEIGHT
cmp r0, r1
brge L130
addi r0, NULL, 0
rjmp L131
L130:
addi r0, NULL, 1
L131:
cmpi r0, 0
breq L132
addi r0, NULL, 0
store[2] BP, r0, -16
rjmp L133
L132:
load[2] r0, BP, -14
load[2] r1, NULL, VIDEO_TILE_WIDTH
cmp r0, r1
brle L134
addi r0, NULL, 0
rjmp L135
L134:
addi r0, NULL, 1
L135:
cmpi r0, 0
breq L136
load[2] r0, NULL, VIDEO_TILE_HEIGHT
subi r0, r0, 1
store[2] BP, r0, -16
rjmp L137
L136:
L137:
L133:
subi SP, SP, 2
load[2] r0, BP, -14
load[2] r1, NULL, VIDEO_TILE_WIDTH
load[2] r2, BP, -16
mul r1, r1, r2
add r0, r0, r1
load[2] r3, BP, -8
addi r4, NULL, buffer
store[2] BP, r0, -18
add r0, r4, r0
load[1] r0, r0, 0
add r3, r3, r0
load[2] r5, BP, -10
addi r5, r5, 1
addi SP, SP, 6
store[2] BP, r3, -8
store[2] BP, r5, -10
rjmp L118
L119:
load[2] r0, BP, -12
addi r0, r0, 1
store[2] BP, r0, -12
rjmp L114
L115:
addi r0, NULL, buffer
load[2] r1, BP, -2
add r1, r0, r1
load[1] r1, r1, 0
cmpi r1, 1
breq L138
addi r1, NULL, 0
rjmp L139
L138:
addi r1, NULL, 1
L139:
cmpi r1, 0
breq L140
load[2] r0, BP, -8
cmpi r0, 2
brlt L142
addi r0, NULL, 0
rjmp L143
L142:
addi r0, NULL, 1
L143:
load[2] r1, BP, -8
cmpi r1, 3
brgt L144
addi r1, NULL, 0
rjmp L145
L144:
addi r1, NULL, 1
L145:
or r0, r0, r1
cmpi r0, 0
breq L146
push[2] BP
subi SP, SP, 2
load[2] r0, BP, -2
push[2] r0
call add_changed
addi SP, SP, 4
pop[2] BP
rjmp L147
L146:
L147:
rjmp L141
L140:
load[2] r0, BP, -8
cmpi r0, 3
breq L148
addi r0, NULL, 0
rjmp L149
L148:
addi r0, NULL, 1
L149:
cmpi r0, 0
breq L150
push[2] BP
subi SP, SP, 2
load[2] r0, BP, -2
push[2] r0
call add_changed
addi SP, SP, 4
pop[2] BP
rjmp L151
L150:
L151:
L141:
load[2] r0, BP, -4
addi r0, r0, 1
load[2] r1, BP, -2
addi r1, r1, 1
store[2] BP, r0, -4
load[2] r2, NULL, VIDEO_TILE_WIDTH
cmp r0, r2
brge L152
addi r0, NULL, 0
rjmp L153
L152:
addi r0, NULL, 1
L153:
store[2] BP, r1, -2
cmpi r0, 0
breq L154
addi r0, NULL, 0
store[2] BP, r0, -4
rjmp L155
L154:
L155:
addi SP, SP, 6
rjmp L110
L111:
addi SP, SP, 6
move RR, NULL
ret
print_board:
move BP, SP
subi SP, SP, 2
addi r0, NULL, 0
store[2] BP, r0, -2
L156:
load[2] r0, BP, -2
load[2] r1, NULL, VIDEO_TILES
cmp r0, r1
brlt L158
addi r0, NULL, 0
rjmp L159
L158:
addi r0, NULL, 1
L159:
cmpi r0, 0
breq L157
addi r2, NULL, buffer
load[2] r3, BP, -2
add r3, r2, r3
load[1] r3, r3, 0
cmpi r3, 0
breq L160
push[2] BP
load[2] r0, BP, -2
push[2] r0
addi r1, NULL, 43
push[2] r1
subi SP, SP, 2
call vga_write
addi SP, SP, 6
pop[2] BP
rjmp L161
L160:
push[2] BP
load[2] r0, BP, -2
push[2] r0
addi r1, NULL, 32
push[2] r1
subi SP, SP, 2
call vga_write
addi SP, SP, 6
pop[2] BP
L161:
rjmp L156
L157:
addi SP, SP, 2
move RR, NULL
ret
update_changed:
move BP, SP
subi SP, SP, 2
addi r0, NULL, 0
store[2] BP, r0, -2
L162:
load[2] r0, BP, -2
load[2] r1, NULL, changed_index
cmp r0, r1
brlt L164
addi r0, NULL, 0
rjmp L165
L164:
addi r0, NULL, 1
L165:
cmpi r0, 0
breq L163
subi SP, SP, 2
addi r2, NULL, changed
load[2] r3, BP, -2
addi r4, NULL, 2
mul r3, r3, r4
add r3, r2, r3
load[2] r3, r3, 0
addi r4, NULL, buffer
store[2] BP, r3, -4
add r3, r4, r3
load[1] r3, r3, 0
cmpi r3, 0
breq L166
addi r0, NULL, buffer
load[2] r1, BP, -4
addi r2, NULL, 1
mul r1, r1, r2
add r0, r0, r1
addi r2, NULL, 0
store[1] r0, r2, 0
rjmp L167
L166:
addi r0, NULL, buffer
load[2] r1, BP, -4
addi r2, NULL, 1
mul r1, r1, r2
add r0, r0, r1
addi r2, NULL, 1
store[1] r0, r2, 0
L167:
addi SP, SP, 2
rjmp L162
L163:
addi r0, NULL, 0
addi SP, SP, 2
store[2] NULL, r0, changed_index
move RR, NULL
ret
sleep_ms:
move BP, SP
load[4] r0, BP, 4
subi SP, SP, 4
load[4] r1, NULL, SLEEP_MS_MULT
mul r0, r0, r1
subi SP, SP, 4
addi r2, NULL, 0
store[4] BP, r0, -4
store[4] BP, r2, -8
L168:
load[4] r0, BP, -8
load[4] r1, BP, -4
cmp r0, r1
brlt L170
addi r0, NULL, 0
rjmp L171
L170:
addi r0, NULL, 1
L171:
cmpi r0, 0
breq L169
load[4] r2, BP, -8
addi r2, r2, 1
store[4] BP, r2, -8
rjmp L168
L169:
addi SP, SP, 8
move RR, NULL
ret
next_gen:
move BP, SP
push[2] BP
call calc_next_gen
pop[2] BP
push[2] BP
call update_changed
pop[2] BP
move RR, NULL
ret
main:
move BP, SP
push[2] BP
subi SP, SP, 2
addi r0, NULL, 0
push[1] r0
load[2] r0, NULL, VIDEO_TILES
subi SP, SP, 1
push[2] r0
addi r1, NULL, buffer
push[2] r1
call memset
addi SP, SP, 8
pop[2] BP
addi r0, NULL, buffer
addi r0, r0, 41
addi r1, NULL, 1
store[1] r0, r1, 0
addi r0, NULL, buffer
addi r0, r0, 82
addi r1, NULL, 1
store[1] r0, r1, 0
addi r0, NULL, buffer
addi r0, r0, 121
addi r1, NULL, 1
store[1] r0, r1, 0
addi r0, NULL, buffer
addi r0, r0, 122
addi r1, NULL, 1
store[1] r0, r1, 0
addi r0, NULL, buffer
addi r0, r0, 123
addi r1, NULL, 1
store[1] r0, r1, 0
push[2] BP
call print_board
pop[2] BP
L172:
push[2] BP
subi SP, SP, 2
addi r0, NULL, 500
push[4] r0
subi SP, SP, 2
call sleep_ms
addi SP, SP, 8
pop[2] BP
push[2] BP
call next_gen
pop[2] BP
rjmp L172
L173:
move RR, NULL
ret
(Pre register_constants)
(Code after 'register_constants')
 .data MEMORY_SIZE
.dh 4096
.data VIDEO_TILE_WIDTH
.dh 40
.data VIDEO_TILE_HEIGHT
.dh 30
.data VIDEO_TILES
.dh 0
load[2] r0, NULL, VIDEO_TILE_WIDTH
load[2] r1, NULL, VIDEO_TILE_HEIGHT
mul r0, r0, r1
store[2] NULL, r0, VIDEO_TILES
.data PALETTE_START
.dh 0
load[2] r0, NULL, VIDEO_TILES
store[2] NULL, r0, PALETTE_START
.data PALETTE_SIZE
.dh 16
.data VIDEO_MEMORY_SIZE
.dh 0
load[2] r0, NULL, VIDEO_TILES
load[2] r2, NULL, PALETTE_SIZE
add r0, r0, r2
store[2] NULL, r0, VIDEO_MEMORY_SIZE
.data VIDEO_PIXEL_WIDTH
.dh 640
.data VIDEO_PIXEL_HEIGHT
.dh 480
.data FG_COLOR
.dh 0
.data BG_COLOR
.dh 0
.data CURSOR
.dh 0
.data CURSOR_X
.dh 0
.data CURSOR_Y
.dh 0
.data buffer
.db 0
.data changed_index
.dh 0
.data changed
.dh 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
.data SLEEP_MS_MULT
.dw 7692
subi SP, SP, 1
call main
subi SP, SP, 2
__halt:
rjmp __halt
in:
move BP, SP
load[2] r0, BP, 2
subi SP, SP, 4
load[4] r1, BP, -4
in r1, 0
move RR, r1
addi SP, SP, 4
ret
out:
move BP, SP
load[4] r0, BP, 4
load[2] r1, BP, 10
out 0, r0
store[4] BP, r0, 4
move RR, NULL
ret
vga_write:
move BP, SP
load[2] r0, BP, 4
load[2] r1, BP, 6
vgaw r1, r0, 0
store[2] BP, r1, 6
move RR, NULL
ret
outside_bound:
move BP, SP
load[2] r0, BP, 2
load[2] r1, BP, 4
load[2] r2, BP, 6
cmp r0, r2
brge L0
addi r0, NULL, 0
rjmp L1
L0:
addi r0, NULL, 1
L1:
load[2] r3, BP, 2
cmp r3, r1
brlt L2
addi r3, NULL, 0
rjmp L3
L2:
addi r3, NULL, 1
L3:
or r0, r0, r3
move RR, r0
ret
left_shift_l:
move BP, SP
load[4] r0, BP, 4
load[2] r1, BP, 10
L4:
load[2] r0, BP, 10
cmpi r0, 0
brgt L6
addi r0, NULL, 0
rjmp L7
L6:
addi r0, NULL, 1
L7:
cmpi r0, 0
breq L5
load[4] r1, BP, 4
lsl[4] r1, r1
load[2] r2, BP, 10
subi r2, r2, 1
store[4] BP, r1, 4
store[2] BP, r2, 10
rjmp L4
L5:
load[4] r0, BP, 4
move RR, r0
ret
right_shift_l:
move BP, SP
load[4] r0, BP, 4
load[2] r1, BP, 10
L8:
load[2] r0, BP, 10
cmpi r0, 0
brgt L10
addi r0, NULL, 0
rjmp L11
L10:
addi r0, NULL, 1
L11:
cmpi r0, 0
breq L9
load[4] r1, BP, 4
lsr[4] r1, r1
load[2] r2, BP, 10
subi r2, r2, 1
store[4] BP, r1, 4
store[2] BP, r2, 10
rjmp L8
L9:
load[4] r0, BP, 4
move RR, r0
ret
left_shift_i:
move BP, SP
load[2] r0, BP, 4
load[2] r1, BP, 6
L12:
load[2] r0, BP, 6
cmpi r0, 0
brgt L14
addi r0, NULL, 0
rjmp L15
L14:
addi r0, NULL, 1
L15:
cmpi r0, 0
breq L13
load[2] r1, BP, 4
lsl[2] r1, r1
load[2] r2, BP, 6
subi r2, r2, 1
store[2] BP, r1, 4
store[2] BP, r2, 6
rjmp L12
L13:
load[2] r0, BP, 4
move RR, r0
ret
right_shift_i:
move BP, SP
load[2] r0, BP, 4
load[2] r1, BP, 6
L16:
load[2] r0, BP, 6
cmpi r0, 0
brgt L18
addi r0, NULL, 0
rjmp L19
L18:
addi r0, NULL, 1
L19:
cmpi r0, 0
breq L17
load[2] r1, BP, 4
lsr[2] r1, r1
load[2] r2, BP, 6
subi r2, r2, 1
store[2] BP, r1, 4
store[2] BP, r2, 6
rjmp L16
L17:
load[2] r0, BP, 4
move RR, r0
ret
left_shift_c:
move BP, SP
load[1] r0, BP, 5
load[2] r1, BP, 6
L20:
load[2] r0, BP, 6
cmpi r0, 0
brgt L22
addi r0, NULL, 0
rjmp L23
L22:
addi r0, NULL, 1
L23:
cmpi r0, 0
breq L21
load[1] r1, BP, 5
lsl[1] r1, r1
load[2] r2, BP, 6
subi r2, r2, 1
store[1] BP, r1, 5
store[2] BP, r2, 6
rjmp L20
L21:
load[1] r0, BP, 5
move RR, r0
ret
right_shift_c:
move BP, SP
load[1] r0, BP, 5
load[2] r1, BP, 6
L24:
load[2] r0, BP, 6
cmpi r0, 0
brgt L26
addi r0, NULL, 0
rjmp L27
L26:
addi r0, NULL, 1
L27:
cmpi r0, 0
breq L25
load[1] r1, BP, 5
lsr[1] r1, r1
load[2] r2, BP, 6
subi r2, r2, 1
store[1] BP, r1, 5
store[2] BP, r2, 6
rjmp L24
L25:
load[1] r0, BP, 5
move RR, r0
ret
divide:
move BP, SP
load[2] r0, BP, 4
load[2] r1, BP, 6
subi SP, SP, 2
subi SP, SP, 2
addi r2, NULL, 0
store[2] BP, r0, -2
store[2] BP, r2, -4
L28:
load[2] r0, BP, -2
load[2] r1, BP, 6
cmp r0, r1
brgt L30
addi r0, NULL, 0
rjmp L31
L30:
addi r0, NULL, 1
L31:
cmpi r0, 0
breq L29
load[2] r2, BP, -2
sub r2, r2, r1
load[2] r3, BP, -4
addi r3, r3, 1
store[2] BP, r2, -2
store[2] BP, r3, -4
rjmp L28
L29:
subi SP, SP, 4
load[2] r0, BP, -4
push[2] BP
subi SP, SP, 2
addi r1, NULL, 16
push[2] r1
subi SP, SP, 2
push[4] r0
store[4] BP, r0, -8
subi SP, SP, 2
call left_shift_l
addi SP, SP, 12
pop[2] BP
move r0, RR
store[4] BP, r0, -8
load[2] r1, BP, -2
add r0, r0, r1
move RR, r0
addi SP, SP, 8
ret
tile_index_write:
move BP, SP
load[2] r0, BP, 4
load[2] r3, BP, 6
load[2] r4, NULL, VIDEO_TILES
cmp r3, r4
brge L32
addi r3, NULL, 0
rjmp L33
L32:
addi r3, NULL, 1
L33:
cmpi r3, 0
breq L34
addi RR, NULL, 0
ret
rjmp L35
L34:
L35:
push[2] BP
subi SP, SP, 2
load[2] r0, BP, 6
push[2] r0
load[2] r1, BP, 4
push[2] r1
subi SP, SP, 2
call vga_write
addi SP, SP, 8
pop[2] BP
addi RR, NULL, 1
ret
tile_coord_write:
move BP, SP
load[4] r0, BP, 4
load[2] r1, BP, 8
load[2] r2, BP, 10
load[2] r3, NULL, VIDEO_PIXEL_WIDTH
cmp r1, r3
brge L36
addi r1, NULL, 0
rjmp L37
L36:
addi r1, NULL, 1
L37:
load[2] r4, NULL, VIDEO_PIXEL_HEIGHT
cmp r2, r4
brge L38
addi r2, NULL, 0
rjmp L39
L38:
addi r2, NULL, 1
L39:
or r1, r1, r2
cmpi r1, 0
breq L40
addi RR, NULL, 0
ret
rjmp L41
L40:
L41:
subi SP, SP, 2
load[2] r0, BP, 8
load[2] r1, NULL, VIDEO_PIXEL_WIDTH
load[2] r2, BP, 10
mul r1, r1, r2
add r0, r0, r1
push[2] BP
push[2] r0
load[4] r3, BP, 4
push[2] r3
store[2] BP, r0, -2
subi SP, SP, 2
call vga_write
addi SP, SP, 6
pop[2] BP
addi RR, NULL, 1
addi SP, SP, 2
ret
palette_index_write:
move BP, SP
load[2] r0, BP, 2
load[2] r1, BP, 4
load[2] r2, BP, 6
load[2] r3, NULL, PALETTE_SIZE
cmp r0, r3
brge L42
addi r0, NULL, 0
rjmp L43
L42:
addi r0, NULL, 1
L43:
cmpi r0, 0
breq L44
addi RR, NULL, 0
ret
rjmp L45
L44:
L45:
subi SP, SP, 2
load[2] r0, NULL, PALETTE_START
load[2] r1, BP, 2
add r0, r0, r1
subi SP, SP, 2
load[2] r2, BP, 4
push[2] BP
subi SP, SP, 2
addi r3, NULL, 8
push[2] r3
load[2] r3, BP, 4
push[2] r3
store[2] BP, r0, -2
store[2] BP, r2, -4
subi SP, SP, 2
call left_shift_i
addi SP, SP, 8
pop[2] BP
move r0, RR
store[2] BP, r0, -4
load[2] r1, BP, 6
add r0, r0, r1
push[2] BP
subi SP, SP, 2
load[2] r2, BP, -2
push[2] r2
push[2] r0
store[2] BP, r0, -4
subi SP, SP, 2
call vga_write
addi SP, SP, 8
pop[2] BP
addi RR, NULL, 1
addi SP, SP, 4
ret
set_cursor:
move BP, SP
load[1] r0, BP, 2
load[1] r1, BP, 3
load[2] r2, NULL, VIDEO_TILE_WIDTH
cmp r0, r2
brge L46
addi r0, NULL, 0
rjmp L47
L46:
addi r0, NULL, 1
L47:
load[2] r3, NULL, VIDEO_TILE_HEIGHT
cmp r1, r3
brge L48
addi r1, NULL, 0
rjmp L49
L48:
addi r1, NULL, 1
L49:
or r0, r0, r1
cmpi r0, 0
breq L50
addi RR, NULL, 0
ret
rjmp L51
L50:
L51:
load[1] r0, BP, 2
move r1, r0
load[1] r2, BP, 3
move r3, r2
add r0, r0, r2
load[2] r4, NULL, VIDEO_TILE_WIDTH
mul r0, r0, r4
store[2] NULL, r0, CURSOR
store[2] NULL, r1, CURSOR_X
store[2] NULL, r3, CURSOR_Y
addi RR, NULL, 1
ret
advance_cursor:
move BP, SP
load[2] r0, NULL, CURSOR
addi r0, r0, 1
store[2] NULL, r0, CURSOR
load[2] r1, NULL, VIDEO_TILES
cmp r0, r1
brlt L52
addi r0, NULL, 0
rjmp L53
L52:
addi r0, NULL, 1
L53:
cmpi r0, 0
breq L54
load[2] r0, NULL, CURSOR_X
addi r0, r0, 1
store[2] NULL, r0, CURSOR_X
load[2] r1, NULL, VIDEO_TILE_WIDTH
cmp r0, r1
brge L56
addi r0, NULL, 0
rjmp L57
L56:
addi r0, NULL, 1
L57:
cmpi r0, 0
breq L58
addi r0, NULL, 0
load[2] r1, NULL, CURSOR_Y
addi r1, r1, 1
store[2] NULL, r0, CURSOR_X
store[2] NULL, r1, CURSOR_Y
rjmp L59
L58:
L59:
rjmp L55
L54:
addi r0, NULL, 0
addi r1, NULL, 0
addi r2, NULL, 0
store[2] NULL, r0, CURSOR
store[2] NULL, r1, CURSOR_X
store[2] NULL, r2, CURSOR_Y
L55:
move RR, NULL
ret
back_cursor:
move BP, SP
load[2] r0, NULL, CURSOR
cmpi r0, 0
breq L60
addi r0, NULL, 0
rjmp L61
L60:
addi r0, NULL, 1
L61:
cmpi r0, 0
breq L62
addi RR, NULL, 0
ret
rjmp L63
L62:
L63:
load[2] r0, NULL, CURSOR
subi r0, r0, 1
store[2] NULL, r0, CURSOR
load[2] r1, NULL, VIDEO_TILES
cmp r0, r1
brlt L64
addi r0, NULL, 0
rjmp L65
L64:
addi r0, NULL, 1
L65:
cmpi r0, 0
breq L66
load[2] r0, NULL, CURSOR_X
subi r0, r0, 1
store[2] NULL, r0, CURSOR_X
cmpi r0, 0
brlt L68
addi r0, NULL, 0
rjmp L69
L68:
addi r0, NULL, 1
L69:
cmpi r0, 0
breq L70
addi r0, NULL, 0
load[2] r1, NULL, CURSOR_Y
subi r1, r1, 1
store[2] NULL, r0, CURSOR_X
store[2] NULL, r1, CURSOR_Y
rjmp L71
L70:
L71:
rjmp L67
L66:
load[2] r0, NULL, VIDEO_TILES
subi r0, r0, 1
load[2] r1, NULL, VIDEO_TILE_WIDTH
move r2, r1
load[2] r3, NULL, VIDEO_TILE_HEIGHT
move r4, r3
store[2] NULL, r0, CURSOR
store[2] NULL, r2, CURSOR_X
store[2] NULL, r4, CURSOR_Y
L67:
move RR, NULL
ret
advance_steps:
move BP, SP
load[2] r0, BP, 2
load[2] r1, NULL, VIDEO_TILES
cmp r0, r1
brge L72
addi r0, NULL, 0
rjmp L73
L72:
addi r0, NULL, 1
L73:
cmpi r0, 0
breq L74
addi RR, NULL, 0
ret
rjmp L75
L74:
L75:
load[2] r0, NULL, CURSOR
load[2] r1, BP, 2
add r0, r0, r1
store[2] NULL, r0, CURSOR
load[2] r2, NULL, VIDEO_TILES
cmp r0, r2
brge L76
addi r0, NULL, 0
rjmp L77
L76:
addi r0, NULL, 1
L77:
cmpi r0, 0
breq L78
load[2] r0, NULL, CURSOR
load[2] r1, NULL, VIDEO_TILES
sub r0, r0, r1
store[2] NULL, r0, CURSOR
rjmp L79
L78:
L79:
subi SP, SP, 4
push[2] BP
subi SP, SP, 2
load[2] r0, NULL, VIDEO_TILE_WIDTH
push[2] r0
load[2] r1, NULL, CURSOR
push[2] r1
subi SP, SP, 2
call divide
addi SP, SP, 8
pop[2] BP
move r0, RR
subi SP, SP, 4
push[2] BP
subi SP, SP, 2
load[2] r1, NULL, VIDEO_TILE_HEIGHT
push[2] r1
load[2] r2, NULL, CURSOR
push[2] r2
store[4] BP, r0, -4
subi SP, SP, 2
call divide
addi SP, SP, 8
pop[2] BP
move r0, RR
push[2] BP
subi SP, SP, 2
addi r1, NULL, 16
push[2] r1
load[4] r1, BP, -4
subi SP, SP, 2
push[4] r1
store[4] BP, r0, -8
subi SP, SP, 2
call right_shift_l
addi SP, SP, 12
pop[2] BP
move r0, RR
push[2] BP
subi SP, SP, 2
addi r1, NULL, 16
push[2] r1
load[4] r1, BP, -8
subi SP, SP, 2
push[4] r1
store[2] NULL, r0, CURSOR_X
subi SP, SP, 2
call right_shift_l
addi SP, SP, 12
pop[2] BP
move r0, RR
store[2] NULL, r0, CURSOR_Y
addi RR, NULL, 1
addi SP, SP, 8
ret
advance_line:
move BP, SP
load[2] r0, NULL, CURSOR_Y
addi r0, r0, 1
store[2] NULL, r0, CURSOR_Y
load[2] r1, NULL, VIDEO_TILE_HEIGHT
cmp r0, r1
brlt L80
addi r0, NULL, 0
rjmp L81
L80:
addi r0, NULL, 1
L81:
cmpi r0, 0
breq L82
load[2] r0, NULL, VIDEO_TILE_WIDTH
load[2] r1, NULL, CURSOR_Y
mul r0, r0, r1
load[2] r2, NULL, CURSOR_X
add r0, r0, r2
store[2] NULL, r0, CURSOR
rjmp L83
L82:
load[2] r0, NULL, CURSOR_X
move r1, r0
addi r2, NULL, 0
store[2] NULL, r1, CURSOR
store[2] NULL, r2, CURSOR_Y
L83:
move RR, NULL
ret
back_line:
move BP, SP
load[2] r0, NULL, CURSOR_Y
subi r0, r0, 1
store[2] NULL, r0, CURSOR_Y
cmpi r0, 0
brge L84
addi r0, NULL, 0
rjmp L85
L84:
addi r0, NULL, 1
L85:
cmpi r0, 0
breq L86
load[2] r0, NULL, VIDEO_TILE_WIDTH
load[2] r1, NULL, CURSOR_Y
mul r0, r0, r1
load[2] r2, NULL, CURSOR_X
add r0, r0, r2
store[2] NULL, r0, CURSOR
rjmp L87
L86:
load[2] r0, NULL, CURSOR_X
move r1, r0
load[2] r2, NULL, VIDEO_TILE_HEIGHT
subi r2, r2, 1
store[2] NULL, r1, CURSOR
store[2] NULL, r2, CURSOR_Y
L87:
move RR, NULL
ret
new_line:
move BP, SP
load[2] r0, NULL, CURSOR_Y
addi r0, r0, 1
store[2] NULL, r0, CURSOR_Y
load[2] r1, NULL, VIDEO_TILE_HEIGHT
cmp r0, r1
brlt L88
addi r0, NULL, 0
rjmp L89
L88:
addi r0, NULL, 1
L89:
cmpi r0, 0
breq L90
load[2] r0, NULL, VIDEO_TILE_WIDTH
load[2] r1, NULL, CURSOR_Y
mul r0, r0, r1
store[2] NULL, r0, CURSOR
rjmp L91
L90:
addi r0, NULL, 0
addi r1, NULL, 0
store[2] NULL, r0, CURSOR
store[2] NULL, r1, CURSOR_Y
L91:
addi r0, NULL, 0
store[2] NULL, r0, CURSOR_X
move RR, NULL
ret
print_c_at:
move BP, SP
load[1] r0, BP, 5
load[2] r1, BP, 6
load[2] r2, NULL, FG_COLOR
load[2] r3, NULL, PALETTE_SIZE
cmp r2, r3
brge L92
addi r2, NULL, 0
rjmp L93
L92:
addi r2, NULL, 1
L93:
load[2] r4, NULL, BG_COLOR
cmp r4, r3
brge L94
addi r4, NULL, 0
rjmp L95
L94:
addi r4, NULL, 1
L95:
or r2, r2, r4
cmpi r2, 0
breq L96
addi RR, NULL, 0
ret
rjmp L97
L96:
L97:
subi SP, SP, 2
load[2] r0, NULL, FG_COLOR
push[2] BP
addi r1, NULL, 4
push[2] r1
push[2] r0
store[2] BP, r0, -2
subi SP, SP, 2
call left_shift_i
addi SP, SP, 6
pop[2] BP
move r0, RR
store[2] BP, r0, -2
load[2] r1, NULL, BG_COLOR
add r0, r0, r1
push[2] BP
addi r2, NULL, 8
push[2] r2
push[2] r0
store[2] BP, r0, -2
subi SP, SP, 2
call left_shift_i
addi SP, SP, 6
pop[2] BP
move r0, RR
subi SP, SP, 2
load[1] r1, BP, 5
store[2] BP, r1, -4
add r1, r1, r0
push[2] BP
subi SP, SP, 2
load[2] r2, BP, 6
push[2] r2
push[2] r1
store[2] BP, r0, -2
store[2] BP, r1, -4
subi SP, SP, 2
call tile_index_write
addi SP, SP, 8
pop[2] BP
addi SP, SP, 4
ret
print_c_at_pos:
move BP, SP
load[1] r0, BP, 3
load[2] r1, BP, 4
load[2] r2, BP, 6
push[2] BP
subi SP, SP, 2
load[2] r3, NULL, VIDEO_TILE_WIDTH
mul r3, r3, r2
add r1, r1, r3
push[2] r1
push[1] r0
subi SP, SP, 3
call print_c_at
addi SP, SP, 8
pop[2] BP
ret
print_c:
move BP, SP
load[1] r0, BP, 3
push[2] BP
subi SP, SP, 2
load[2] r1, NULL, CURSOR
push[2] r1
push[1] r0
subi SP, SP, 3
call print_c_at
addi SP, SP, 8
pop[2] BP
cmpi RR, 0
breq L98
push[2] BP
call advance_cursor
pop[2] BP
addi RR, NULL, 1
ret
rjmp L99
L98:
L99:
addi RR, NULL, 0
ret
print:
move BP, SP
load[2] r0, BP, 2
L100:
load[2] r0, BP, 2
load[1] r0, r0, 0
cmpi r0, 0
breq L101
push[2] BP
subi SP, SP, 2
load[2] r1, BP, 2
load[1] r1, r1, 0
push[1] r1
subi SP, SP, 1
call print_c
addi SP, SP, 4
pop[2] BP
load[2] r0, BP, 2
addi r0, r0, 1
store[2] BP, r0, 2
rjmp L100
L101:
move RR, NULL
ret
clear:
move BP, SP
subi SP, SP, 2
addi r0, NULL, 0
store[2] BP, r0, -2
L102:
load[2] r0, BP, -2
load[2] r1, NULL, VIDEO_TILES
cmp r0, r1
brlt L104
addi r0, NULL, 0
rjmp L105
L104:
addi r0, NULL, 1
L105:
cmpi r0, 0
breq L103
push[2] BP
load[2] r2, BP, -2
push[2] r2
addi r3, NULL, 0
push[2] r3
subi SP, SP, 2
call tile_index_write
addi SP, SP, 6
pop[2] BP
rjmp L102
L103:
addi r0, NULL, 0
addi r1, NULL, 0
addi r2, NULL, 0
addi SP, SP, 2
store[2] NULL, r0, CURSOR
store[2] NULL, r1, CURSOR_X
store[2] NULL, r2, CURSOR_Y
move RR, NULL
ret
memset:
move BP, SP
load[2] r0, BP, 2
load[2] r1, BP, 4
load[1] r2, BP, 7
subi SP, SP, 2
addi r3, NULL, 0
store[2] BP, r3, -2
L106:
load[2] r0, BP, -2
load[2] r1, BP, 4
cmp r0, r1
brlt L108
addi r0, NULL, 0
rjmp L109
L108:
addi r0, NULL, 1
L109:
cmpi r0, 0
breq L107
load[2] r2, BP, 2
load[2] r3, BP, -2
addi r4, NULL, 1
mul r3, r3, r4
add r2, r2, r3
load[1] r4, BP, 7
store[1] r2, r4, 0
addi r3, r3, 1
store[2] BP, r3, -2
rjmp L106
L107:
addi SP, SP, 2
move RR, NULL
ret
add_changed:
move BP, SP
load[2] r0, BP, 2
addi r1, NULL, changed
load[2] r2, NULL, changed_index
addi r3, NULL, 2
mul r2, r2, r3
add r1, r1, r2
store[2] r1, r0, 0
addi r2, r2, 1
store[2] NULL, r2, changed_index
move RR, NULL
ret
calc_next_gen:
move BP, SP
subi SP, SP, 2
addi r0, NULL, 0
subi SP, SP, 2
addi r1, NULL, 0
subi SP, SP, 2
addi r2, NULL, 0
store[2] BP, r0, -2
store[2] BP, r1, -4
store[2] BP, r2, -6
L110:
load[2] r0, BP, -2
load[2] r1, NULL, VIDEO_TILES
cmp r0, r1
brlt L112
addi r0, NULL, 0
rjmp L113
L112:
addi r0, NULL, 1
L113:
cmpi r0, 0
breq L111
subi SP, SP, 2
addi r2, NULL, 0
subi SP, SP, 2
addi r3, NULL, -1
subi SP, SP, 2
addi r4, NULL, -1
store[2] BP, r2, -8
store[2] BP, r3, -10
store[2] BP, r4, -12
L114:
load[2] r0, BP, -12
cmpi r0, 2
brlt L116
addi r0, NULL, 0
rjmp L117
L116:
addi r0, NULL, 1
L117:
cmpi r0, 0
breq L115
L118:
load[2] r0, BP, -10
cmpi r0, 2
brlt L120
addi r0, NULL, 0
rjmp L121
L120:
addi r0, NULL, 1
L121:
cmpi r0, 0
breq L119
subi SP, SP, 2
load[2] r1, BP, -4
load[2] r2, BP, -10
add r1, r1, r2
subi SP, SP, 2
load[2] r3, BP, -6
load[2] r4, BP, -12
add r3, r3, r4
store[2] BP, r1, -14
load[2] r5, NULL, VIDEO_TILE_WIDTH
cmp r1, r5
brge L122
addi r1, NULL, 0
rjmp L123
L122:
addi r1, NULL, 1
L123:
store[2] BP, r3, -16
cmpi r1, 0
breq L124
addi r0, NULL, 0
store[2] BP, r0, -14
rjmp L125
L124:
load[2] r0, BP, -14
load[2] r1, NULL, VIDEO_TILE_WIDTH
cmp r0, r1
brle L126
addi r0, NULL, 0
rjmp L127
L126:
addi r0, NULL, 1
L127:
cmpi r0, 0
breq L128
load[2] r0, NULL, VIDEO_TILE_WIDTH
subi r0, r0, 1
store[2] BP, r0, -14
rjmp L129
L128:
L129:
L125:
load[2] r0, BP, -16
load[2] r1, NULL, VIDEO_TILE_HEIGHT
cmp r0, r1
brge L130
addi r0, NULL, 0
rjmp L131
L130:
addi r0, NULL, 1
L131:
cmpi r0, 0
breq L132
addi r0, NULL, 0
store[2] BP, r0, -16
rjmp L133
L132:
load[2] r0, BP, -14
load[2] r1, NULL, VIDEO_TILE_WIDTH
cmp r0, r1
brle L134
addi r0, NULL, 0
rjmp L135
L134:
addi r0, NULL, 1
L135:
cmpi r0, 0
breq L136
load[2] r0, NULL, VIDEO_TILE_HEIGHT
subi r0, r0, 1
store[2] BP, r0, -16
rjmp L137
L136:
L137:
L133:
subi SP, SP, 2
load[2] r0, BP, -14
load[2] r1, NULL, VIDEO_TILE_WIDTH
load[2] r2, BP, -16
mul r1, r1, r2
add r0, r0, r1
load[2] r3, BP, -8
addi r4, NULL, buffer
store[2] BP, r0, -18
add r0, r4, r0
load[1] r0, r0, 0
add r3, r3, r0
load[2] r5, BP, -10
addi r5, r5, 1
addi SP, SP, 6
store[2] BP, r3, -8
store[2] BP, r5, -10
rjmp L118
L119:
load[2] r0, BP, -12
addi r0, r0, 1
store[2] BP, r0, -12
rjmp L114
L115:
addi r0, NULL, buffer
load[2] r1, BP, -2
add r1, r0, r1
load[1] r1, r1, 0
cmpi r1, 1
breq L138
addi r1, NULL, 0
rjmp L139
L138:
addi r1, NULL, 1
L139:
cmpi r1, 0
breq L140
load[2] r0, BP, -8
cmpi r0, 2
brlt L142
addi r0, NULL, 0
rjmp L143
L142:
addi r0, NULL, 1
L143:
load[2] r1, BP, -8
cmpi r1, 3
brgt L144
addi r1, NULL, 0
rjmp L145
L144:
addi r1, NULL, 1
L145:
or r0, r0, r1
cmpi r0, 0
breq L146
push[2] BP
subi SP, SP, 2
load[2] r0, BP, -2
push[2] r0
call add_changed
addi SP, SP, 4
pop[2] BP
rjmp L147
L146:
L147:
rjmp L141
L140:
load[2] r0, BP, -8
cmpi r0, 3
breq L148
addi r0, NULL, 0
rjmp L149
L148:
addi r0, NULL, 1
L149:
cmpi r0, 0
breq L150
push[2] BP
subi SP, SP, 2
load[2] r0, BP, -2
push[2] r0
call add_changed
addi SP, SP, 4
pop[2] BP
rjmp L151
L150:
L151:
L141:
load[2] r0, BP, -4
addi r0, r0, 1
load[2] r1, BP, -2
addi r1, r1, 1
store[2] BP, r0, -4
load[2] r2, NULL, VIDEO_TILE_WIDTH
cmp r0, r2
brge L152
addi r0, NULL, 0
rjmp L153
L152:
addi r0, NULL, 1
L153:
store[2] BP, r1, -2
cmpi r0, 0
breq L154
addi r0, NULL, 0
store[2] BP, r0, -4
rjmp L155
L154:
L155:
addi SP, SP, 6
rjmp L110
L111:
addi SP, SP, 6
move RR, NULL
ret
print_board:
move BP, SP
subi SP, SP, 2
addi r0, NULL, 0
store[2] BP, r0, -2
L156:
load[2] r0, BP, -2
load[2] r1, NULL, VIDEO_TILES
cmp r0, r1
brlt L158
addi r0, NULL, 0
rjmp L159
L158:
addi r0, NULL, 1
L159:
cmpi r0, 0
breq L157
addi r2, NULL, buffer
load[2] r3, BP, -2
add r3, r2, r3
load[1] r3, r3, 0
cmpi r3, 0
breq L160
push[2] BP
load[2] r0, BP, -2
push[2] r0
addi r1, NULL, 43
push[2] r1
subi SP, SP, 2
call vga_write
addi SP, SP, 6
pop[2] BP
rjmp L161
L160:
push[2] BP
load[2] r0, BP, -2
push[2] r0
addi r1, NULL, 32
push[2] r1
subi SP, SP, 2
call vga_write
addi SP, SP, 6
pop[2] BP
L161:
rjmp L156
L157:
addi SP, SP, 2
move RR, NULL
ret
update_changed:
move BP, SP
subi SP, SP, 2
addi r0, NULL, 0
store[2] BP, r0, -2
L162:
load[2] r0, BP, -2
load[2] r1, NULL, changed_index
cmp r0, r1
brlt L164
addi r0, NULL, 0
rjmp L165
L164:
addi r0, NULL, 1
L165:
cmpi r0, 0
breq L163
subi SP, SP, 2
addi r2, NULL, changed
load[2] r3, BP, -2
addi r4, NULL, 2
mul r3, r3, r4
add r3, r2, r3
load[2] r3, r3, 0
addi r4, NULL, buffer
store[2] BP, r3, -4
add r3, r4, r3
load[1] r3, r3, 0
cmpi r3, 0
breq L166
addi r0, NULL, buffer
load[2] r1, BP, -4
addi r2, NULL, 1
mul r1, r1, r2
add r0, r0, r1
addi r2, NULL, 0
store[1] r0, r2, 0
rjmp L167
L166:
addi r0, NULL, buffer
load[2] r1, BP, -4
addi r2, NULL, 1
mul r1, r1, r2
add r0, r0, r1
addi r2, NULL, 1
store[1] r0, r2, 0
L167:
addi SP, SP, 2
rjmp L162
L163:
addi r0, NULL, 0
addi SP, SP, 2
store[2] NULL, r0, changed_index
move RR, NULL
ret
sleep_ms:
move BP, SP
load[4] r0, BP, 4
subi SP, SP, 4
load[4] r1, NULL, SLEEP_MS_MULT
mul r0, r0, r1
subi SP, SP, 4
addi r2, NULL, 0
store[4] BP, r0, -4
store[4] BP, r2, -8
L168:
load[4] r0, BP, -8
load[4] r1, BP, -4
cmp r0, r1
brlt L170
addi r0, NULL, 0
rjmp L171
L170:
addi r0, NULL, 1
L171:
cmpi r0, 0
breq L169
load[4] r2, BP, -8
addi r2, r2, 1
store[4] BP, r2, -8
rjmp L168
L169:
addi SP, SP, 8
move RR, NULL
ret
next_gen:
move BP, SP
push[2] BP
call calc_next_gen
pop[2] BP
push[2] BP
call update_changed
pop[2] BP
move RR, NULL
ret
main:
move BP, SP
push[2] BP
subi SP, SP, 2
addi r0, NULL, 0
push[1] r0
load[2] r0, NULL, VIDEO_TILES
subi SP, SP, 1
push[2] r0
addi r1, NULL, buffer
push[2] r1
call memset
addi SP, SP, 8
pop[2] BP
addi r0, NULL, buffer
addi r0, r0, 41
addi r1, NULL, 1
store[1] r0, r1, 0
addi r0, NULL, buffer
addi r0, r0, 82
addi r1, NULL, 1
store[1] r0, r1, 0
addi r0, NULL, buffer
addi r0, r0, 121
addi r1, NULL, 1
store[1] r0, r1, 0
addi r0, NULL, buffer
addi r0, r0, 122
addi r1, NULL, 1
store[1] r0, r1, 0
addi r0, NULL, buffer
addi r0, r0, 123
addi r1, NULL, 1
store[1] r0, r1, 0
push[2] BP
call print_board
pop[2] BP
L172:
push[2] BP
subi SP, SP, 2
addi r0, NULL, 500
push[4] r0
subi SP, SP, 2
call sleep_ms
addi SP, SP, 8
pop[2] BP
push[2] BP
call next_gen
pop[2] BP
rjmp L172
L173:
move RR, NULL
ret
(Pre store_data_memory)
['.data', 'MEMORY_SIZE']
['.dh', '4096']
['.data', 'VIDEO_TILE_WIDTH']
['.dh', '40']
['.data', 'VIDEO_TILE_HEIGHT']
['.dh', '30']
['.data', 'VIDEO_TILES']
['.dh', '0']
['.data', 'PALETTE_START']
['.dh', '0']
['.data', 'PALETTE_SIZE']
['.dh', '16']
['.data', 'VIDEO_MEMORY_SIZE']
['.dh', '0']
['.data', 'VIDEO_PIXEL_WIDTH']
['.dh', '640']
['.data', 'VIDEO_PIXEL_HEIGHT']
['.dh', '480']
['.data', 'FG_COLOR']
['.dh', '0']
['.data', 'BG_COLOR']
['.dh', '0']
['.data', 'CURSOR']
['.dh', '0']
['.data', 'CURSOR_X']
['.dh', '0']
['.data', 'CURSOR_Y']
['.dh', '0']
['.data', 'buffer']
['.db', '0']
['.data', 'changed_index']
['.dh', '0']
['.data', 'changed']
['.dh', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0']
Pre array:
Cmd: .data, val: MEMORY_SIZE, addr: 0, vals: []
Cmd: .dh, val: 4096, addr: 0, vals: ['0x0', '0x10']
Cmd: .data, val: VIDEO_TILE_WIDTH, addr: 2, vals: []
Cmd: .dh, val: 40, addr: 2, vals: ['0x28', '0x0']
Cmd: .data, val: VIDEO_TILE_HEIGHT, addr: 4, vals: []
Cmd: .dh, val: 30, addr: 4, vals: ['0x1e', '0x0']
Cmd: .data, val: VIDEO_TILES, addr: 6, vals: []
Cmd: .dh, val: 0, addr: 6, vals: ['0x0', '0x0']
Cmd: .data, val: PALETTE_START, addr: 8, vals: []
Cmd: .dh, val: 0, addr: 8, vals: ['0x0', '0x0']
Cmd: .data, val: PALETTE_SIZE, addr: 10, vals: []
Cmd: .dh, val: 16, addr: 10, vals: ['0x10', '0x0']
Cmd: .data, val: VIDEO_MEMORY_SIZE, addr: 12, vals: []
Cmd: .dh, val: 0, addr: 12, vals: ['0x0', '0x0']
Cmd: .data, val: VIDEO_PIXEL_WIDTH, addr: 14, vals: []
Cmd: .dh, val: 640, addr: 14, vals: ['0x80', '0x2']
Cmd: .data, val: VIDEO_PIXEL_HEIGHT, addr: 16, vals: []
Cmd: .dh, val: 480, addr: 16, vals: ['0xe0', '0x1']
Cmd: .data, val: FG_COLOR, addr: 18, vals: []
Cmd: .dh, val: 0, addr: 18, vals: ['0x0', '0x0']
Cmd: .data, val: BG_COLOR, addr: 20, vals: []
Cmd: .dh, val: 0, addr: 20, vals: ['0x0', '0x0']
Cmd: .data, val: CURSOR, addr: 22, vals: []
Cmd: .dh, val: 0, addr: 22, vals: ['0x0', '0x0']
Cmd: .data, val: CURSOR_X, addr: 24, vals: []
Cmd: .dh, val: 0, addr: 24, vals: ['0x0', '0x0']
Cmd: .data, val: CURSOR_Y, addr: 26, vals: []
Cmd: .dh, val: 0, addr: 26, vals: ['0x0', '0x0']
Cmd: .data, val: buffer, addr: 28, vals: []
Cmd: .db, val: 0, addr: 28, vals: ['0x0']
Cmd: .data, val: changed_index, addr: 29, vals: []
Cmd: .dh, val: 0, addr: 29, vals: ['0x0', '0x0']
Cmd: .data, val: changed, addr: 31, vals: []
Post array:
Cmd: .data, val: MEMORY_SIZE, addr: 0, vals: []
Cmd: .dh, val: 4096, addr: 0, vals: ['0x0', '0x10']
Cmd: .data, val: VIDEO_TILE_WIDTH, addr: 2, vals: []
Cmd: .dh, val: 40, addr: 2, vals: ['0x28', '0x0']
Cmd: .data, val: VIDEO_TILE_HEIGHT, addr: 4, vals: []
Cmd: .dh, val: 30, addr: 4, vals: ['0x1e', '0x0']
Cmd: .data, val: VIDEO_TILES, addr: 6, vals: []
Cmd: .dh, val: 0, addr: 6, vals: ['0x0', '0x0']
Cmd: .data, val: PALETTE_START, addr: 8, vals: []
Cmd: .dh, val: 0, addr: 8, vals: ['0x0', '0x0']
Cmd: .data, val: PALETTE_SIZE, addr: 10, vals: []
Cmd: .dh, val: 16, addr: 10, vals: ['0x10', '0x0']
Cmd: .data, val: VIDEO_MEMORY_SIZE, addr: 12, vals: []
Cmd: .dh, val: 0, addr: 12, vals: ['0x0', '0x0']
Cmd: .data, val: VIDEO_PIXEL_WIDTH, addr: 14, vals: []
Cmd: .dh, val: 640, addr: 14, vals: ['0x80', '0x2']
Cmd: .data, val: VIDEO_PIXEL_HEIGHT, addr: 16, vals: []
Cmd: .dh, val: 480, addr: 16, vals: ['0xe0', '0x1']
Cmd: .data, val: FG_COLOR, addr: 18, vals: []
Cmd: .dh, val: 0, addr: 18, vals: ['0x0', '0x0']
Cmd: .data, val: BG_COLOR, addr: 20, vals: []
Cmd: .dh, val: 0, addr: 20, vals: ['0x0', '0x0']
Cmd: .data, val: CURSOR, addr: 22, vals: []
Cmd: .dh, val: 0, addr: 22, vals: ['0x0', '0x0']
Cmd: .data, val: CURSOR_X, addr: 24, vals: []
Cmd: .dh, val: 0, addr: 24, vals: ['0x0', '0x0']
Cmd: .data, val: CURSOR_Y, addr: 26, vals: []
Cmd: .dh, val: 0, addr: 26, vals: ['0x0', '0x0']
Cmd: .data, val: buffer, addr: 28, vals: []
Cmd: .db, val: 0, addr: 28, vals: ['0x0']
Cmd: .data, val: changed_index, addr: 29, vals: []
Cmd: .dh, val: 0, addr: 29, vals: ['0x0', '0x0']
Cmd: .data, val: changed, addr: 31, vals: []
Cmd: .dh, val: 0, addr: 33, vals: ['0x0', '0x0']
Cmd: .dh, val: 0, addr: 35, vals: ['0x0', '0x0']
Cmd: .dh, val: 0, addr: 37, vals: ['0x0', '0x0']
Cmd: .dh, val: 0, addr: 39, vals: ['0x0', '0x0']
Cmd: .dh, val: 0, addr: 41, vals: ['0x0', '0x0']
Cmd: .dh, val: 0, addr: 43, vals: ['0x0', '0x0']
Cmd: .dh, val: 0, addr: 45, vals: ['0x0', '0x0']
Cmd: .dh, val: 0, addr: 47, vals: ['0x0', '0x0']
Cmd: .dh, val: 0, addr: 49, vals: ['0x0', '0x0']
Cmd: .dh, val: 0, addr: 51, vals: ['0x0', '0x0']
Cmd: .dh, val: 0, addr: 53, vals: ['0x0', '0x0']
Cmd: .dh, val: 0, addr: 55, vals: ['0x0', '0x0']
Cmd: .dh, val: 0, addr: 57, vals: ['0x0', '0x0']
Cmd: .dh, val: 0, addr: 59, vals: ['0x0', '0x0']
Cmd: .dh, val: 0, addr: 61, vals: ['0x0', '0x0']
Cmd: .dh, val: 0, addr: 63, vals: ['0x0', '0x0']
Cmd: .dh, val: 0, addr: 65, vals: ['0x0', '0x0']
Cmd: .dh, val: 0, addr: 67, vals: ['0x0', '0x0']
Cmd: .dh, val: 0, addr: 69, vals: ['0x0', '0x0']
Cmd: .dh, val: 0, addr: 71, vals: ['0x0', '0x0']
Cmd: .dh, val: 0, addr: 73, vals: ['0x0', '0x0']
Cmd: .dh, val: 0, addr: 75, vals: ['0x0', '0x0']
Cmd: .dh, val: 0, addr: 77, vals: ['0x0', '0x0']
Cmd: .dh, val: 0, addr: 79, vals: ['0x0', '0x0']
Cmd: .dh, val: 0, addr: 81, vals: ['0x0', '0x0']
Cmd: .dh, val: 0, addr: 83, vals: ['0x0', '0x0']
Cmd: .dh, val: 0, addr: 85, vals: ['0x0', '0x0']
Cmd: .dh, val: 0, addr: 87, vals: ['0x0', '0x0']
Cmd: .dh, val: 0, addr: 89, vals: ['0x0', '0x0']
Cmd: .dh, val: 0, addr: 91, vals: ['0x0', '0x0']
Cmd: .dh, val: 0, addr: 93, vals: ['0x0', '0x0']
Cmd: .dh, val: 0, addr: 95, vals: ['0x0', '0x0']
Cmd: .dh, val: 0, addr: 97, vals: ['0x0', '0x0']
Cmd: .dh, val: 0, addr: 99, vals: ['0x0', '0x0']
Cmd: .dh, val: 0, addr: 101, vals: ['0x0', '0x0']
Cmd: .dh, val: 0, addr: 103, vals: ['0x0', '0x0']
Cmd: .dh, val: 0, addr: 105, vals: ['0x0', '0x0']
Cmd: .dh, val: 0, addr: 107, vals: ['0x0', '0x0']
Cmd: .dh, val: 0, addr: 109, vals: ['0x0', '0x0']
Cmd: .dh, val: 0, addr: 111, vals: ['0x0', '0x0']
Cmd: .dh, val: 0, addr: 113, vals: ['0x0', '0x0']
Cmd: .dh, val: 0, addr: 115, vals: ['0x0', '0x0']
Cmd: .dh, val: 0, addr: 117, vals: ['0x0', '0x0']
Cmd: .dh, val: 0, addr: 119, vals: ['0x0', '0x0']
Cmd: .dh, val: 0, addr: 121, vals: ['0x0', '0x0']
Cmd: .dh, val: 0, addr: 123, vals: ['0x0', '0x0']
Cmd: .dh, val: 0, addr: 125, vals: ['0x0', '0x0']
Cmd: .dh, val: 0, addr: 127, vals: ['0x0', '0x0']
Cmd: .dh, val: 0, addr: 129, vals: ['0x0', '0x0']
Cmd: .dh, val: 0, addr: 131, vals: ['0x0', '0x0']
Cmd: .dh, val: 0, addr: 133, vals: ['0x0', '0x0']
Cmd: .dh, val: 0, addr: 135, vals: ['0x0', '0x0']
Cmd: .dh, val: 0, addr: 137, vals: ['0x0', '0x0']
Cmd: .dh, val: 0, addr: 139, vals: ['0x0', '0x0']
Cmd: .dh, val: 0, addr: 141, vals: ['0x0', '0x0']
Cmd: .dh, val: 0, addr: 143, vals: ['0x0', '0x0']
Cmd: .dh, val: 0, addr: 145, vals: ['0x0', '0x0']
Cmd: .dh, val: 0, addr: 147, vals: ['0x0', '0x0']
Cmd: .dh, val: 0, addr: 149, vals: ['0x0', '0x0']
Cmd: .dh, val: 0, addr: 151, vals: ['0x0', '0x0']
Cmd: .dh, val: 0, addr: 153, vals: ['0x0', '0x0']
Cmd: .dh, val: 0, addr: 155, vals: ['0x0', '0x0']
Cmd: .dh, val: 0, addr: 157, vals: ['0x0', '0x0']
['.data', 'SLEEP_MS_MULT']
['.dw', '7692']
(Code after 'store_data_memory')
 load[2] r0, NULL, VIDEO_TILE_WIDTH
load[2] r1, NULL, VIDEO_TILE_HEIGHT
mul r0, r0, r1
store[2] NULL, r0, VIDEO_TILES
load[2] r0, NULL, VIDEO_TILES
store[2] NULL, r0, PALETTE_START
load[2] r0, NULL, VIDEO_TILES
load[2] r2, NULL, PALETTE_SIZE
add r0, r0, r2
store[2] NULL, r0, VIDEO_MEMORY_SIZE
subi SP, SP, 1
call main
subi SP, SP, 2
__halt:
rjmp __halt
in:
move BP, SP
load[2] r0, BP, 2
subi SP, SP, 4
load[4] r1, BP, -4
in r1, 0
move RR, r1
addi SP, SP, 4
ret
out:
move BP, SP
load[4] r0, BP, 4
load[2] r1, BP, 10
out 0, r0
store[4] BP, r0, 4
move RR, NULL
ret
vga_write:
move BP, SP
load[2] r0, BP, 4
load[2] r1, BP, 6
vgaw r1, r0, 0
store[2] BP, r1, 6
move RR, NULL
ret
outside_bound:
move BP, SP
load[2] r0, BP, 2
load[2] r1, BP, 4
load[2] r2, BP, 6
cmp r0, r2
brge L0
addi r0, NULL, 0
rjmp L1
L0:
addi r0, NULL, 1
L1:
load[2] r3, BP, 2
cmp r3, r1
brlt L2
addi r3, NULL, 0
rjmp L3
L2:
addi r3, NULL, 1
L3:
or r0, r0, r3
move RR, r0
ret
left_shift_l:
move BP, SP
load[4] r0, BP, 4
load[2] r1, BP, 10
L4:
load[2] r0, BP, 10
cmpi r0, 0
brgt L6
addi r0, NULL, 0
rjmp L7
L6:
addi r0, NULL, 1
L7:
cmpi r0, 0
breq L5
load[4] r1, BP, 4
lsl[4] r1, r1
load[2] r2, BP, 10
subi r2, r2, 1
store[4] BP, r1, 4
store[2] BP, r2, 10
rjmp L4
L5:
load[4] r0, BP, 4
move RR, r0
ret
right_shift_l:
move BP, SP
load[4] r0, BP, 4
load[2] r1, BP, 10
L8:
load[2] r0, BP, 10
cmpi r0, 0
brgt L10
addi r0, NULL, 0
rjmp L11
L10:
addi r0, NULL, 1
L11:
cmpi r0, 0
breq L9
load[4] r1, BP, 4
lsr[4] r1, r1
load[2] r2, BP, 10
subi r2, r2, 1
store[4] BP, r1, 4
store[2] BP, r2, 10
rjmp L8
L9:
load[4] r0, BP, 4
move RR, r0
ret
left_shift_i:
move BP, SP
load[2] r0, BP, 4
load[2] r1, BP, 6
L12:
load[2] r0, BP, 6
cmpi r0, 0
brgt L14
addi r0, NULL, 0
rjmp L15
L14:
addi r0, NULL, 1
L15:
cmpi r0, 0
breq L13
load[2] r1, BP, 4
lsl[2] r1, r1
load[2] r2, BP, 6
subi r2, r2, 1
store[2] BP, r1, 4
store[2] BP, r2, 6
rjmp L12
L13:
load[2] r0, BP, 4
move RR, r0
ret
right_shift_i:
move BP, SP
load[2] r0, BP, 4
load[2] r1, BP, 6
L16:
load[2] r0, BP, 6
cmpi r0, 0
brgt L18
addi r0, NULL, 0
rjmp L19
L18:
addi r0, NULL, 1
L19:
cmpi r0, 0
breq L17
load[2] r1, BP, 4
lsr[2] r1, r1
load[2] r2, BP, 6
subi r2, r2, 1
store[2] BP, r1, 4
store[2] BP, r2, 6
rjmp L16
L17:
load[2] r0, BP, 4
move RR, r0
ret
left_shift_c:
move BP, SP
load[1] r0, BP, 5
load[2] r1, BP, 6
L20:
load[2] r0, BP, 6
cmpi r0, 0
brgt L22
addi r0, NULL, 0
rjmp L23
L22:
addi r0, NULL, 1
L23:
cmpi r0, 0
breq L21
load[1] r1, BP, 5
lsl[1] r1, r1
load[2] r2, BP, 6
subi r2, r2, 1
store[1] BP, r1, 5
store[2] BP, r2, 6
rjmp L20
L21:
load[1] r0, BP, 5
move RR, r0
ret
right_shift_c:
move BP, SP
load[1] r0, BP, 5
load[2] r1, BP, 6
L24:
load[2] r0, BP, 6
cmpi r0, 0
brgt L26
addi r0, NULL, 0
rjmp L27
L26:
addi r0, NULL, 1
L27:
cmpi r0, 0
breq L25
load[1] r1, BP, 5
lsr[1] r1, r1
load[2] r2, BP, 6
subi r2, r2, 1
store[1] BP, r1, 5
store[2] BP, r2, 6
rjmp L24
L25:
load[1] r0, BP, 5
move RR, r0
ret
divide:
move BP, SP
load[2] r0, BP, 4
load[2] r1, BP, 6
subi SP, SP, 2
subi SP, SP, 2
addi r2, NULL, 0
store[2] BP, r0, -2
store[2] BP, r2, -4
L28:
load[2] r0, BP, -2
load[2] r1, BP, 6
cmp r0, r1
brgt L30
addi r0, NULL, 0
rjmp L31
L30:
addi r0, NULL, 1
L31:
cmpi r0, 0
breq L29
load[2] r2, BP, -2
sub r2, r2, r1
load[2] r3, BP, -4
addi r3, r3, 1
store[2] BP, r2, -2
store[2] BP, r3, -4
rjmp L28
L29:
subi SP, SP, 4
load[2] r0, BP, -4
push[2] BP
subi SP, SP, 2
addi r1, NULL, 16
push[2] r1
subi SP, SP, 2
push[4] r0
store[4] BP, r0, -8
subi SP, SP, 2
call left_shift_l
addi SP, SP, 12
pop[2] BP
move r0, RR
store[4] BP, r0, -8
load[2] r1, BP, -2
add r0, r0, r1
move RR, r0
addi SP, SP, 8
ret
tile_index_write:
move BP, SP
load[2] r0, BP, 4
load[2] r3, BP, 6
load[2] r4, NULL, VIDEO_TILES
cmp r3, r4
brge L32
addi r3, NULL, 0
rjmp L33
L32:
addi r3, NULL, 1
L33:
cmpi r3, 0
breq L34
addi RR, NULL, 0
ret
rjmp L35
L34:
L35:
push[2] BP
subi SP, SP, 2
load[2] r0, BP, 6
push[2] r0
load[2] r1, BP, 4
push[2] r1
subi SP, SP, 2
call vga_write
addi SP, SP, 8
pop[2] BP
addi RR, NULL, 1
ret
tile_coord_write:
move BP, SP
load[4] r0, BP, 4
load[2] r1, BP, 8
load[2] r2, BP, 10
load[2] r3, NULL, VIDEO_PIXEL_WIDTH
cmp r1, r3
brge L36
addi r1, NULL, 0
rjmp L37
L36:
addi r1, NULL, 1
L37:
load[2] r4, NULL, VIDEO_PIXEL_HEIGHT
cmp r2, r4
brge L38
addi r2, NULL, 0
rjmp L39
L38:
addi r2, NULL, 1
L39:
or r1, r1, r2
cmpi r1, 0
breq L40
addi RR, NULL, 0
ret
rjmp L41
L40:
L41:
subi SP, SP, 2
load[2] r0, BP, 8
load[2] r1, NULL, VIDEO_PIXEL_WIDTH
load[2] r2, BP, 10
mul r1, r1, r2
add r0, r0, r1
push[2] BP
push[2] r0
load[4] r3, BP, 4
push[2] r3
store[2] BP, r0, -2
subi SP, SP, 2
call vga_write
addi SP, SP, 6
pop[2] BP
addi RR, NULL, 1
addi SP, SP, 2
ret
palette_index_write:
move BP, SP
load[2] r0, BP, 2
load[2] r1, BP, 4
load[2] r2, BP, 6
load[2] r3, NULL, PALETTE_SIZE
cmp r0, r3
brge L42
addi r0, NULL, 0
rjmp L43
L42:
addi r0, NULL, 1
L43:
cmpi r0, 0
breq L44
addi RR, NULL, 0
ret
rjmp L45
L44:
L45:
subi SP, SP, 2
load[2] r0, NULL, PALETTE_START
load[2] r1, BP, 2
add r0, r0, r1
subi SP, SP, 2
load[2] r2, BP, 4
push[2] BP
subi SP, SP, 2
addi r3, NULL, 8
push[2] r3
load[2] r3, BP, 4
push[2] r3
store[2] BP, r0, -2
store[2] BP, r2, -4
subi SP, SP, 2
call left_shift_i
addi SP, SP, 8
pop[2] BP
move r0, RR
store[2] BP, r0, -4
load[2] r1, BP, 6
add r0, r0, r1
push[2] BP
subi SP, SP, 2
load[2] r2, BP, -2
push[2] r2
push[2] r0
store[2] BP, r0, -4
subi SP, SP, 2
call vga_write
addi SP, SP, 8
pop[2] BP
addi RR, NULL, 1
addi SP, SP, 4
ret
set_cursor:
move BP, SP
load[1] r0, BP, 2
load[1] r1, BP, 3
load[2] r2, NULL, VIDEO_TILE_WIDTH
cmp r0, r2
brge L46
addi r0, NULL, 0
rjmp L47
L46:
addi r0, NULL, 1
L47:
load[2] r3, NULL, VIDEO_TILE_HEIGHT
cmp r1, r3
brge L48
addi r1, NULL, 0
rjmp L49
L48:
addi r1, NULL, 1
L49:
or r0, r0, r1
cmpi r0, 0
breq L50
addi RR, NULL, 0
ret
rjmp L51
L50:
L51:
load[1] r0, BP, 2
move r1, r0
load[1] r2, BP, 3
move r3, r2
add r0, r0, r2
load[2] r4, NULL, VIDEO_TILE_WIDTH
mul r0, r0, r4
store[2] NULL, r0, CURSOR
store[2] NULL, r1, CURSOR_X
store[2] NULL, r3, CURSOR_Y
addi RR, NULL, 1
ret
advance_cursor:
move BP, SP
load[2] r0, NULL, CURSOR
addi r0, r0, 1
store[2] NULL, r0, CURSOR
load[2] r1, NULL, VIDEO_TILES
cmp r0, r1
brlt L52
addi r0, NULL, 0
rjmp L53
L52:
addi r0, NULL, 1
L53:
cmpi r0, 0
breq L54
load[2] r0, NULL, CURSOR_X
addi r0, r0, 1
store[2] NULL, r0, CURSOR_X
load[2] r1, NULL, VIDEO_TILE_WIDTH
cmp r0, r1
brge L56
addi r0, NULL, 0
rjmp L57
L56:
addi r0, NULL, 1
L57:
cmpi r0, 0
breq L58
addi r0, NULL, 0
load[2] r1, NULL, CURSOR_Y
addi r1, r1, 1
store[2] NULL, r0, CURSOR_X
store[2] NULL, r1, CURSOR_Y
rjmp L59
L58:
L59:
rjmp L55
L54:
addi r0, NULL, 0
addi r1, NULL, 0
addi r2, NULL, 0
store[2] NULL, r0, CURSOR
store[2] NULL, r1, CURSOR_X
store[2] NULL, r2, CURSOR_Y
L55:
move RR, NULL
ret
back_cursor:
move BP, SP
load[2] r0, NULL, CURSOR
cmpi r0, 0
breq L60
addi r0, NULL, 0
rjmp L61
L60:
addi r0, NULL, 1
L61:
cmpi r0, 0
breq L62
addi RR, NULL, 0
ret
rjmp L63
L62:
L63:
load[2] r0, NULL, CURSOR
subi r0, r0, 1
store[2] NULL, r0, CURSOR
load[2] r1, NULL, VIDEO_TILES
cmp r0, r1
brlt L64
addi r0, NULL, 0
rjmp L65
L64:
addi r0, NULL, 1
L65:
cmpi r0, 0
breq L66
load[2] r0, NULL, CURSOR_X
subi r0, r0, 1
store[2] NULL, r0, CURSOR_X
cmpi r0, 0
brlt L68
addi r0, NULL, 0
rjmp L69
L68:
addi r0, NULL, 1
L69:
cmpi r0, 0
breq L70
addi r0, NULL, 0
load[2] r1, NULL, CURSOR_Y
subi r1, r1, 1
store[2] NULL, r0, CURSOR_X
store[2] NULL, r1, CURSOR_Y
rjmp L71
L70:
L71:
rjmp L67
L66:
load[2] r0, NULL, VIDEO_TILES
subi r0, r0, 1
load[2] r1, NULL, VIDEO_TILE_WIDTH
move r2, r1
load[2] r3, NULL, VIDEO_TILE_HEIGHT
move r4, r3
store[2] NULL, r0, CURSOR
store[2] NULL, r2, CURSOR_X
store[2] NULL, r4, CURSOR_Y
L67:
move RR, NULL
ret
advance_steps:
move BP, SP
load[2] r0, BP, 2
load[2] r1, NULL, VIDEO_TILES
cmp r0, r1
brge L72
addi r0, NULL, 0
rjmp L73
L72:
addi r0, NULL, 1
L73:
cmpi r0, 0
breq L74
addi RR, NULL, 0
ret
rjmp L75
L74:
L75:
load[2] r0, NULL, CURSOR
load[2] r1, BP, 2
add r0, r0, r1
store[2] NULL, r0, CURSOR
load[2] r2, NULL, VIDEO_TILES
cmp r0, r2
brge L76
addi r0, NULL, 0
rjmp L77
L76:
addi r0, NULL, 1
L77:
cmpi r0, 0
breq L78
load[2] r0, NULL, CURSOR
load[2] r1, NULL, VIDEO_TILES
sub r0, r0, r1
store[2] NULL, r0, CURSOR
rjmp L79
L78:
L79:
subi SP, SP, 4
push[2] BP
subi SP, SP, 2
load[2] r0, NULL, VIDEO_TILE_WIDTH
push[2] r0
load[2] r1, NULL, CURSOR
push[2] r1
subi SP, SP, 2
call divide
addi SP, SP, 8
pop[2] BP
move r0, RR
subi SP, SP, 4
push[2] BP
subi SP, SP, 2
load[2] r1, NULL, VIDEO_TILE_HEIGHT
push[2] r1
load[2] r2, NULL, CURSOR
push[2] r2
store[4] BP, r0, -4
subi SP, SP, 2
call divide
addi SP, SP, 8
pop[2] BP
move r0, RR
push[2] BP
subi SP, SP, 2
addi r1, NULL, 16
push[2] r1
load[4] r1, BP, -4
subi SP, SP, 2
push[4] r1
store[4] BP, r0, -8
subi SP, SP, 2
call right_shift_l
addi SP, SP, 12
pop[2] BP
move r0, RR
push[2] BP
subi SP, SP, 2
addi r1, NULL, 16
push[2] r1
load[4] r1, BP, -8
subi SP, SP, 2
push[4] r1
store[2] NULL, r0, CURSOR_X
subi SP, SP, 2
call right_shift_l
addi SP, SP, 12
pop[2] BP
move r0, RR
store[2] NULL, r0, CURSOR_Y
addi RR, NULL, 1
addi SP, SP, 8
ret
advance_line:
move BP, SP
load[2] r0, NULL, CURSOR_Y
addi r0, r0, 1
store[2] NULL, r0, CURSOR_Y
load[2] r1, NULL, VIDEO_TILE_HEIGHT
cmp r0, r1
brlt L80
addi r0, NULL, 0
rjmp L81
L80:
addi r0, NULL, 1
L81:
cmpi r0, 0
breq L82
load[2] r0, NULL, VIDEO_TILE_WIDTH
load[2] r1, NULL, CURSOR_Y
mul r0, r0, r1
load[2] r2, NULL, CURSOR_X
add r0, r0, r2
store[2] NULL, r0, CURSOR
rjmp L83
L82:
load[2] r0, NULL, CURSOR_X
move r1, r0
addi r2, NULL, 0
store[2] NULL, r1, CURSOR
store[2] NULL, r2, CURSOR_Y
L83:
move RR, NULL
ret
back_line:
move BP, SP
load[2] r0, NULL, CURSOR_Y
subi r0, r0, 1
store[2] NULL, r0, CURSOR_Y
cmpi r0, 0
brge L84
addi r0, NULL, 0
rjmp L85
L84:
addi r0, NULL, 1
L85:
cmpi r0, 0
breq L86
load[2] r0, NULL, VIDEO_TILE_WIDTH
load[2] r1, NULL, CURSOR_Y
mul r0, r0, r1
load[2] r2, NULL, CURSOR_X
add r0, r0, r2
store[2] NULL, r0, CURSOR
rjmp L87
L86:
load[2] r0, NULL, CURSOR_X
move r1, r0
load[2] r2, NULL, VIDEO_TILE_HEIGHT
subi r2, r2, 1
store[2] NULL, r1, CURSOR
store[2] NULL, r2, CURSOR_Y
L87:
move RR, NULL
ret
new_line:
move BP, SP
load[2] r0, NULL, CURSOR_Y
addi r0, r0, 1
store[2] NULL, r0, CURSOR_Y
load[2] r1, NULL, VIDEO_TILE_HEIGHT
cmp r0, r1
brlt L88
addi r0, NULL, 0
rjmp L89
L88:
addi r0, NULL, 1
L89:
cmpi r0, 0
breq L90
load[2] r0, NULL, VIDEO_TILE_WIDTH
load[2] r1, NULL, CURSOR_Y
mul r0, r0, r1
store[2] NULL, r0, CURSOR
rjmp L91
L90:
addi r0, NULL, 0
addi r1, NULL, 0
store[2] NULL, r0, CURSOR
store[2] NULL, r1, CURSOR_Y
L91:
addi r0, NULL, 0
store[2] NULL, r0, CURSOR_X
move RR, NULL
ret
print_c_at:
move BP, SP
load[1] r0, BP, 5
load[2] r1, BP, 6
load[2] r2, NULL, FG_COLOR
load[2] r3, NULL, PALETTE_SIZE
cmp r2, r3
brge L92
addi r2, NULL, 0
rjmp L93
L92:
addi r2, NULL, 1
L93:
load[2] r4, NULL, BG_COLOR
cmp r4, r3
brge L94
addi r4, NULL, 0
rjmp L95
L94:
addi r4, NULL, 1
L95:
or r2, r2, r4
cmpi r2, 0
breq L96
addi RR, NULL, 0
ret
rjmp L97
L96:
L97:
subi SP, SP, 2
load[2] r0, NULL, FG_COLOR
push[2] BP
addi r1, NULL, 4
push[2] r1
push[2] r0
store[2] BP, r0, -2
subi SP, SP, 2
call left_shift_i
addi SP, SP, 6
pop[2] BP
move r0, RR
store[2] BP, r0, -2
load[2] r1, NULL, BG_COLOR
add r0, r0, r1
push[2] BP
addi r2, NULL, 8
push[2] r2
push[2] r0
store[2] BP, r0, -2
subi SP, SP, 2
call left_shift_i
addi SP, SP, 6
pop[2] BP
move r0, RR
subi SP, SP, 2
load[1] r1, BP, 5
store[2] BP, r1, -4
add r1, r1, r0
push[2] BP
subi SP, SP, 2
load[2] r2, BP, 6
push[2] r2
push[2] r1
store[2] BP, r0, -2
store[2] BP, r1, -4
subi SP, SP, 2
call tile_index_write
addi SP, SP, 8
pop[2] BP
addi SP, SP, 4
ret
print_c_at_pos:
move BP, SP
load[1] r0, BP, 3
load[2] r1, BP, 4
load[2] r2, BP, 6
push[2] BP
subi SP, SP, 2
load[2] r3, NULL, VIDEO_TILE_WIDTH
mul r3, r3, r2
add r1, r1, r3
push[2] r1
push[1] r0
subi SP, SP, 3
call print_c_at
addi SP, SP, 8
pop[2] BP
ret
print_c:
move BP, SP
load[1] r0, BP, 3
push[2] BP
subi SP, SP, 2
load[2] r1, NULL, CURSOR
push[2] r1
push[1] r0
subi SP, SP, 3
call print_c_at
addi SP, SP, 8
pop[2] BP
cmpi RR, 0
breq L98
push[2] BP
call advance_cursor
pop[2] BP
addi RR, NULL, 1
ret
rjmp L99
L98:
L99:
addi RR, NULL, 0
ret
print:
move BP, SP
load[2] r0, BP, 2
L100:
load[2] r0, BP, 2
load[1] r0, r0, 0
cmpi r0, 0
breq L101
push[2] BP
subi SP, SP, 2
load[2] r1, BP, 2
load[1] r1, r1, 0
push[1] r1
subi SP, SP, 1
call print_c
addi SP, SP, 4
pop[2] BP
load[2] r0, BP, 2
addi r0, r0, 1
store[2] BP, r0, 2
rjmp L100
L101:
move RR, NULL
ret
clear:
move BP, SP
subi SP, SP, 2
addi r0, NULL, 0
store[2] BP, r0, -2
L102:
load[2] r0, BP, -2
load[2] r1, NULL, VIDEO_TILES
cmp r0, r1
brlt L104
addi r0, NULL, 0
rjmp L105
L104:
addi r0, NULL, 1
L105:
cmpi r0, 0
breq L103
push[2] BP
load[2] r2, BP, -2
push[2] r2
addi r3, NULL, 0
push[2] r3
subi SP, SP, 2
call tile_index_write
addi SP, SP, 6
pop[2] BP
rjmp L102
L103:
addi r0, NULL, 0
addi r1, NULL, 0
addi r2, NULL, 0
addi SP, SP, 2
store[2] NULL, r0, CURSOR
store[2] NULL, r1, CURSOR_X
store[2] NULL, r2, CURSOR_Y
move RR, NULL
ret
memset:
move BP, SP
load[2] r0, BP, 2
load[2] r1, BP, 4
load[1] r2, BP, 7
subi SP, SP, 2
addi r3, NULL, 0
store[2] BP, r3, -2
L106:
load[2] r0, BP, -2
load[2] r1, BP, 4
cmp r0, r1
brlt L108
addi r0, NULL, 0
rjmp L109
L108:
addi r0, NULL, 1
L109:
cmpi r0, 0
breq L107
load[2] r2, BP, 2
load[2] r3, BP, -2
addi r4, NULL, 1
mul r3, r3, r4
add r2, r2, r3
load[1] r4, BP, 7
store[1] r2, r4, 0
addi r3, r3, 1
store[2] BP, r3, -2
rjmp L106
L107:
addi SP, SP, 2
move RR, NULL
ret
add_changed:
move BP, SP
load[2] r0, BP, 2
addi r1, NULL, changed
load[2] r2, NULL, changed_index
addi r3, NULL, 2
mul r2, r2, r3
add r1, r1, r2
store[2] r1, r0, 0
addi r2, r2, 1
store[2] NULL, r2, changed_index
move RR, NULL
ret
calc_next_gen:
move BP, SP
subi SP, SP, 2
addi r0, NULL, 0
subi SP, SP, 2
addi r1, NULL, 0
subi SP, SP, 2
addi r2, NULL, 0
store[2] BP, r0, -2
store[2] BP, r1, -4
store[2] BP, r2, -6
L110:
load[2] r0, BP, -2
load[2] r1, NULL, VIDEO_TILES
cmp r0, r1
brlt L112
addi r0, NULL, 0
rjmp L113
L112:
addi r0, NULL, 1
L113:
cmpi r0, 0
breq L111
subi SP, SP, 2
addi r2, NULL, 0
subi SP, SP, 2
addi r3, NULL, -1
subi SP, SP, 2
addi r4, NULL, -1
store[2] BP, r2, -8
store[2] BP, r3, -10
store[2] BP, r4, -12
L114:
load[2] r0, BP, -12
cmpi r0, 2
brlt L116
addi r0, NULL, 0
rjmp L117
L116:
addi r0, NULL, 1
L117:
cmpi r0, 0
breq L115
L118:
load[2] r0, BP, -10
cmpi r0, 2
brlt L120
addi r0, NULL, 0
rjmp L121
L120:
addi r0, NULL, 1
L121:
cmpi r0, 0
breq L119
subi SP, SP, 2
load[2] r1, BP, -4
load[2] r2, BP, -10
add r1, r1, r2
subi SP, SP, 2
load[2] r3, BP, -6
load[2] r4, BP, -12
add r3, r3, r4
store[2] BP, r1, -14
load[2] r5, NULL, VIDEO_TILE_WIDTH
cmp r1, r5
brge L122
addi r1, NULL, 0
rjmp L123
L122:
addi r1, NULL, 1
L123:
store[2] BP, r3, -16
cmpi r1, 0
breq L124
addi r0, NULL, 0
store[2] BP, r0, -14
rjmp L125
L124:
load[2] r0, BP, -14
load[2] r1, NULL, VIDEO_TILE_WIDTH
cmp r0, r1
brle L126
addi r0, NULL, 0
rjmp L127
L126:
addi r0, NULL, 1
L127:
cmpi r0, 0
breq L128
load[2] r0, NULL, VIDEO_TILE_WIDTH
subi r0, r0, 1
store[2] BP, r0, -14
rjmp L129
L128:
L129:
L125:
load[2] r0, BP, -16
load[2] r1, NULL, VIDEO_TILE_HEIGHT
cmp r0, r1
brge L130
addi r0, NULL, 0
rjmp L131
L130:
addi r0, NULL, 1
L131:
cmpi r0, 0
breq L132
addi r0, NULL, 0
store[2] BP, r0, -16
rjmp L133
L132:
load[2] r0, BP, -14
load[2] r1, NULL, VIDEO_TILE_WIDTH
cmp r0, r1
brle L134
addi r0, NULL, 0
rjmp L135
L134:
addi r0, NULL, 1
L135:
cmpi r0, 0
breq L136
load[2] r0, NULL, VIDEO_TILE_HEIGHT
subi r0, r0, 1
store[2] BP, r0, -16
rjmp L137
L136:
L137:
L133:
subi SP, SP, 2
load[2] r0, BP, -14
load[2] r1, NULL, VIDEO_TILE_WIDTH
load[2] r2, BP, -16
mul r1, r1, r2
add r0, r0, r1
load[2] r3, BP, -8
addi r4, NULL, buffer
store[2] BP, r0, -18
add r0, r4, r0
load[1] r0, r0, 0
add r3, r3, r0
load[2] r5, BP, -10
addi r5, r5, 1
addi SP, SP, 6
store[2] BP, r3, -8
store[2] BP, r5, -10
rjmp L118
L119:
load[2] r0, BP, -12
addi r0, r0, 1
store[2] BP, r0, -12
rjmp L114
L115:
addi r0, NULL, buffer
load[2] r1, BP, -2
add r1, r0, r1
load[1] r1, r1, 0
cmpi r1, 1
breq L138
addi r1, NULL, 0
rjmp L139
L138:
addi r1, NULL, 1
L139:
cmpi r1, 0
breq L140
load[2] r0, BP, -8
cmpi r0, 2
brlt L142
addi r0, NULL, 0
rjmp L143
L142:
addi r0, NULL, 1
L143:
load[2] r1, BP, -8
cmpi r1, 3
brgt L144
addi r1, NULL, 0
rjmp L145
L144:
addi r1, NULL, 1
L145:
or r0, r0, r1
cmpi r0, 0
breq L146
push[2] BP
subi SP, SP, 2
load[2] r0, BP, -2
push[2] r0
call add_changed
addi SP, SP, 4
pop[2] BP
rjmp L147
L146:
L147:
rjmp L141
L140:
load[2] r0, BP, -8
cmpi r0, 3
breq L148
addi r0, NULL, 0
rjmp L149
L148:
addi r0, NULL, 1
L149:
cmpi r0, 0
breq L150
push[2] BP
subi SP, SP, 2
load[2] r0, BP, -2
push[2] r0
call add_changed
addi SP, SP, 4
pop[2] BP
rjmp L151
L150:
L151:
L141:
load[2] r0, BP, -4
addi r0, r0, 1
load[2] r1, BP, -2
addi r1, r1, 1
store[2] BP, r0, -4
load[2] r2, NULL, VIDEO_TILE_WIDTH
cmp r0, r2
brge L152
addi r0, NULL, 0
rjmp L153
L152:
addi r0, NULL, 1
L153:
store[2] BP, r1, -2
cmpi r0, 0
breq L154
addi r0, NULL, 0
store[2] BP, r0, -4
rjmp L155
L154:
L155:
addi SP, SP, 6
rjmp L110
L111:
addi SP, SP, 6
move RR, NULL
ret
print_board:
move BP, SP
subi SP, SP, 2
addi r0, NULL, 0
store[2] BP, r0, -2
L156:
load[2] r0, BP, -2
load[2] r1, NULL, VIDEO_TILES
cmp r0, r1
brlt L158
addi r0, NULL, 0
rjmp L159
L158:
addi r0, NULL, 1
L159:
cmpi r0, 0
breq L157
addi r2, NULL, buffer
load[2] r3, BP, -2
add r3, r2, r3
load[1] r3, r3, 0
cmpi r3, 0
breq L160
push[2] BP
load[2] r0, BP, -2
push[2] r0
addi r1, NULL, 43
push[2] r1
subi SP, SP, 2
call vga_write
addi SP, SP, 6
pop[2] BP
rjmp L161
L160:
push[2] BP
load[2] r0, BP, -2
push[2] r0
addi r1, NULL, 32
push[2] r1
subi SP, SP, 2
call vga_write
addi SP, SP, 6
pop[2] BP
L161:
rjmp L156
L157:
addi SP, SP, 2
move RR, NULL
ret
update_changed:
move BP, SP
subi SP, SP, 2
addi r0, NULL, 0
store[2] BP, r0, -2
L162:
load[2] r0, BP, -2
load[2] r1, NULL, changed_index
cmp r0, r1
brlt L164
addi r0, NULL, 0
rjmp L165
L164:
addi r0, NULL, 1
L165:
cmpi r0, 0
breq L163
subi SP, SP, 2
addi r2, NULL, changed
load[2] r3, BP, -2
addi r4, NULL, 2
mul r3, r3, r4
add r3, r2, r3
load[2] r3, r3, 0
addi r4, NULL, buffer
store[2] BP, r3, -4
add r3, r4, r3
load[1] r3, r3, 0
cmpi r3, 0
breq L166
addi r0, NULL, buffer
load[2] r1, BP, -4
addi r2, NULL, 1
mul r1, r1, r2
add r0, r0, r1
addi r2, NULL, 0
store[1] r0, r2, 0
rjmp L167
L166:
addi r0, NULL, buffer
load[2] r1, BP, -4
addi r2, NULL, 1
mul r1, r1, r2
add r0, r0, r1
addi r2, NULL, 1
store[1] r0, r2, 0
L167:
addi SP, SP, 2
rjmp L162
L163:
addi r0, NULL, 0
addi SP, SP, 2
store[2] NULL, r0, changed_index
move RR, NULL
ret
sleep_ms:
move BP, SP
load[4] r0, BP, 4
subi SP, SP, 4
load[4] r1, NULL, SLEEP_MS_MULT
mul r0, r0, r1
subi SP, SP, 4
addi r2, NULL, 0
store[4] BP, r0, -4
store[4] BP, r2, -8
L168:
load[4] r0, BP, -8
load[4] r1, BP, -4
cmp r0, r1
brlt L170
addi r0, NULL, 0
rjmp L171
L170:
addi r0, NULL, 1
L171:
cmpi r0, 0
breq L169
load[4] r2, BP, -8
addi r2, r2, 1
store[4] BP, r2, -8
rjmp L168
L169:
addi SP, SP, 8
move RR, NULL
ret
next_gen:
move BP, SP
push[2] BP
call calc_next_gen
pop[2] BP
push[2] BP
call update_changed
pop[2] BP
move RR, NULL
ret
main:
move BP, SP
push[2] BP
subi SP, SP, 2
addi r0, NULL, 0
push[1] r0
load[2] r0, NULL, VIDEO_TILES
subi SP, SP, 1
push[2] r0
addi r1, NULL, buffer
push[2] r1
call memset
addi SP, SP, 8
pop[2] BP
addi r0, NULL, buffer
addi r0, r0, 41
addi r1, NULL, 1
store[1] r0, r1, 0
addi r0, NULL, buffer
addi r0, r0, 82
addi r1, NULL, 1
store[1] r0, r1, 0
addi r0, NULL, buffer
addi r0, r0, 121
addi r1, NULL, 1
store[1] r0, r1, 0
addi r0, NULL, buffer
addi r0, r0, 122
addi r1, NULL, 1
store[1] r0, r1, 0
addi r0, NULL, buffer
addi r0, r0, 123
addi r1, NULL, 1
store[1] r0, r1, 0
push[2] BP
call print_board
pop[2] BP
L172:
push[2] BP
subi SP, SP, 2
addi r0, NULL, 500
push[4] r0
subi SP, SP, 2
call sleep_ms
addi SP, SP, 8
pop[2] BP
push[2] BP
call next_gen
pop[2] BP
rjmp L172
L173:
move RR, NULL
ret
(Pre replace_halts)
(Code after 'replace_halts')
 load[2] r0, NULL, VIDEO_TILE_WIDTH
load[2] r1, NULL, VIDEO_TILE_HEIGHT
mul r0, r0, r1
store[2] NULL, r0, VIDEO_TILES
load[2] r0, NULL, VIDEO_TILES
store[2] NULL, r0, PALETTE_START
load[2] r0, NULL, VIDEO_TILES
load[2] r2, NULL, PALETTE_SIZE
add r0, r0, r2
store[2] NULL, r0, VIDEO_MEMORY_SIZE
subi SP, SP, 1
call main
subi SP, SP, 2
__halt:
rjmp __halt
in:
move BP, SP
load[2] r0, BP, 2
subi SP, SP, 4
load[4] r1, BP, -4
in r1, 0
move RR, r1
addi SP, SP, 4
ret
out:
move BP, SP
load[4] r0, BP, 4
load[2] r1, BP, 10
out 0, r0
store[4] BP, r0, 4
move RR, NULL
ret
vga_write:
move BP, SP
load[2] r0, BP, 4
load[2] r1, BP, 6
vgaw r1, r0, 0
store[2] BP, r1, 6
move RR, NULL
ret
outside_bound:
move BP, SP
load[2] r0, BP, 2
load[2] r1, BP, 4
load[2] r2, BP, 6
cmp r0, r2
brge L0
addi r0, NULL, 0
rjmp L1
L0:
addi r0, NULL, 1
L1:
load[2] r3, BP, 2
cmp r3, r1
brlt L2
addi r3, NULL, 0
rjmp L3
L2:
addi r3, NULL, 1
L3:
or r0, r0, r3
move RR, r0
ret
left_shift_l:
move BP, SP
load[4] r0, BP, 4
load[2] r1, BP, 10
L4:
load[2] r0, BP, 10
cmpi r0, 0
brgt L6
addi r0, NULL, 0
rjmp L7
L6:
addi r0, NULL, 1
L7:
cmpi r0, 0
breq L5
load[4] r1, BP, 4
lsl[4] r1, r1
load[2] r2, BP, 10
subi r2, r2, 1
store[4] BP, r1, 4
store[2] BP, r2, 10
rjmp L4
L5:
load[4] r0, BP, 4
move RR, r0
ret
right_shift_l:
move BP, SP
load[4] r0, BP, 4
load[2] r1, BP, 10
L8:
load[2] r0, BP, 10
cmpi r0, 0
brgt L10
addi r0, NULL, 0
rjmp L11
L10:
addi r0, NULL, 1
L11:
cmpi r0, 0
breq L9
load[4] r1, BP, 4
lsr[4] r1, r1
load[2] r2, BP, 10
subi r2, r2, 1
store[4] BP, r1, 4
store[2] BP, r2, 10
rjmp L8
L9:
load[4] r0, BP, 4
move RR, r0
ret
left_shift_i:
move BP, SP
load[2] r0, BP, 4
load[2] r1, BP, 6
L12:
load[2] r0, BP, 6
cmpi r0, 0
brgt L14
addi r0, NULL, 0
rjmp L15
L14:
addi r0, NULL, 1
L15:
cmpi r0, 0
breq L13
load[2] r1, BP, 4
lsl[2] r1, r1
load[2] r2, BP, 6
subi r2, r2, 1
store[2] BP, r1, 4
store[2] BP, r2, 6
rjmp L12
L13:
load[2] r0, BP, 4
move RR, r0
ret
right_shift_i:
move BP, SP
load[2] r0, BP, 4
load[2] r1, BP, 6
L16:
load[2] r0, BP, 6
cmpi r0, 0
brgt L18
addi r0, NULL, 0
rjmp L19
L18:
addi r0, NULL, 1
L19:
cmpi r0, 0
breq L17
load[2] r1, BP, 4
lsr[2] r1, r1
load[2] r2, BP, 6
subi r2, r2, 1
store[2] BP, r1, 4
store[2] BP, r2, 6
rjmp L16
L17:
load[2] r0, BP, 4
move RR, r0
ret
left_shift_c:
move BP, SP
load[1] r0, BP, 5
load[2] r1, BP, 6
L20:
load[2] r0, BP, 6
cmpi r0, 0
brgt L22
addi r0, NULL, 0
rjmp L23
L22:
addi r0, NULL, 1
L23:
cmpi r0, 0
breq L21
load[1] r1, BP, 5
lsl[1] r1, r1
load[2] r2, BP, 6
subi r2, r2, 1
store[1] BP, r1, 5
store[2] BP, r2, 6
rjmp L20
L21:
load[1] r0, BP, 5
move RR, r0
ret
right_shift_c:
move BP, SP
load[1] r0, BP, 5
load[2] r1, BP, 6
L24:
load[2] r0, BP, 6
cmpi r0, 0
brgt L26
addi r0, NULL, 0
rjmp L27
L26:
addi r0, NULL, 1
L27:
cmpi r0, 0
breq L25
load[1] r1, BP, 5
lsr[1] r1, r1
load[2] r2, BP, 6
subi r2, r2, 1
store[1] BP, r1, 5
store[2] BP, r2, 6
rjmp L24
L25:
load[1] r0, BP, 5
move RR, r0
ret
divide:
move BP, SP
load[2] r0, BP, 4
load[2] r1, BP, 6
subi SP, SP, 2
subi SP, SP, 2
addi r2, NULL, 0
store[2] BP, r0, -2
store[2] BP, r2, -4
L28:
load[2] r0, BP, -2
load[2] r1, BP, 6
cmp r0, r1
brgt L30
addi r0, NULL, 0
rjmp L31
L30:
addi r0, NULL, 1
L31:
cmpi r0, 0
breq L29
load[2] r2, BP, -2
sub r2, r2, r1
load[2] r3, BP, -4
addi r3, r3, 1
store[2] BP, r2, -2
store[2] BP, r3, -4
rjmp L28
L29:
subi SP, SP, 4
load[2] r0, BP, -4
push[2] BP
subi SP, SP, 2
addi r1, NULL, 16
push[2] r1
subi SP, SP, 2
push[4] r0
store[4] BP, r0, -8
subi SP, SP, 2
call left_shift_l
addi SP, SP, 12
pop[2] BP
move r0, RR
store[4] BP, r0, -8
load[2] r1, BP, -2
add r0, r0, r1
move RR, r0
addi SP, SP, 8
ret
tile_index_write:
move BP, SP
load[2] r0, BP, 4
load[2] r3, BP, 6
load[2] r4, NULL, VIDEO_TILES
cmp r3, r4
brge L32
addi r3, NULL, 0
rjmp L33
L32:
addi r3, NULL, 1
L33:
cmpi r3, 0
breq L34
addi RR, NULL, 0
ret
rjmp L35
L34:
L35:
push[2] BP
subi SP, SP, 2
load[2] r0, BP, 6
push[2] r0
load[2] r1, BP, 4
push[2] r1
subi SP, SP, 2
call vga_write
addi SP, SP, 8
pop[2] BP
addi RR, NULL, 1
ret
tile_coord_write:
move BP, SP
load[4] r0, BP, 4
load[2] r1, BP, 8
load[2] r2, BP, 10
load[2] r3, NULL, VIDEO_PIXEL_WIDTH
cmp r1, r3
brge L36
addi r1, NULL, 0
rjmp L37
L36:
addi r1, NULL, 1
L37:
load[2] r4, NULL, VIDEO_PIXEL_HEIGHT
cmp r2, r4
brge L38
addi r2, NULL, 0
rjmp L39
L38:
addi r2, NULL, 1
L39:
or r1, r1, r2
cmpi r1, 0
breq L40
addi RR, NULL, 0
ret
rjmp L41
L40:
L41:
subi SP, SP, 2
load[2] r0, BP, 8
load[2] r1, NULL, VIDEO_PIXEL_WIDTH
load[2] r2, BP, 10
mul r1, r1, r2
add r0, r0, r1
push[2] BP
push[2] r0
load[4] r3, BP, 4
push[2] r3
store[2] BP, r0, -2
subi SP, SP, 2
call vga_write
addi SP, SP, 6
pop[2] BP
addi RR, NULL, 1
addi SP, SP, 2
ret
palette_index_write:
move BP, SP
load[2] r0, BP, 2
load[2] r1, BP, 4
load[2] r2, BP, 6
load[2] r3, NULL, PALETTE_SIZE
cmp r0, r3
brge L42
addi r0, NULL, 0
rjmp L43
L42:
addi r0, NULL, 1
L43:
cmpi r0, 0
breq L44
addi RR, NULL, 0
ret
rjmp L45
L44:
L45:
subi SP, SP, 2
load[2] r0, NULL, PALETTE_START
load[2] r1, BP, 2
add r0, r0, r1
subi SP, SP, 2
load[2] r2, BP, 4
push[2] BP
subi SP, SP, 2
addi r3, NULL, 8
push[2] r3
load[2] r3, BP, 4
push[2] r3
store[2] BP, r0, -2
store[2] BP, r2, -4
subi SP, SP, 2
call left_shift_i
addi SP, SP, 8
pop[2] BP
move r0, RR
store[2] BP, r0, -4
load[2] r1, BP, 6
add r0, r0, r1
push[2] BP
subi SP, SP, 2
load[2] r2, BP, -2
push[2] r2
push[2] r0
store[2] BP, r0, -4
subi SP, SP, 2
call vga_write
addi SP, SP, 8
pop[2] BP
addi RR, NULL, 1
addi SP, SP, 4
ret
set_cursor:
move BP, SP
load[1] r0, BP, 2
load[1] r1, BP, 3
load[2] r2, NULL, VIDEO_TILE_WIDTH
cmp r0, r2
brge L46
addi r0, NULL, 0
rjmp L47
L46:
addi r0, NULL, 1
L47:
load[2] r3, NULL, VIDEO_TILE_HEIGHT
cmp r1, r3
brge L48
addi r1, NULL, 0
rjmp L49
L48:
addi r1, NULL, 1
L49:
or r0, r0, r1
cmpi r0, 0
breq L50
addi RR, NULL, 0
ret
rjmp L51
L50:
L51:
load[1] r0, BP, 2
move r1, r0
load[1] r2, BP, 3
move r3, r2
add r0, r0, r2
load[2] r4, NULL, VIDEO_TILE_WIDTH
mul r0, r0, r4
store[2] NULL, r0, CURSOR
store[2] NULL, r1, CURSOR_X
store[2] NULL, r3, CURSOR_Y
addi RR, NULL, 1
ret
advance_cursor:
move BP, SP
load[2] r0, NULL, CURSOR
addi r0, r0, 1
store[2] NULL, r0, CURSOR
load[2] r1, NULL, VIDEO_TILES
cmp r0, r1
brlt L52
addi r0, NULL, 0
rjmp L53
L52:
addi r0, NULL, 1
L53:
cmpi r0, 0
breq L54
load[2] r0, NULL, CURSOR_X
addi r0, r0, 1
store[2] NULL, r0, CURSOR_X
load[2] r1, NULL, VIDEO_TILE_WIDTH
cmp r0, r1
brge L56
addi r0, NULL, 0
rjmp L57
L56:
addi r0, NULL, 1
L57:
cmpi r0, 0
breq L58
addi r0, NULL, 0
load[2] r1, NULL, CURSOR_Y
addi r1, r1, 1
store[2] NULL, r0, CURSOR_X
store[2] NULL, r1, CURSOR_Y
rjmp L59
L58:
L59:
rjmp L55
L54:
addi r0, NULL, 0
addi r1, NULL, 0
addi r2, NULL, 0
store[2] NULL, r0, CURSOR
store[2] NULL, r1, CURSOR_X
store[2] NULL, r2, CURSOR_Y
L55:
move RR, NULL
ret
back_cursor:
move BP, SP
load[2] r0, NULL, CURSOR
cmpi r0, 0
breq L60
addi r0, NULL, 0
rjmp L61
L60:
addi r0, NULL, 1
L61:
cmpi r0, 0
breq L62
addi RR, NULL, 0
ret
rjmp L63
L62:
L63:
load[2] r0, NULL, CURSOR
subi r0, r0, 1
store[2] NULL, r0, CURSOR
load[2] r1, NULL, VIDEO_TILES
cmp r0, r1
brlt L64
addi r0, NULL, 0
rjmp L65
L64:
addi r0, NULL, 1
L65:
cmpi r0, 0
breq L66
load[2] r0, NULL, CURSOR_X
subi r0, r0, 1
store[2] NULL, r0, CURSOR_X
cmpi r0, 0
brlt L68
addi r0, NULL, 0
rjmp L69
L68:
addi r0, NULL, 1
L69:
cmpi r0, 0
breq L70
addi r0, NULL, 0
load[2] r1, NULL, CURSOR_Y
subi r1, r1, 1
store[2] NULL, r0, CURSOR_X
store[2] NULL, r1, CURSOR_Y
rjmp L71
L70:
L71:
rjmp L67
L66:
load[2] r0, NULL, VIDEO_TILES
subi r0, r0, 1
load[2] r1, NULL, VIDEO_TILE_WIDTH
move r2, r1
load[2] r3, NULL, VIDEO_TILE_HEIGHT
move r4, r3
store[2] NULL, r0, CURSOR
store[2] NULL, r2, CURSOR_X
store[2] NULL, r4, CURSOR_Y
L67:
move RR, NULL
ret
advance_steps:
move BP, SP
load[2] r0, BP, 2
load[2] r1, NULL, VIDEO_TILES
cmp r0, r1
brge L72
addi r0, NULL, 0
rjmp L73
L72:
addi r0, NULL, 1
L73:
cmpi r0, 0
breq L74
addi RR, NULL, 0
ret
rjmp L75
L74:
L75:
load[2] r0, NULL, CURSOR
load[2] r1, BP, 2
add r0, r0, r1
store[2] NULL, r0, CURSOR
load[2] r2, NULL, VIDEO_TILES
cmp r0, r2
brge L76
addi r0, NULL, 0
rjmp L77
L76:
addi r0, NULL, 1
L77:
cmpi r0, 0
breq L78
load[2] r0, NULL, CURSOR
load[2] r1, NULL, VIDEO_TILES
sub r0, r0, r1
store[2] NULL, r0, CURSOR
rjmp L79
L78:
L79:
subi SP, SP, 4
push[2] BP
subi SP, SP, 2
load[2] r0, NULL, VIDEO_TILE_WIDTH
push[2] r0
load[2] r1, NULL, CURSOR
push[2] r1
subi SP, SP, 2
call divide
addi SP, SP, 8
pop[2] BP
move r0, RR
subi SP, SP, 4
push[2] BP
subi SP, SP, 2
load[2] r1, NULL, VIDEO_TILE_HEIGHT
push[2] r1
load[2] r2, NULL, CURSOR
push[2] r2
store[4] BP, r0, -4
subi SP, SP, 2
call divide
addi SP, SP, 8
pop[2] BP
move r0, RR
push[2] BP
subi SP, SP, 2
addi r1, NULL, 16
push[2] r1
load[4] r1, BP, -4
subi SP, SP, 2
push[4] r1
store[4] BP, r0, -8
subi SP, SP, 2
call right_shift_l
addi SP, SP, 12
pop[2] BP
move r0, RR
push[2] BP
subi SP, SP, 2
addi r1, NULL, 16
push[2] r1
load[4] r1, BP, -8
subi SP, SP, 2
push[4] r1
store[2] NULL, r0, CURSOR_X
subi SP, SP, 2
call right_shift_l
addi SP, SP, 12
pop[2] BP
move r0, RR
store[2] NULL, r0, CURSOR_Y
addi RR, NULL, 1
addi SP, SP, 8
ret
advance_line:
move BP, SP
load[2] r0, NULL, CURSOR_Y
addi r0, r0, 1
store[2] NULL, r0, CURSOR_Y
load[2] r1, NULL, VIDEO_TILE_HEIGHT
cmp r0, r1
brlt L80
addi r0, NULL, 0
rjmp L81
L80:
addi r0, NULL, 1
L81:
cmpi r0, 0
breq L82
load[2] r0, NULL, VIDEO_TILE_WIDTH
load[2] r1, NULL, CURSOR_Y
mul r0, r0, r1
load[2] r2, NULL, CURSOR_X
add r0, r0, r2
store[2] NULL, r0, CURSOR
rjmp L83
L82:
load[2] r0, NULL, CURSOR_X
move r1, r0
addi r2, NULL, 0
store[2] NULL, r1, CURSOR
store[2] NULL, r2, CURSOR_Y
L83:
move RR, NULL
ret
back_line:
move BP, SP
load[2] r0, NULL, CURSOR_Y
subi r0, r0, 1
store[2] NULL, r0, CURSOR_Y
cmpi r0, 0
brge L84
addi r0, NULL, 0
rjmp L85
L84:
addi r0, NULL, 1
L85:
cmpi r0, 0
breq L86
load[2] r0, NULL, VIDEO_TILE_WIDTH
load[2] r1, NULL, CURSOR_Y
mul r0, r0, r1
load[2] r2, NULL, CURSOR_X
add r0, r0, r2
store[2] NULL, r0, CURSOR
rjmp L87
L86:
load[2] r0, NULL, CURSOR_X
move r1, r0
load[2] r2, NULL, VIDEO_TILE_HEIGHT
subi r2, r2, 1
store[2] NULL, r1, CURSOR
store[2] NULL, r2, CURSOR_Y
L87:
move RR, NULL
ret
new_line:
move BP, SP
load[2] r0, NULL, CURSOR_Y
addi r0, r0, 1
store[2] NULL, r0, CURSOR_Y
load[2] r1, NULL, VIDEO_TILE_HEIGHT
cmp r0, r1
brlt L88
addi r0, NULL, 0
rjmp L89
L88:
addi r0, NULL, 1
L89:
cmpi r0, 0
breq L90
load[2] r0, NULL, VIDEO_TILE_WIDTH
load[2] r1, NULL, CURSOR_Y
mul r0, r0, r1
store[2] NULL, r0, CURSOR
rjmp L91
L90:
addi r0, NULL, 0
addi r1, NULL, 0
store[2] NULL, r0, CURSOR
store[2] NULL, r1, CURSOR_Y
L91:
addi r0, NULL, 0
store[2] NULL, r0, CURSOR_X
move RR, NULL
ret
print_c_at:
move BP, SP
load[1] r0, BP, 5
load[2] r1, BP, 6
load[2] r2, NULL, FG_COLOR
load[2] r3, NULL, PALETTE_SIZE
cmp r2, r3
brge L92
addi r2, NULL, 0
rjmp L93
L92:
addi r2, NULL, 1
L93:
load[2] r4, NULL, BG_COLOR
cmp r4, r3
brge L94
addi r4, NULL, 0
rjmp L95
L94:
addi r4, NULL, 1
L95:
or r2, r2, r4
cmpi r2, 0
breq L96
addi RR, NULL, 0
ret
rjmp L97
L96:
L97:
subi SP, SP, 2
load[2] r0, NULL, FG_COLOR
push[2] BP
addi r1, NULL, 4
push[2] r1
push[2] r0
store[2] BP, r0, -2
subi SP, SP, 2
call left_shift_i
addi SP, SP, 6
pop[2] BP
move r0, RR
store[2] BP, r0, -2
load[2] r1, NULL, BG_COLOR
add r0, r0, r1
push[2] BP
addi r2, NULL, 8
push[2] r2
push[2] r0
store[2] BP, r0, -2
subi SP, SP, 2
call left_shift_i
addi SP, SP, 6
pop[2] BP
move r0, RR
subi SP, SP, 2
load[1] r1, BP, 5
store[2] BP, r1, -4
add r1, r1, r0
push[2] BP
subi SP, SP, 2
load[2] r2, BP, 6
push[2] r2
push[2] r1
store[2] BP, r0, -2
store[2] BP, r1, -4
subi SP, SP, 2
call tile_index_write
addi SP, SP, 8
pop[2] BP
addi SP, SP, 4
ret
print_c_at_pos:
move BP, SP
load[1] r0, BP, 3
load[2] r1, BP, 4
load[2] r2, BP, 6
push[2] BP
subi SP, SP, 2
load[2] r3, NULL, VIDEO_TILE_WIDTH
mul r3, r3, r2
add r1, r1, r3
push[2] r1
push[1] r0
subi SP, SP, 3
call print_c_at
addi SP, SP, 8
pop[2] BP
ret
print_c:
move BP, SP
load[1] r0, BP, 3
push[2] BP
subi SP, SP, 2
load[2] r1, NULL, CURSOR
push[2] r1
push[1] r0
subi SP, SP, 3
call print_c_at
addi SP, SP, 8
pop[2] BP
cmpi RR, 0
breq L98
push[2] BP
call advance_cursor
pop[2] BP
addi RR, NULL, 1
ret
rjmp L99
L98:
L99:
addi RR, NULL, 0
ret
print:
move BP, SP
load[2] r0, BP, 2
L100:
load[2] r0, BP, 2
load[1] r0, r0, 0
cmpi r0, 0
breq L101
push[2] BP
subi SP, SP, 2
load[2] r1, BP, 2
load[1] r1, r1, 0
push[1] r1
subi SP, SP, 1
call print_c
addi SP, SP, 4
pop[2] BP
load[2] r0, BP, 2
addi r0, r0, 1
store[2] BP, r0, 2
rjmp L100
L101:
move RR, NULL
ret
clear:
move BP, SP
subi SP, SP, 2
addi r0, NULL, 0
store[2] BP, r0, -2
L102:
load[2] r0, BP, -2
load[2] r1, NULL, VIDEO_TILES
cmp r0, r1
brlt L104
addi r0, NULL, 0
rjmp L105
L104:
addi r0, NULL, 1
L105:
cmpi r0, 0
breq L103
push[2] BP
load[2] r2, BP, -2
push[2] r2
addi r3, NULL, 0
push[2] r3
subi SP, SP, 2
call tile_index_write
addi SP, SP, 6
pop[2] BP
rjmp L102
L103:
addi r0, NULL, 0
addi r1, NULL, 0
addi r2, NULL, 0
addi SP, SP, 2
store[2] NULL, r0, CURSOR
store[2] NULL, r1, CURSOR_X
store[2] NULL, r2, CURSOR_Y
move RR, NULL
ret
memset:
move BP, SP
load[2] r0, BP, 2
load[2] r1, BP, 4
load[1] r2, BP, 7
subi SP, SP, 2
addi r3, NULL, 0
store[2] BP, r3, -2
L106:
load[2] r0, BP, -2
load[2] r1, BP, 4
cmp r0, r1
brlt L108
addi r0, NULL, 0
rjmp L109
L108:
addi r0, NULL, 1
L109:
cmpi r0, 0
breq L107
load[2] r2, BP, 2
load[2] r3, BP, -2
addi r4, NULL, 1
mul r3, r3, r4
add r2, r2, r3
load[1] r4, BP, 7
store[1] r2, r4, 0
addi r3, r3, 1
store[2] BP, r3, -2
rjmp L106
L107:
addi SP, SP, 2
move RR, NULL
ret
add_changed:
move BP, SP
load[2] r0, BP, 2
addi r1, NULL, changed
load[2] r2, NULL, changed_index
addi r3, NULL, 2
mul r2, r2, r3
add r1, r1, r2
store[2] r1, r0, 0
addi r2, r2, 1
store[2] NULL, r2, changed_index
move RR, NULL
ret
calc_next_gen:
move BP, SP
subi SP, SP, 2
addi r0, NULL, 0
subi SP, SP, 2
addi r1, NULL, 0
subi SP, SP, 2
addi r2, NULL, 0
store[2] BP, r0, -2
store[2] BP, r1, -4
store[2] BP, r2, -6
L110:
load[2] r0, BP, -2
load[2] r1, NULL, VIDEO_TILES
cmp r0, r1
brlt L112
addi r0, NULL, 0
rjmp L113
L112:
addi r0, NULL, 1
L113:
cmpi r0, 0
breq L111
subi SP, SP, 2
addi r2, NULL, 0
subi SP, SP, 2
addi r3, NULL, -1
subi SP, SP, 2
addi r4, NULL, -1
store[2] BP, r2, -8
store[2] BP, r3, -10
store[2] BP, r4, -12
L114:
load[2] r0, BP, -12
cmpi r0, 2
brlt L116
addi r0, NULL, 0
rjmp L117
L116:
addi r0, NULL, 1
L117:
cmpi r0, 0
breq L115
L118:
load[2] r0, BP, -10
cmpi r0, 2
brlt L120
addi r0, NULL, 0
rjmp L121
L120:
addi r0, NULL, 1
L121:
cmpi r0, 0
breq L119
subi SP, SP, 2
load[2] r1, BP, -4
load[2] r2, BP, -10
add r1, r1, r2
subi SP, SP, 2
load[2] r3, BP, -6
load[2] r4, BP, -12
add r3, r3, r4
store[2] BP, r1, -14
load[2] r5, NULL, VIDEO_TILE_WIDTH
cmp r1, r5
brge L122
addi r1, NULL, 0
rjmp L123
L122:
addi r1, NULL, 1
L123:
store[2] BP, r3, -16
cmpi r1, 0
breq L124
addi r0, NULL, 0
store[2] BP, r0, -14
rjmp L125
L124:
load[2] r0, BP, -14
load[2] r1, NULL, VIDEO_TILE_WIDTH
cmp r0, r1
brle L126
addi r0, NULL, 0
rjmp L127
L126:
addi r0, NULL, 1
L127:
cmpi r0, 0
breq L128
load[2] r0, NULL, VIDEO_TILE_WIDTH
subi r0, r0, 1
store[2] BP, r0, -14
rjmp L129
L128:
L129:
L125:
load[2] r0, BP, -16
load[2] r1, NULL, VIDEO_TILE_HEIGHT
cmp r0, r1
brge L130
addi r0, NULL, 0
rjmp L131
L130:
addi r0, NULL, 1
L131:
cmpi r0, 0
breq L132
addi r0, NULL, 0
store[2] BP, r0, -16
rjmp L133
L132:
load[2] r0, BP, -14
load[2] r1, NULL, VIDEO_TILE_WIDTH
cmp r0, r1
brle L134
addi r0, NULL, 0
rjmp L135
L134:
addi r0, NULL, 1
L135:
cmpi r0, 0
breq L136
load[2] r0, NULL, VIDEO_TILE_HEIGHT
subi r0, r0, 1
store[2] BP, r0, -16
rjmp L137
L136:
L137:
L133:
subi SP, SP, 2
load[2] r0, BP, -14
load[2] r1, NULL, VIDEO_TILE_WIDTH
load[2] r2, BP, -16
mul r1, r1, r2
add r0, r0, r1
load[2] r3, BP, -8
addi r4, NULL, buffer
store[2] BP, r0, -18
add r0, r4, r0
load[1] r0, r0, 0
add r3, r3, r0
load[2] r5, BP, -10
addi r5, r5, 1
addi SP, SP, 6
store[2] BP, r3, -8
store[2] BP, r5, -10
rjmp L118
L119:
load[2] r0, BP, -12
addi r0, r0, 1
store[2] BP, r0, -12
rjmp L114
L115:
addi r0, NULL, buffer
load[2] r1, BP, -2
add r1, r0, r1
load[1] r1, r1, 0
cmpi r1, 1
breq L138
addi r1, NULL, 0
rjmp L139
L138:
addi r1, NULL, 1
L139:
cmpi r1, 0
breq L140
load[2] r0, BP, -8
cmpi r0, 2
brlt L142
addi r0, NULL, 0
rjmp L143
L142:
addi r0, NULL, 1
L143:
load[2] r1, BP, -8
cmpi r1, 3
brgt L144
addi r1, NULL, 0
rjmp L145
L144:
addi r1, NULL, 1
L145:
or r0, r0, r1
cmpi r0, 0
breq L146
push[2] BP
subi SP, SP, 2
load[2] r0, BP, -2
push[2] r0
call add_changed
addi SP, SP, 4
pop[2] BP
rjmp L147
L146:
L147:
rjmp L141
L140:
load[2] r0, BP, -8
cmpi r0, 3
breq L148
addi r0, NULL, 0
rjmp L149
L148:
addi r0, NULL, 1
L149:
cmpi r0, 0
breq L150
push[2] BP
subi SP, SP, 2
load[2] r0, BP, -2
push[2] r0
call add_changed
addi SP, SP, 4
pop[2] BP
rjmp L151
L150:
L151:
L141:
load[2] r0, BP, -4
addi r0, r0, 1
load[2] r1, BP, -2
addi r1, r1, 1
store[2] BP, r0, -4
load[2] r2, NULL, VIDEO_TILE_WIDTH
cmp r0, r2
brge L152
addi r0, NULL, 0
rjmp L153
L152:
addi r0, NULL, 1
L153:
store[2] BP, r1, -2
cmpi r0, 0
breq L154
addi r0, NULL, 0
store[2] BP, r0, -4
rjmp L155
L154:
L155:
addi SP, SP, 6
rjmp L110
L111:
addi SP, SP, 6
move RR, NULL
ret
print_board:
move BP, SP
subi SP, SP, 2
addi r0, NULL, 0
store[2] BP, r0, -2
L156:
load[2] r0, BP, -2
load[2] r1, NULL, VIDEO_TILES
cmp r0, r1
brlt L158
addi r0, NULL, 0
rjmp L159
L158:
addi r0, NULL, 1
L159:
cmpi r0, 0
breq L157
addi r2, NULL, buffer
load[2] r3, BP, -2
add r3, r2, r3
load[1] r3, r3, 0
cmpi r3, 0
breq L160
push[2] BP
load[2] r0, BP, -2
push[2] r0
addi r1, NULL, 43
push[2] r1
subi SP, SP, 2
call vga_write
addi SP, SP, 6
pop[2] BP
rjmp L161
L160:
push[2] BP
load[2] r0, BP, -2
push[2] r0
addi r1, NULL, 32
push[2] r1
subi SP, SP, 2
call vga_write
addi SP, SP, 6
pop[2] BP
L161:
rjmp L156
L157:
addi SP, SP, 2
move RR, NULL
ret
update_changed:
move BP, SP
subi SP, SP, 2
addi r0, NULL, 0
store[2] BP, r0, -2
L162:
load[2] r0, BP, -2
load[2] r1, NULL, changed_index
cmp r0, r1
brlt L164
addi r0, NULL, 0
rjmp L165
L164:
addi r0, NULL, 1
L165:
cmpi r0, 0
breq L163
subi SP, SP, 2
addi r2, NULL, changed
load[2] r3, BP, -2
addi r4, NULL, 2
mul r3, r3, r4
add r3, r2, r3
load[2] r3, r3, 0
addi r4, NULL, buffer
store[2] BP, r3, -4
add r3, r4, r3
load[1] r3, r3, 0
cmpi r3, 0
breq L166
addi r0, NULL, buffer
load[2] r1, BP, -4
addi r2, NULL, 1
mul r1, r1, r2
add r0, r0, r1
addi r2, NULL, 0
store[1] r0, r2, 0
rjmp L167
L166:
addi r0, NULL, buffer
load[2] r1, BP, -4
addi r2, NULL, 1
mul r1, r1, r2
add r0, r0, r1
addi r2, NULL, 1
store[1] r0, r2, 0
L167:
addi SP, SP, 2
rjmp L162
L163:
addi r0, NULL, 0
addi SP, SP, 2
store[2] NULL, r0, changed_index
move RR, NULL
ret
sleep_ms:
move BP, SP
load[4] r0, BP, 4
subi SP, SP, 4
load[4] r1, NULL, SLEEP_MS_MULT
mul r0, r0, r1
subi SP, SP, 4
addi r2, NULL, 0
store[4] BP, r0, -4
store[4] BP, r2, -8
L168:
load[4] r0, BP, -8
load[4] r1, BP, -4
cmp r0, r1
brlt L170
addi r0, NULL, 0
rjmp L171
L170:
addi r0, NULL, 1
L171:
cmpi r0, 0
breq L169
load[4] r2, BP, -8
addi r2, r2, 1
store[4] BP, r2, -8
rjmp L168
L169:
addi SP, SP, 8
move RR, NULL
ret
next_gen:
move BP, SP
push[2] BP
call calc_next_gen
pop[2] BP
push[2] BP
call update_changed
pop[2] BP
move RR, NULL
ret
main:
move BP, SP
push[2] BP
subi SP, SP, 2
addi r0, NULL, 0
push[1] r0
load[2] r0, NULL, VIDEO_TILES
subi SP, SP, 1
push[2] r0
addi r1, NULL, buffer
push[2] r1
call memset
addi SP, SP, 8
pop[2] BP
addi r0, NULL, buffer
addi r0, r0, 41
addi r1, NULL, 1
store[1] r0, r1, 0
addi r0, NULL, buffer
addi r0, r0, 82
addi r1, NULL, 1
store[1] r0, r1, 0
addi r0, NULL, buffer
addi r0, r0, 121
addi r1, NULL, 1
store[1] r0, r1, 0
addi r0, NULL, buffer
addi r0, r0, 122
addi r1, NULL, 1
store[1] r0, r1, 0
addi r0, NULL, buffer
addi r0, r0, 123
addi r1, NULL, 1
store[1] r0, r1, 0
push[2] BP
call print_board
pop[2] BP
L172:
push[2] BP
subi SP, SP, 2
addi r0, NULL, 500
push[4] r0
subi SP, SP, 2
call sleep_ms
addi SP, SP, 8
pop[2] BP
push[2] BP
call next_gen
pop[2] BP
rjmp L172
L173:
move RR, NULL
ret
(Pre handle_constants)
(Code after 'handle_constants')
 load[2] r0 r14 2
load[2] r1 r14 4
mul r0 r0 r1
store[2] r14 r0 6
load[2] r0 r14 6
store[2] r14 r0 8
load[2] r0 r14 6
load[2] r2 r14 10
add r0 r0 r2
store[2] r14 r0 12
subi r15 r15 1
call main
subi r15 r15 2
__halt:
rjmp __halt
in:
move r13 r15
load[2] r0 r13 2
subi r15 r15 4
load[4] r1 r13 -4
in r1 0
move r12 r1
addi r15 r15 4
ret
out:
move r13 r15
load[4] r0 r13 4
load[2] r1 r13 10
out 0 r0
store[4] r13 r0 4
move r12 r14
ret
vga_write:
move r13 r15
load[2] r0 r13 4
load[2] r1 r13 6
vgaw r1 r0 0
store[2] r13 r1 6
move r12 r14
ret
outside_bound:
move r13 r15
load[2] r0 r13 2
load[2] r1 r13 4
load[2] r2 r13 6
cmp r0 r2
brge L0
addi r0 r14 0
rjmp L1
L0:
addi r0 r14 1
L1:
load[2] r3 r13 2
cmp r3 r1
brlt L2
addi r3 r14 0
rjmp L3
L2:
addi r3 r14 1
L3:
or r0 r0 r3
move r12 r0
ret
left_shift_l:
move r13 r15
load[4] r0 r13 4
load[2] r1 r13 10
L4:
load[2] r0 r13 10
cmpi r0 0
brgt L6
addi r0 r14 0
rjmp L7
L6:
addi r0 r14 1
L7:
cmpi r0 0
breq L5
load[4] r1 r13 4
lsl[4] r1 r1
load[2] r2 r13 10
subi r2 r2 1
store[4] r13 r1 4
store[2] r13 r2 10
rjmp L4
L5:
load[4] r0 r13 4
move r12 r0
ret
right_shift_l:
move r13 r15
load[4] r0 r13 4
load[2] r1 r13 10
L8:
load[2] r0 r13 10
cmpi r0 0
brgt L10
addi r0 r14 0
rjmp L11
L10:
addi r0 r14 1
L11:
cmpi r0 0
breq L9
load[4] r1 r13 4
lsr[4] r1 r1
load[2] r2 r13 10
subi r2 r2 1
store[4] r13 r1 4
store[2] r13 r2 10
rjmp L8
L9:
load[4] r0 r13 4
move r12 r0
ret
left_shift_i:
move r13 r15
load[2] r0 r13 4
load[2] r1 r13 6
L12:
load[2] r0 r13 6
cmpi r0 0
brgt L14
addi r0 r14 0
rjmp L15
L14:
addi r0 r14 1
L15:
cmpi r0 0
breq L13
load[2] r1 r13 4
lsl[2] r1 r1
load[2] r2 r13 6
subi r2 r2 1
store[2] r13 r1 4
store[2] r13 r2 6
rjmp L12
L13:
load[2] r0 r13 4
move r12 r0
ret
right_shift_i:
move r13 r15
load[2] r0 r13 4
load[2] r1 r13 6
L16:
load[2] r0 r13 6
cmpi r0 0
brgt L18
addi r0 r14 0
rjmp L19
L18:
addi r0 r14 1
L19:
cmpi r0 0
breq L17
load[2] r1 r13 4
lsr[2] r1 r1
load[2] r2 r13 6
subi r2 r2 1
store[2] r13 r1 4
store[2] r13 r2 6
rjmp L16
L17:
load[2] r0 r13 4
move r12 r0
ret
left_shift_c:
move r13 r15
load[1] r0 r13 5
load[2] r1 r13 6
L20:
load[2] r0 r13 6
cmpi r0 0
brgt L22
addi r0 r14 0
rjmp L23
L22:
addi r0 r14 1
L23:
cmpi r0 0
breq L21
load[1] r1 r13 5
lsl[1] r1 r1
load[2] r2 r13 6
subi r2 r2 1
store[1] r13 r1 5
store[2] r13 r2 6
rjmp L20
L21:
load[1] r0 r13 5
move r12 r0
ret
right_shift_c:
move r13 r15
load[1] r0 r13 5
load[2] r1 r13 6
L24:
load[2] r0 r13 6
cmpi r0 0
brgt L26
addi r0 r14 0
rjmp L27
L26:
addi r0 r14 1
L27:
cmpi r0 0
breq L25
load[1] r1 r13 5
lsr[1] r1 r1
load[2] r2 r13 6
subi r2 r2 1
store[1] r13 r1 5
store[2] r13 r2 6
rjmp L24
L25:
load[1] r0 r13 5
move r12 r0
ret
divide:
move r13 r15
load[2] r0 r13 4
load[2] r1 r13 6
subi r15 r15 2
subi r15 r15 2
addi r2 r14 0
store[2] r13 r0 -2
store[2] r13 r2 -4
L28:
load[2] r0 r13 -2
load[2] r1 r13 6
cmp r0 r1
brgt L30
addi r0 r14 0
rjmp L31
L30:
addi r0 r14 1
L31:
cmpi r0 0
breq L29
load[2] r2 r13 -2
sub r2 r2 r1
load[2] r3 r13 -4
addi r3 r3 1
store[2] r13 r2 -2
store[2] r13 r3 -4
rjmp L28
L29:
subi r15 r15 4
load[2] r0 r13 -4
push[2] r13
subi r15 r15 2
addi r1 r14 16
push[2] r1
subi r15 r15 2
push[4] r0
store[4] r13 r0 -8
subi r15 r15 2
call left_shift_l
addi r15 r15 12
pop[2] r13
move r0 r12
store[4] r13 r0 -8
load[2] r1 r13 -2
add r0 r0 r1
move r12 r0
addi r15 r15 8
ret
tile_index_write:
move r13 r15
load[2] r0 r13 4
load[2] r3 r13 6
load[2] r4 r14 6
cmp r3 r4
brge L32
addi r3 r14 0
rjmp L33
L32:
addi r3 r14 1
L33:
cmpi r3 0
breq L34
addi r12 r14 0
ret
rjmp L35
L34:
L35:
push[2] r13
subi r15 r15 2
load[2] r0 r13 6
push[2] r0
load[2] r1 r13 4
push[2] r1
subi r15 r15 2
call vga_write
addi r15 r15 8
pop[2] r13
addi r12 r14 1
ret
tile_coord_write:
move r13 r15
load[4] r0 r13 4
load[2] r1 r13 8
load[2] r2 r13 10
load[2] r3 r14 14
cmp r1 r3
brge L36
addi r1 r14 0
rjmp L37
L36:
addi r1 r14 1
L37:
load[2] r4 r14 16
cmp r2 r4
brge L38
addi r2 r14 0
rjmp L39
L38:
addi r2 r14 1
L39:
or r1 r1 r2
cmpi r1 0
breq L40
addi r12 r14 0
ret
rjmp L41
L40:
L41:
subi r15 r15 2
load[2] r0 r13 8
load[2] r1 r14 14
load[2] r2 r13 10
mul r1 r1 r2
add r0 r0 r1
push[2] r13
push[2] r0
load[4] r3 r13 4
push[2] r3
store[2] r13 r0 -2
subi r15 r15 2
call vga_write
addi r15 r15 6
pop[2] r13
addi r12 r14 1
addi r15 r15 2
ret
palette_index_write:
move r13 r15
load[2] r0 r13 2
load[2] r1 r13 4
load[2] r2 r13 6
load[2] r3 r14 10
cmp r0 r3
brge L42
addi r0 r14 0
rjmp L43
L42:
addi r0 r14 1
L43:
cmpi r0 0
breq L44
addi r12 r14 0
ret
rjmp L45
L44:
L45:
subi r15 r15 2
load[2] r0 r14 8
load[2] r1 r13 2
add r0 r0 r1
subi r15 r15 2
load[2] r2 r13 4
push[2] r13
subi r15 r15 2
addi r3 r14 8
push[2] r3
load[2] r3 r13 4
push[2] r3
store[2] r13 r0 -2
store[2] r13 r2 -4
subi r15 r15 2
call left_shift_i
addi r15 r15 8
pop[2] r13
move r0 r12
store[2] r13 r0 -4
load[2] r1 r13 6
add r0 r0 r1
push[2] r13
subi r15 r15 2
load[2] r2 r13 -2
push[2] r2
push[2] r0
store[2] r13 r0 -4
subi r15 r15 2
call vga_write
addi r15 r15 8
pop[2] r13
addi r12 r14 1
addi r15 r15 4
ret
set_cursor:
move r13 r15
load[1] r0 r13 2
load[1] r1 r13 3
load[2] r2 r14 2
cmp r0 r2
brge L46
addi r0 r14 0
rjmp L47
L46:
addi r0 r14 1
L47:
load[2] r3 r14 4
cmp r1 r3
brge L48
addi r1 r14 0
rjmp L49
L48:
addi r1 r14 1
L49:
or r0 r0 r1
cmpi r0 0
breq L50
addi r12 r14 0
ret
rjmp L51
L50:
L51:
load[1] r0 r13 2
move r1 r0
load[1] r2 r13 3
move r3 r2
add r0 r0 r2
load[2] r4 r14 2
mul r0 r0 r4
store[2] r14 r0 22
store[2] r14 r1 24
store[2] r14 r3 26
addi r12 r14 1
ret
advance_cursor:
move r13 r15
load[2] r0 r14 22
addi r0 r0 1
store[2] r14 r0 22
load[2] r1 r14 6
cmp r0 r1
brlt L52
addi r0 r14 0
rjmp L53
L52:
addi r0 r14 1
L53:
cmpi r0 0
breq L54
load[2] r0 r14 24
addi r0 r0 1
store[2] r14 r0 24
load[2] r1 r14 2
cmp r0 r1
brge L56
addi r0 r14 0
rjmp L57
L56:
addi r0 r14 1
L57:
cmpi r0 0
breq L58
addi r0 r14 0
load[2] r1 r14 26
addi r1 r1 1
store[2] r14 r0 24
store[2] r14 r1 26
rjmp L59
L58:
L59:
rjmp L55
L54:
addi r0 r14 0
addi r1 r14 0
addi r2 r14 0
store[2] r14 r0 22
store[2] r14 r1 24
store[2] r14 r2 26
L55:
move r12 r14
ret
back_cursor:
move r13 r15
load[2] r0 r14 22
cmpi r0 0
breq L60
addi r0 r14 0
rjmp L61
L60:
addi r0 r14 1
L61:
cmpi r0 0
breq L62
addi r12 r14 0
ret
rjmp L63
L62:
L63:
load[2] r0 r14 22
subi r0 r0 1
store[2] r14 r0 22
load[2] r1 r14 6
cmp r0 r1
brlt L64
addi r0 r14 0
rjmp L65
L64:
addi r0 r14 1
L65:
cmpi r0 0
breq L66
load[2] r0 r14 24
subi r0 r0 1
store[2] r14 r0 24
cmpi r0 0
brlt L68
addi r0 r14 0
rjmp L69
L68:
addi r0 r14 1
L69:
cmpi r0 0
breq L70
addi r0 r14 0
load[2] r1 r14 26
subi r1 r1 1
store[2] r14 r0 24
store[2] r14 r1 26
rjmp L71
L70:
L71:
rjmp L67
L66:
load[2] r0 r14 6
subi r0 r0 1
load[2] r1 r14 2
move r2 r1
load[2] r3 r14 4
move r4 r3
store[2] r14 r0 22
store[2] r14 r2 24
store[2] r14 r4 26
L67:
move r12 r14
ret
advance_steps:
move r13 r15
load[2] r0 r13 2
load[2] r1 r14 6
cmp r0 r1
brge L72
addi r0 r14 0
rjmp L73
L72:
addi r0 r14 1
L73:
cmpi r0 0
breq L74
addi r12 r14 0
ret
rjmp L75
L74:
L75:
load[2] r0 r14 22
load[2] r1 r13 2
add r0 r0 r1
store[2] r14 r0 22
load[2] r2 r14 6
cmp r0 r2
brge L76
addi r0 r14 0
rjmp L77
L76:
addi r0 r14 1
L77:
cmpi r0 0
breq L78
load[2] r0 r14 22
load[2] r1 r14 6
sub r0 r0 r1
store[2] r14 r0 22
rjmp L79
L78:
L79:
subi r15 r15 4
push[2] r13
subi r15 r15 2
load[2] r0 r14 2
push[2] r0
load[2] r1 r14 22
push[2] r1
subi r15 r15 2
call divide
addi r15 r15 8
pop[2] r13
move r0 r12
subi r15 r15 4
push[2] r13
subi r15 r15 2
load[2] r1 r14 4
push[2] r1
load[2] r2 r14 22
push[2] r2
store[4] r13 r0 -4
subi r15 r15 2
call divide
addi r15 r15 8
pop[2] r13
move r0 r12
push[2] r13
subi r15 r15 2
addi r1 r14 16
push[2] r1
load[4] r1 r13 -4
subi r15 r15 2
push[4] r1
store[4] r13 r0 -8
subi r15 r15 2
call right_shift_l
addi r15 r15 12
pop[2] r13
move r0 r12
push[2] r13
subi r15 r15 2
addi r1 r14 16
push[2] r1
load[4] r1 r13 -8
subi r15 r15 2
push[4] r1
store[2] r14 r0 24
subi r15 r15 2
call right_shift_l
addi r15 r15 12
pop[2] r13
move r0 r12
store[2] r14 r0 26
addi r12 r14 1
addi r15 r15 8
ret
advance_line:
move r13 r15
load[2] r0 r14 26
addi r0 r0 1
store[2] r14 r0 26
load[2] r1 r14 4
cmp r0 r1
brlt L80
addi r0 r14 0
rjmp L81
L80:
addi r0 r14 1
L81:
cmpi r0 0
breq L82
load[2] r0 r14 2
load[2] r1 r14 26
mul r0 r0 r1
load[2] r2 r14 24
add r0 r0 r2
store[2] r14 r0 22
rjmp L83
L82:
load[2] r0 r14 24
move r1 r0
addi r2 r14 0
store[2] r14 r1 22
store[2] r14 r2 26
L83:
move r12 r14
ret
back_line:
move r13 r15
load[2] r0 r14 26
subi r0 r0 1
store[2] r14 r0 26
cmpi r0 0
brge L84
addi r0 r14 0
rjmp L85
L84:
addi r0 r14 1
L85:
cmpi r0 0
breq L86
load[2] r0 r14 2
load[2] r1 r14 26
mul r0 r0 r1
load[2] r2 r14 24
add r0 r0 r2
store[2] r14 r0 22
rjmp L87
L86:
load[2] r0 r14 24
move r1 r0
load[2] r2 r14 4
subi r2 r2 1
store[2] r14 r1 22
store[2] r14 r2 26
L87:
move r12 r14
ret
new_line:
move r13 r15
load[2] r0 r14 26
addi r0 r0 1
store[2] r14 r0 26
load[2] r1 r14 4
cmp r0 r1
brlt L88
addi r0 r14 0
rjmp L89
L88:
addi r0 r14 1
L89:
cmpi r0 0
breq L90
load[2] r0 r14 2
load[2] r1 r14 26
mul r0 r0 r1
store[2] r14 r0 22
rjmp L91
L90:
addi r0 r14 0
addi r1 r14 0
store[2] r14 r0 22
store[2] r14 r1 26
L91:
addi r0 r14 0
store[2] r14 r0 24
move r12 r14
ret
print_c_at:
move r13 r15
load[1] r0 r13 5
load[2] r1 r13 6
load[2] r2 r14 18
load[2] r3 r14 10
cmp r2 r3
brge L92
addi r2 r14 0
rjmp L93
L92:
addi r2 r14 1
L93:
load[2] r4 r14 20
cmp r4 r3
brge L94
addi r4 r14 0
rjmp L95
L94:
addi r4 r14 1
L95:
or r2 r2 r4
cmpi r2 0
breq L96
addi r12 r14 0
ret
rjmp L97
L96:
L97:
subi r15 r15 2
load[2] r0 r14 18
push[2] r13
addi r1 r14 4
push[2] r1
push[2] r0
store[2] r13 r0 -2
subi r15 r15 2
call left_shift_i
addi r15 r15 6
pop[2] r13
move r0 r12
store[2] r13 r0 -2
load[2] r1 r14 20
add r0 r0 r1
push[2] r13
addi r2 r14 8
push[2] r2
push[2] r0
store[2] r13 r0 -2
subi r15 r15 2
call left_shift_i
addi r15 r15 6
pop[2] r13
move r0 r12
subi r15 r15 2
load[1] r1 r13 5
store[2] r13 r1 -4
add r1 r1 r0
push[2] r13
subi r15 r15 2
load[2] r2 r13 6
push[2] r2
push[2] r1
store[2] r13 r0 -2
store[2] r13 r1 -4
subi r15 r15 2
call tile_index_write
addi r15 r15 8
pop[2] r13
addi r15 r15 4
ret
print_c_at_pos:
move r13 r15
load[1] r0 r13 3
load[2] r1 r13 4
load[2] r2 r13 6
push[2] r13
subi r15 r15 2
load[2] r3 r14 2
mul r3 r3 r2
add r1 r1 r3
push[2] r1
push[1] r0
subi r15 r15 3
call print_c_at
addi r15 r15 8
pop[2] r13
ret
print_c:
move r13 r15
load[1] r0 r13 3
push[2] r13
subi r15 r15 2
load[2] r1 r14 22
push[2] r1
push[1] r0
subi r15 r15 3
call print_c_at
addi r15 r15 8
pop[2] r13
cmpi r12 0
breq L98
push[2] r13
call advance_cursor
pop[2] r13
addi r12 r14 1
ret
rjmp L99
L98:
L99:
addi r12 r14 0
ret
print:
move r13 r15
load[2] r0 r13 2
L100:
load[2] r0 r13 2
load[1] r0 r0 0
cmpi r0 0
breq L101
push[2] r13
subi r15 r15 2
load[2] r1 r13 2
load[1] r1 r1 0
push[1] r1
subi r15 r15 1
call print_c
addi r15 r15 4
pop[2] r13
load[2] r0 r13 2
addi r0 r0 1
store[2] r13 r0 2
rjmp L100
L101:
move r12 r14
ret
clear:
move r13 r15
subi r15 r15 2
addi r0 r14 0
store[2] r13 r0 -2
L102:
load[2] r0 r13 -2
load[2] r1 r14 6
cmp r0 r1
brlt L104
addi r0 r14 0
rjmp L105
L104:
addi r0 r14 1
L105:
cmpi r0 0
breq L103
push[2] r13
load[2] r2 r13 -2
push[2] r2
addi r3 r14 0
push[2] r3
subi r15 r15 2
call tile_index_write
addi r15 r15 6
pop[2] r13
rjmp L102
L103:
addi r0 r14 0
addi r1 r14 0
addi r2 r14 0
addi r15 r15 2
store[2] r14 r0 22
store[2] r14 r1 24
store[2] r14 r2 26
move r12 r14
ret
memset:
move r13 r15
load[2] r0 r13 2
load[2] r1 r13 4
load[1] r2 r13 7
subi r15 r15 2
addi r3 r14 0
store[2] r13 r3 -2
L106:
load[2] r0 r13 -2
load[2] r1 r13 4
cmp r0 r1
brlt L108
addi r0 r14 0
rjmp L109
L108:
addi r0 r14 1
L109:
cmpi r0 0
breq L107
load[2] r2 r13 2
load[2] r3 r13 -2
addi r4 r14 1
mul r3 r3 r4
add r2 r2 r3
load[1] r4 r13 7
store[1] r2 r4 0
addi r3 r3 1
store[2] r13 r3 -2
rjmp L106
L107:
addi r15 r15 2
move r12 r14
ret
add_changed:
move r13 r15
load[2] r0 r13 2
addi r1 r14 31
load[2] r2 r14 29
addi r3 r14 2
mul r2 r2 r3
add r1 r1 r2
store[2] r1 r0 0
addi r2 r2 1
store[2] r14 r2 29
move r12 r14
ret
calc_next_gen:
move r13 r15
subi r15 r15 2
addi r0 r14 0
subi r15 r15 2
addi r1 r14 0
subi r15 r15 2
addi r2 r14 0
store[2] r13 r0 -2
store[2] r13 r1 -4
store[2] r13 r2 -6
L110:
load[2] r0 r13 -2
load[2] r1 r14 6
cmp r0 r1
brlt L112
addi r0 r14 0
rjmp L113
L112:
addi r0 r14 1
L113:
cmpi r0 0
breq L111
subi r15 r15 2
addi r2 r14 0
subi r15 r15 2
addi r3 r14 -1
subi r15 r15 2
addi r4 r14 -1
store[2] r13 r2 -8
store[2] r13 r3 -10
store[2] r13 r4 -12
L114:
load[2] r0 r13 -12
cmpi r0 2
brlt L116
addi r0 r14 0
rjmp L117
L116:
addi r0 r14 1
L117:
cmpi r0 0
breq L115
L118:
load[2] r0 r13 -10
cmpi r0 2
brlt L120
addi r0 r14 0
rjmp L121
L120:
addi r0 r14 1
L121:
cmpi r0 0
breq L119
subi r15 r15 2
load[2] r1 r13 -4
load[2] r2 r13 -10
add r1 r1 r2
subi r15 r15 2
load[2] r3 r13 -6
load[2] r4 r13 -12
add r3 r3 r4
store[2] r13 r1 -14
load[2] r5 r14 2
cmp r1 r5
brge L122
addi r1 r14 0
rjmp L123
L122:
addi r1 r14 1
L123:
store[2] r13 r3 -16
cmpi r1 0
breq L124
addi r0 r14 0
store[2] r13 r0 -14
rjmp L125
L124:
load[2] r0 r13 -14
load[2] r1 r14 2
cmp r0 r1
brle L126
addi r0 r14 0
rjmp L127
L126:
addi r0 r14 1
L127:
cmpi r0 0
breq L128
load[2] r0 r14 2
subi r0 r0 1
store[2] r13 r0 -14
rjmp L129
L128:
L129:
L125:
load[2] r0 r13 -16
load[2] r1 r14 4
cmp r0 r1
brge L130
addi r0 r14 0
rjmp L131
L130:
addi r0 r14 1
L131:
cmpi r0 0
breq L132
addi r0 r14 0
store[2] r13 r0 -16
rjmp L133
L132:
load[2] r0 r13 -14
load[2] r1 r14 2
cmp r0 r1
brle L134
addi r0 r14 0
rjmp L135
L134:
addi r0 r14 1
L135:
cmpi r0 0
breq L136
load[2] r0 r14 4
subi r0 r0 1
store[2] r13 r0 -16
rjmp L137
L136:
L137:
L133:
subi r15 r15 2
load[2] r0 r13 -14
load[2] r1 r14 2
load[2] r2 r13 -16
mul r1 r1 r2
add r0 r0 r1
load[2] r3 r13 -8
addi r4 r14 28
store[2] r13 r0 -18
add r0 r4 r0
load[1] r0 r0 0
add r3 r3 r0
load[2] r5 r13 -10
addi r5 r5 1
addi r15 r15 6
store[2] r13 r3 -8
store[2] r13 r5 -10
rjmp L118
L119:
load[2] r0 r13 -12
addi r0 r0 1
store[2] r13 r0 -12
rjmp L114
L115:
addi r0 r14 28
load[2] r1 r13 -2
add r1 r0 r1
load[1] r1 r1 0
cmpi r1 1
breq L138
addi r1 r14 0
rjmp L139
L138:
addi r1 r14 1
L139:
cmpi r1 0
breq L140
load[2] r0 r13 -8
cmpi r0 2
brlt L142
addi r0 r14 0
rjmp L143
L142:
addi r0 r14 1
L143:
load[2] r1 r13 -8
cmpi r1 3
brgt L144
addi r1 r14 0
rjmp L145
L144:
addi r1 r14 1
L145:
or r0 r0 r1
cmpi r0 0
breq L146
push[2] r13
subi r15 r15 2
load[2] r0 r13 -2
push[2] r0
call add_changed
addi r15 r15 4
pop[2] r13
rjmp L147
L146:
L147:
rjmp L141
L140:
load[2] r0 r13 -8
cmpi r0 3
breq L148
addi r0 r14 0
rjmp L149
L148:
addi r0 r14 1
L149:
cmpi r0 0
breq L150
push[2] r13
subi r15 r15 2
load[2] r0 r13 -2
push[2] r0
call add_changed
addi r15 r15 4
pop[2] r13
rjmp L151
L150:
L151:
L141:
load[2] r0 r13 -4
addi r0 r0 1
load[2] r1 r13 -2
addi r1 r1 1
store[2] r13 r0 -4
load[2] r2 r14 2
cmp r0 r2
brge L152
addi r0 r14 0
rjmp L153
L152:
addi r0 r14 1
L153:
store[2] r13 r1 -2
cmpi r0 0
breq L154
addi r0 r14 0
store[2] r13 r0 -4
rjmp L155
L154:
L155:
addi r15 r15 6
rjmp L110
L111:
addi r15 r15 6
move r12 r14
ret
print_board:
move r13 r15
subi r15 r15 2
addi r0 r14 0
store[2] r13 r0 -2
L156:
load[2] r0 r13 -2
load[2] r1 r14 6
cmp r0 r1
brlt L158
addi r0 r14 0
rjmp L159
L158:
addi r0 r14 1
L159:
cmpi r0 0
breq L157
addi r2 r14 28
load[2] r3 r13 -2
add r3 r2 r3
load[1] r3 r3 0
cmpi r3 0
breq L160
push[2] r13
load[2] r0 r13 -2
push[2] r0
addi r1 r14 43
push[2] r1
subi r15 r15 2
call vga_write
addi r15 r15 6
pop[2] r13
rjmp L161
L160:
push[2] r13
load[2] r0 r13 -2
push[2] r0
addi r1 r14 32
push[2] r1
subi r15 r15 2
call vga_write
addi r15 r15 6
pop[2] r13
L161:
rjmp L156
L157:
addi r15 r15 2
move r12 r14
ret
update_changed:
move r13 r15
subi r15 r15 2
addi r0 r14 0
store[2] r13 r0 -2
L162:
load[2] r0 r13 -2
load[2] r1 r14 29
cmp r0 r1
brlt L164
addi r0 r14 0
rjmp L165
L164:
addi r0 r14 1
L165:
cmpi r0 0
breq L163
subi r15 r15 2
addi r2 r14 31
load[2] r3 r13 -2
addi r4 r14 2
mul r3 r3 r4
add r3 r2 r3
load[2] r3 r3 0
addi r4 r14 28
store[2] r13 r3 -4
add r3 r4 r3
load[1] r3 r3 0
cmpi r3 0
breq L166
addi r0 r14 28
load[2] r1 r13 -4
addi r2 r14 1
mul r1 r1 r2
add r0 r0 r1
addi r2 r14 0
store[1] r0 r2 0
rjmp L167
L166:
addi r0 r14 28
load[2] r1 r13 -4
addi r2 r14 1
mul r1 r1 r2
add r0 r0 r1
addi r2 r14 1
store[1] r0 r2 0
L167:
addi r15 r15 2
rjmp L162
L163:
addi r0 r14 0
addi r15 r15 2
store[2] r14 r0 29
move r12 r14
ret
sleep_ms:
move r13 r15
load[4] r0 r13 4
subi r15 r15 4
load[4] r1 r14 158
mul r0 r0 r1
subi r15 r15 4
addi r2 r14 0
store[4] r13 r0 -4
store[4] r13 r2 -8
L168:
load[4] r0 r13 -8
load[4] r1 r13 -4
cmp r0 r1
brlt L170
addi r0 r14 0
rjmp L171
L170:
addi r0 r14 1
L171:
cmpi r0 0
breq L169
load[4] r2 r13 -8
addi r2 r2 1
store[4] r13 r2 -8
rjmp L168
L169:
addi r15 r15 8
move r12 r14
ret
next_gen:
move r13 r15
push[2] r13
call calc_next_gen
pop[2] r13
push[2] r13
call update_changed
pop[2] r13
move r12 r14
ret
main:
move r13 r15
push[2] r13
subi r15 r15 2
addi r0 r14 0
push[1] r0
load[2] r0 r14 6
subi r15 r15 1
push[2] r0
addi r1 r14 28
push[2] r1
call memset
addi r15 r15 8
pop[2] r13
addi r0 r14 28
addi r0 r0 41
addi r1 r14 1
store[1] r0 r1 0
addi r0 r14 28
addi r0 r0 82
addi r1 r14 1
store[1] r0 r1 0
addi r0 r14 28
addi r0 r0 121
addi r1 r14 1
store[1] r0 r1 0
addi r0 r14 28
addi r0 r0 122
addi r1 r14 1
store[1] r0 r1 0
addi r0 r14 28
addi r0 r0 123
addi r1 r14 1
store[1] r0 r1 0
push[2] r13
call print_board
pop[2] r13
L172:
push[2] r13
subi r15 r15 2
addi r0 r14 500
push[4] r0
subi r15 r15 2
call sleep_ms
addi r15 r15 8
pop[2] r13
push[2] r13
call next_gen
pop[2] r13
rjmp L172
L173:
move r12 r14
ret
(Pre handle_sizes)
(Code after 'handle_sizes')
 load r0 r14 2 [2]
load r1 r14 4 [2]
mul r0 r0 r1
store r14 r0 6 [2]
load r0 r14 6 [2]
store r14 r0 8 [2]
load r0 r14 6 [2]
load r2 r14 10 [2]
add r0 r0 r2
store r14 r0 12 [2]
subi r15 r15 1
call main
subi r15 r15 2
__halt:
rjmp __halt
in:
move r13 r15
load r0 r13 2 [2]
subi r15 r15 4
load r1 r13 -4 [4]
in r1 0
move r12 r1
addi r15 r15 4
ret
out:
move r13 r15
load r0 r13 4 [4]
load r1 r13 10 [2]
out 0 r0
store r13 r0 4 [4]
move r12 r14
ret
vga_write:
move r13 r15
load r0 r13 4 [2]
load r1 r13 6 [2]
vgaw r1 r0 0
store r13 r1 6 [2]
move r12 r14
ret
outside_bound:
move r13 r15
load r0 r13 2 [2]
load r1 r13 4 [2]
load r2 r13 6 [2]
cmp r0 r2
brge L0
addi r0 r14 0
rjmp L1
L0:
addi r0 r14 1
L1:
load r3 r13 2 [2]
cmp r3 r1
brlt L2
addi r3 r14 0
rjmp L3
L2:
addi r3 r14 1
L3:
or r0 r0 r3
move r12 r0
ret
left_shift_l:
move r13 r15
load r0 r13 4 [4]
load r1 r13 10 [2]
L4:
load r0 r13 10 [2]
cmpi r0 0
brgt L6
addi r0 r14 0
rjmp L7
L6:
addi r0 r14 1
L7:
cmpi r0 0
breq L5
load r1 r13 4 [4]
lsl r1 r1 [4]
load r2 r13 10 [2]
subi r2 r2 1
store r13 r1 4 [4]
store r13 r2 10 [2]
rjmp L4
L5:
load r0 r13 4 [4]
move r12 r0
ret
right_shift_l:
move r13 r15
load r0 r13 4 [4]
load r1 r13 10 [2]
L8:
load r0 r13 10 [2]
cmpi r0 0
brgt L10
addi r0 r14 0
rjmp L11
L10:
addi r0 r14 1
L11:
cmpi r0 0
breq L9
load r1 r13 4 [4]
lsr r1 r1 [4]
load r2 r13 10 [2]
subi r2 r2 1
store r13 r1 4 [4]
store r13 r2 10 [2]
rjmp L8
L9:
load r0 r13 4 [4]
move r12 r0
ret
left_shift_i:
move r13 r15
load r0 r13 4 [2]
load r1 r13 6 [2]
L12:
load r0 r13 6 [2]
cmpi r0 0
brgt L14
addi r0 r14 0
rjmp L15
L14:
addi r0 r14 1
L15:
cmpi r0 0
breq L13
load r1 r13 4 [2]
lsl r1 r1 [2]
load r2 r13 6 [2]
subi r2 r2 1
store r13 r1 4 [2]
store r13 r2 6 [2]
rjmp L12
L13:
load r0 r13 4 [2]
move r12 r0
ret
right_shift_i:
move r13 r15
load r0 r13 4 [2]
load r1 r13 6 [2]
L16:
load r0 r13 6 [2]
cmpi r0 0
brgt L18
addi r0 r14 0
rjmp L19
L18:
addi r0 r14 1
L19:
cmpi r0 0
breq L17
load r1 r13 4 [2]
lsr r1 r1 [2]
load r2 r13 6 [2]
subi r2 r2 1
store r13 r1 4 [2]
store r13 r2 6 [2]
rjmp L16
L17:
load r0 r13 4 [2]
move r12 r0
ret
left_shift_c:
move r13 r15
load r0 r13 5 [1]
load r1 r13 6 [2]
L20:
load r0 r13 6 [2]
cmpi r0 0
brgt L22
addi r0 r14 0
rjmp L23
L22:
addi r0 r14 1
L23:
cmpi r0 0
breq L21
load r1 r13 5 [1]
lsl r1 r1 [1]
load r2 r13 6 [2]
subi r2 r2 1
store r13 r1 5 [1]
store r13 r2 6 [2]
rjmp L20
L21:
load r0 r13 5 [1]
move r12 r0
ret
right_shift_c:
move r13 r15
load r0 r13 5 [1]
load r1 r13 6 [2]
L24:
load r0 r13 6 [2]
cmpi r0 0
brgt L26
addi r0 r14 0
rjmp L27
L26:
addi r0 r14 1
L27:
cmpi r0 0
breq L25
load r1 r13 5 [1]
lsr r1 r1 [1]
load r2 r13 6 [2]
subi r2 r2 1
store r13 r1 5 [1]
store r13 r2 6 [2]
rjmp L24
L25:
load r0 r13 5 [1]
move r12 r0
ret
divide:
move r13 r15
load r0 r13 4 [2]
load r1 r13 6 [2]
subi r15 r15 2
subi r15 r15 2
addi r2 r14 0
store r13 r0 -2 [2]
store r13 r2 -4 [2]
L28:
load r0 r13 -2 [2]
load r1 r13 6 [2]
cmp r0 r1
brgt L30
addi r0 r14 0
rjmp L31
L30:
addi r0 r14 1
L31:
cmpi r0 0
breq L29
load r2 r13 -2 [2]
sub r2 r2 r1
load r3 r13 -4 [2]
addi r3 r3 1
store r13 r2 -2 [2]
store r13 r3 -4 [2]
rjmp L28
L29:
subi r15 r15 4
load r0 r13 -4 [2]
push r13 [2]
subi r15 r15 2
addi r1 r14 16
push r1 [2]
subi r15 r15 2
push r0 [4]
store r13 r0 -8 [4]
subi r15 r15 2
call left_shift_l
addi r15 r15 12
pop r13 [2]
move r0 r12
store r13 r0 -8 [4]
load r1 r13 -2 [2]
add r0 r0 r1
move r12 r0
addi r15 r15 8
ret
tile_index_write:
move r13 r15
load r0 r13 4 [2]
load r3 r13 6 [2]
load r4 r14 6 [2]
cmp r3 r4
brge L32
addi r3 r14 0
rjmp L33
L32:
addi r3 r14 1
L33:
cmpi r3 0
breq L34
addi r12 r14 0
ret
rjmp L35
L34:
L35:
push r13 [2]
subi r15 r15 2
load r0 r13 6 [2]
push r0 [2]
load r1 r13 4 [2]
push r1 [2]
subi r15 r15 2
call vga_write
addi r15 r15 8
pop r13 [2]
addi r12 r14 1
ret
tile_coord_write:
move r13 r15
load r0 r13 4 [4]
load r1 r13 8 [2]
load r2 r13 10 [2]
load r3 r14 14 [2]
cmp r1 r3
brge L36
addi r1 r14 0
rjmp L37
L36:
addi r1 r14 1
L37:
load r4 r14 16 [2]
cmp r2 r4
brge L38
addi r2 r14 0
rjmp L39
L38:
addi r2 r14 1
L39:
or r1 r1 r2
cmpi r1 0
breq L40
addi r12 r14 0
ret
rjmp L41
L40:
L41:
subi r15 r15 2
load r0 r13 8 [2]
load r1 r14 14 [2]
load r2 r13 10 [2]
mul r1 r1 r2
add r0 r0 r1
push r13 [2]
push r0 [2]
load r3 r13 4 [4]
push r3 [2]
store r13 r0 -2 [2]
subi r15 r15 2
call vga_write
addi r15 r15 6
pop r13 [2]
addi r12 r14 1
addi r15 r15 2
ret
palette_index_write:
move r13 r15
load r0 r13 2 [2]
load r1 r13 4 [2]
load r2 r13 6 [2]
load r3 r14 10 [2]
cmp r0 r3
brge L42
addi r0 r14 0
rjmp L43
L42:
addi r0 r14 1
L43:
cmpi r0 0
breq L44
addi r12 r14 0
ret
rjmp L45
L44:
L45:
subi r15 r15 2
load r0 r14 8 [2]
load r1 r13 2 [2]
add r0 r0 r1
subi r15 r15 2
load r2 r13 4 [2]
push r13 [2]
subi r15 r15 2
addi r3 r14 8
push r3 [2]
load r3 r13 4 [2]
push r3 [2]
store r13 r0 -2 [2]
store r13 r2 -4 [2]
subi r15 r15 2
call left_shift_i
addi r15 r15 8
pop r13 [2]
move r0 r12
store r13 r0 -4 [2]
load r1 r13 6 [2]
add r0 r0 r1
push r13 [2]
subi r15 r15 2
load r2 r13 -2 [2]
push r2 [2]
push r0 [2]
store r13 r0 -4 [2]
subi r15 r15 2
call vga_write
addi r15 r15 8
pop r13 [2]
addi r12 r14 1
addi r15 r15 4
ret
set_cursor:
move r13 r15
load r0 r13 2 [1]
load r1 r13 3 [1]
load r2 r14 2 [2]
cmp r0 r2
brge L46
addi r0 r14 0
rjmp L47
L46:
addi r0 r14 1
L47:
load r3 r14 4 [2]
cmp r1 r3
brge L48
addi r1 r14 0
rjmp L49
L48:
addi r1 r14 1
L49:
or r0 r0 r1
cmpi r0 0
breq L50
addi r12 r14 0
ret
rjmp L51
L50:
L51:
load r0 r13 2 [1]
move r1 r0
load r2 r13 3 [1]
move r3 r2
add r0 r0 r2
load r4 r14 2 [2]
mul r0 r0 r4
store r14 r0 22 [2]
store r14 r1 24 [2]
store r14 r3 26 [2]
addi r12 r14 1
ret
advance_cursor:
move r13 r15
load r0 r14 22 [2]
addi r0 r0 1
store r14 r0 22 [2]
load r1 r14 6 [2]
cmp r0 r1
brlt L52
addi r0 r14 0
rjmp L53
L52:
addi r0 r14 1
L53:
cmpi r0 0
breq L54
load r0 r14 24 [2]
addi r0 r0 1
store r14 r0 24 [2]
load r1 r14 2 [2]
cmp r0 r1
brge L56
addi r0 r14 0
rjmp L57
L56:
addi r0 r14 1
L57:
cmpi r0 0
breq L58
addi r0 r14 0
load r1 r14 26 [2]
addi r1 r1 1
store r14 r0 24 [2]
store r14 r1 26 [2]
rjmp L59
L58:
L59:
rjmp L55
L54:
addi r0 r14 0
addi r1 r14 0
addi r2 r14 0
store r14 r0 22 [2]
store r14 r1 24 [2]
store r14 r2 26 [2]
L55:
move r12 r14
ret
back_cursor:
move r13 r15
load r0 r14 22 [2]
cmpi r0 0
breq L60
addi r0 r14 0
rjmp L61
L60:
addi r0 r14 1
L61:
cmpi r0 0
breq L62
addi r12 r14 0
ret
rjmp L63
L62:
L63:
load r0 r14 22 [2]
subi r0 r0 1
store r14 r0 22 [2]
load r1 r14 6 [2]
cmp r0 r1
brlt L64
addi r0 r14 0
rjmp L65
L64:
addi r0 r14 1
L65:
cmpi r0 0
breq L66
load r0 r14 24 [2]
subi r0 r0 1
store r14 r0 24 [2]
cmpi r0 0
brlt L68
addi r0 r14 0
rjmp L69
L68:
addi r0 r14 1
L69:
cmpi r0 0
breq L70
addi r0 r14 0
load r1 r14 26 [2]
subi r1 r1 1
store r14 r0 24 [2]
store r14 r1 26 [2]
rjmp L71
L70:
L71:
rjmp L67
L66:
load r0 r14 6 [2]
subi r0 r0 1
load r1 r14 2 [2]
move r2 r1
load r3 r14 4 [2]
move r4 r3
store r14 r0 22 [2]
store r14 r2 24 [2]
store r14 r4 26 [2]
L67:
move r12 r14
ret
advance_steps:
move r13 r15
load r0 r13 2 [2]
load r1 r14 6 [2]
cmp r0 r1
brge L72
addi r0 r14 0
rjmp L73
L72:
addi r0 r14 1
L73:
cmpi r0 0
breq L74
addi r12 r14 0
ret
rjmp L75
L74:
L75:
load r0 r14 22 [2]
load r1 r13 2 [2]
add r0 r0 r1
store r14 r0 22 [2]
load r2 r14 6 [2]
cmp r0 r2
brge L76
addi r0 r14 0
rjmp L77
L76:
addi r0 r14 1
L77:
cmpi r0 0
breq L78
load r0 r14 22 [2]
load r1 r14 6 [2]
sub r0 r0 r1
store r14 r0 22 [2]
rjmp L79
L78:
L79:
subi r15 r15 4
push r13 [2]
subi r15 r15 2
load r0 r14 2 [2]
push r0 [2]
load r1 r14 22 [2]
push r1 [2]
subi r15 r15 2
call divide
addi r15 r15 8
pop r13 [2]
move r0 r12
subi r15 r15 4
push r13 [2]
subi r15 r15 2
load r1 r14 4 [2]
push r1 [2]
load r2 r14 22 [2]
push r2 [2]
store r13 r0 -4 [4]
subi r15 r15 2
call divide
addi r15 r15 8
pop r13 [2]
move r0 r12
push r13 [2]
subi r15 r15 2
addi r1 r14 16
push r1 [2]
load r1 r13 -4 [4]
subi r15 r15 2
push r1 [4]
store r13 r0 -8 [4]
subi r15 r15 2
call right_shift_l
addi r15 r15 12
pop r13 [2]
move r0 r12
push r13 [2]
subi r15 r15 2
addi r1 r14 16
push r1 [2]
load r1 r13 -8 [4]
subi r15 r15 2
push r1 [4]
store r14 r0 24 [2]
subi r15 r15 2
call right_shift_l
addi r15 r15 12
pop r13 [2]
move r0 r12
store r14 r0 26 [2]
addi r12 r14 1
addi r15 r15 8
ret
advance_line:
move r13 r15
load r0 r14 26 [2]
addi r0 r0 1
store r14 r0 26 [2]
load r1 r14 4 [2]
cmp r0 r1
brlt L80
addi r0 r14 0
rjmp L81
L80:
addi r0 r14 1
L81:
cmpi r0 0
breq L82
load r0 r14 2 [2]
load r1 r14 26 [2]
mul r0 r0 r1
load r2 r14 24 [2]
add r0 r0 r2
store r14 r0 22 [2]
rjmp L83
L82:
load r0 r14 24 [2]
move r1 r0
addi r2 r14 0
store r14 r1 22 [2]
store r14 r2 26 [2]
L83:
move r12 r14
ret
back_line:
move r13 r15
load r0 r14 26 [2]
subi r0 r0 1
store r14 r0 26 [2]
cmpi r0 0
brge L84
addi r0 r14 0
rjmp L85
L84:
addi r0 r14 1
L85:
cmpi r0 0
breq L86
load r0 r14 2 [2]
load r1 r14 26 [2]
mul r0 r0 r1
load r2 r14 24 [2]
add r0 r0 r2
store r14 r0 22 [2]
rjmp L87
L86:
load r0 r14 24 [2]
move r1 r0
load r2 r14 4 [2]
subi r2 r2 1
store r14 r1 22 [2]
store r14 r2 26 [2]
L87:
move r12 r14
ret
new_line:
move r13 r15
load r0 r14 26 [2]
addi r0 r0 1
store r14 r0 26 [2]
load r1 r14 4 [2]
cmp r0 r1
brlt L88
addi r0 r14 0
rjmp L89
L88:
addi r0 r14 1
L89:
cmpi r0 0
breq L90
load r0 r14 2 [2]
load r1 r14 26 [2]
mul r0 r0 r1
store r14 r0 22 [2]
rjmp L91
L90:
addi r0 r14 0
addi r1 r14 0
store r14 r0 22 [2]
store r14 r1 26 [2]
L91:
addi r0 r14 0
store r14 r0 24 [2]
move r12 r14
ret
print_c_at:
move r13 r15
load r0 r13 5 [1]
load r1 r13 6 [2]
load r2 r14 18 [2]
load r3 r14 10 [2]
cmp r2 r3
brge L92
addi r2 r14 0
rjmp L93
L92:
addi r2 r14 1
L93:
load r4 r14 20 [2]
cmp r4 r3
brge L94
addi r4 r14 0
rjmp L95
L94:
addi r4 r14 1
L95:
or r2 r2 r4
cmpi r2 0
breq L96
addi r12 r14 0
ret
rjmp L97
L96:
L97:
subi r15 r15 2
load r0 r14 18 [2]
push r13 [2]
addi r1 r14 4
push r1 [2]
push r0 [2]
store r13 r0 -2 [2]
subi r15 r15 2
call left_shift_i
addi r15 r15 6
pop r13 [2]
move r0 r12
store r13 r0 -2 [2]
load r1 r14 20 [2]
add r0 r0 r1
push r13 [2]
addi r2 r14 8
push r2 [2]
push r0 [2]
store r13 r0 -2 [2]
subi r15 r15 2
call left_shift_i
addi r15 r15 6
pop r13 [2]
move r0 r12
subi r15 r15 2
load r1 r13 5 [1]
store r13 r1 -4 [2]
add r1 r1 r0
push r13 [2]
subi r15 r15 2
load r2 r13 6 [2]
push r2 [2]
push r1 [2]
store r13 r0 -2 [2]
store r13 r1 -4 [2]
subi r15 r15 2
call tile_index_write
addi r15 r15 8
pop r13 [2]
addi r15 r15 4
ret
print_c_at_pos:
move r13 r15
load r0 r13 3 [1]
load r1 r13 4 [2]
load r2 r13 6 [2]
push r13 [2]
subi r15 r15 2
load r3 r14 2 [2]
mul r3 r3 r2
add r1 r1 r3
push r1 [2]
push r0 [1]
subi r15 r15 3
call print_c_at
addi r15 r15 8
pop r13 [2]
ret
print_c:
move r13 r15
load r0 r13 3 [1]
push r13 [2]
subi r15 r15 2
load r1 r14 22 [2]
push r1 [2]
push r0 [1]
subi r15 r15 3
call print_c_at
addi r15 r15 8
pop r13 [2]
cmpi r12 0
breq L98
push r13 [2]
call advance_cursor
pop r13 [2]
addi r12 r14 1
ret
rjmp L99
L98:
L99:
addi r12 r14 0
ret
print:
move r13 r15
load r0 r13 2 [2]
L100:
load r0 r13 2 [2]
load r0 r0 0 [1]
cmpi r0 0
breq L101
push r13 [2]
subi r15 r15 2
load r1 r13 2 [2]
load r1 r1 0 [1]
push r1 [1]
subi r15 r15 1
call print_c
addi r15 r15 4
pop r13 [2]
load r0 r13 2 [2]
addi r0 r0 1
store r13 r0 2 [2]
rjmp L100
L101:
move r12 r14
ret
clear:
move r13 r15
subi r15 r15 2
addi r0 r14 0
store r13 r0 -2 [2]
L102:
load r0 r13 -2 [2]
load r1 r14 6 [2]
cmp r0 r1
brlt L104
addi r0 r14 0
rjmp L105
L104:
addi r0 r14 1
L105:
cmpi r0 0
breq L103
push r13 [2]
load r2 r13 -2 [2]
push r2 [2]
addi r3 r14 0
push r3 [2]
subi r15 r15 2
call tile_index_write
addi r15 r15 6
pop r13 [2]
rjmp L102
L103:
addi r0 r14 0
addi r1 r14 0
addi r2 r14 0
addi r15 r15 2
store r14 r0 22 [2]
store r14 r1 24 [2]
store r14 r2 26 [2]
move r12 r14
ret
memset:
move r13 r15
load r0 r13 2 [2]
load r1 r13 4 [2]
load r2 r13 7 [1]
subi r15 r15 2
addi r3 r14 0
store r13 r3 -2 [2]
L106:
load r0 r13 -2 [2]
load r1 r13 4 [2]
cmp r0 r1
brlt L108
addi r0 r14 0
rjmp L109
L108:
addi r0 r14 1
L109:
cmpi r0 0
breq L107
load r2 r13 2 [2]
load r3 r13 -2 [2]
addi r4 r14 1
mul r3 r3 r4
add r2 r2 r3
load r4 r13 7 [1]
store r2 r4 0 [1]
addi r3 r3 1
store r13 r3 -2 [2]
rjmp L106
L107:
addi r15 r15 2
move r12 r14
ret
add_changed:
move r13 r15
load r0 r13 2 [2]
addi r1 r14 31
load r2 r14 29 [2]
addi r3 r14 2
mul r2 r2 r3
add r1 r1 r2
store r1 r0 0 [2]
addi r2 r2 1
store r14 r2 29 [2]
move r12 r14
ret
calc_next_gen:
move r13 r15
subi r15 r15 2
addi r0 r14 0
subi r15 r15 2
addi r1 r14 0
subi r15 r15 2
addi r2 r14 0
store r13 r0 -2 [2]
store r13 r1 -4 [2]
store r13 r2 -6 [2]
L110:
load r0 r13 -2 [2]
load r1 r14 6 [2]
cmp r0 r1
brlt L112
addi r0 r14 0
rjmp L113
L112:
addi r0 r14 1
L113:
cmpi r0 0
breq L111
subi r15 r15 2
addi r2 r14 0
subi r15 r15 2
addi r3 r14 -1
subi r15 r15 2
addi r4 r14 -1
store r13 r2 -8 [2]
store r13 r3 -10 [2]
store r13 r4 -12 [2]
L114:
load r0 r13 -12 [2]
cmpi r0 2
brlt L116
addi r0 r14 0
rjmp L117
L116:
addi r0 r14 1
L117:
cmpi r0 0
breq L115
L118:
load r0 r13 -10 [2]
cmpi r0 2
brlt L120
addi r0 r14 0
rjmp L121
L120:
addi r0 r14 1
L121:
cmpi r0 0
breq L119
subi r15 r15 2
load r1 r13 -4 [2]
load r2 r13 -10 [2]
add r1 r1 r2
subi r15 r15 2
load r3 r13 -6 [2]
load r4 r13 -12 [2]
add r3 r3 r4
store r13 r1 -14 [2]
load r5 r14 2 [2]
cmp r1 r5
brge L122
addi r1 r14 0
rjmp L123
L122:
addi r1 r14 1
L123:
store r13 r3 -16 [2]
cmpi r1 0
breq L124
addi r0 r14 0
store r13 r0 -14 [2]
rjmp L125
L124:
load r0 r13 -14 [2]
load r1 r14 2 [2]
cmp r0 r1
brle L126
addi r0 r14 0
rjmp L127
L126:
addi r0 r14 1
L127:
cmpi r0 0
breq L128
load r0 r14 2 [2]
subi r0 r0 1
store r13 r0 -14 [2]
rjmp L129
L128:
L129:
L125:
load r0 r13 -16 [2]
load r1 r14 4 [2]
cmp r0 r1
brge L130
addi r0 r14 0
rjmp L131
L130:
addi r0 r14 1
L131:
cmpi r0 0
breq L132
addi r0 r14 0
store r13 r0 -16 [2]
rjmp L133
L132:
load r0 r13 -14 [2]
load r1 r14 2 [2]
cmp r0 r1
brle L134
addi r0 r14 0
rjmp L135
L134:
addi r0 r14 1
L135:
cmpi r0 0
breq L136
load r0 r14 4 [2]
subi r0 r0 1
store r13 r0 -16 [2]
rjmp L137
L136:
L137:
L133:
subi r15 r15 2
load r0 r13 -14 [2]
load r1 r14 2 [2]
load r2 r13 -16 [2]
mul r1 r1 r2
add r0 r0 r1
load r3 r13 -8 [2]
addi r4 r14 28
store r13 r0 -18 [2]
add r0 r4 r0
load r0 r0 0 [1]
add r3 r3 r0
load r5 r13 -10 [2]
addi r5 r5 1
addi r15 r15 6
store r13 r3 -8 [2]
store r13 r5 -10 [2]
rjmp L118
L119:
load r0 r13 -12 [2]
addi r0 r0 1
store r13 r0 -12 [2]
rjmp L114
L115:
addi r0 r14 28
load r1 r13 -2 [2]
add r1 r0 r1
load r1 r1 0 [1]
cmpi r1 1
breq L138
addi r1 r14 0
rjmp L139
L138:
addi r1 r14 1
L139:
cmpi r1 0
breq L140
load r0 r13 -8 [2]
cmpi r0 2
brlt L142
addi r0 r14 0
rjmp L143
L142:
addi r0 r14 1
L143:
load r1 r13 -8 [2]
cmpi r1 3
brgt L144
addi r1 r14 0
rjmp L145
L144:
addi r1 r14 1
L145:
or r0 r0 r1
cmpi r0 0
breq L146
push r13 [2]
subi r15 r15 2
load r0 r13 -2 [2]
push r0 [2]
call add_changed
addi r15 r15 4
pop r13 [2]
rjmp L147
L146:
L147:
rjmp L141
L140:
load r0 r13 -8 [2]
cmpi r0 3
breq L148
addi r0 r14 0
rjmp L149
L148:
addi r0 r14 1
L149:
cmpi r0 0
breq L150
push r13 [2]
subi r15 r15 2
load r0 r13 -2 [2]
push r0 [2]
call add_changed
addi r15 r15 4
pop r13 [2]
rjmp L151
L150:
L151:
L141:
load r0 r13 -4 [2]
addi r0 r0 1
load r1 r13 -2 [2]
addi r1 r1 1
store r13 r0 -4 [2]
load r2 r14 2 [2]
cmp r0 r2
brge L152
addi r0 r14 0
rjmp L153
L152:
addi r0 r14 1
L153:
store r13 r1 -2 [2]
cmpi r0 0
breq L154
addi r0 r14 0
store r13 r0 -4 [2]
rjmp L155
L154:
L155:
addi r15 r15 6
rjmp L110
L111:
addi r15 r15 6
move r12 r14
ret
print_board:
move r13 r15
subi r15 r15 2
addi r0 r14 0
store r13 r0 -2 [2]
L156:
load r0 r13 -2 [2]
load r1 r14 6 [2]
cmp r0 r1
brlt L158
addi r0 r14 0
rjmp L159
L158:
addi r0 r14 1
L159:
cmpi r0 0
breq L157
addi r2 r14 28
load r3 r13 -2 [2]
add r3 r2 r3
load r3 r3 0 [1]
cmpi r3 0
breq L160
push r13 [2]
load r0 r13 -2 [2]
push r0 [2]
addi r1 r14 43
push r1 [2]
subi r15 r15 2
call vga_write
addi r15 r15 6
pop r13 [2]
rjmp L161
L160:
push r13 [2]
load r0 r13 -2 [2]
push r0 [2]
addi r1 r14 32
push r1 [2]
subi r15 r15 2
call vga_write
addi r15 r15 6
pop r13 [2]
L161:
rjmp L156
L157:
addi r15 r15 2
move r12 r14
ret
update_changed:
move r13 r15
subi r15 r15 2
addi r0 r14 0
store r13 r0 -2 [2]
L162:
load r0 r13 -2 [2]
load r1 r14 29 [2]
cmp r0 r1
brlt L164
addi r0 r14 0
rjmp L165
L164:
addi r0 r14 1
L165:
cmpi r0 0
breq L163
subi r15 r15 2
addi r2 r14 31
load r3 r13 -2 [2]
addi r4 r14 2
mul r3 r3 r4
add r3 r2 r3
load r3 r3 0 [2]
addi r4 r14 28
store r13 r3 -4 [2]
add r3 r4 r3
load r3 r3 0 [1]
cmpi r3 0
breq L166
addi r0 r14 28
load r1 r13 -4 [2]
addi r2 r14 1
mul r1 r1 r2
add r0 r0 r1
addi r2 r14 0
store r0 r2 0 [1]
rjmp L167
L166:
addi r0 r14 28
load r1 r13 -4 [2]
addi r2 r14 1
mul r1 r1 r2
add r0 r0 r1
addi r2 r14 1
store r0 r2 0 [1]
L167:
addi r15 r15 2
rjmp L162
L163:
addi r0 r14 0
addi r15 r15 2
store r14 r0 29 [2]
move r12 r14
ret
sleep_ms:
move r13 r15
load r0 r13 4 [4]
subi r15 r15 4
load r1 r14 158 [4]
mul r0 r0 r1
subi r15 r15 4
addi r2 r14 0
store r13 r0 -4 [4]
store r13 r2 -8 [4]
L168:
load r0 r13 -8 [4]
load r1 r13 -4 [4]
cmp r0 r1
brlt L170
addi r0 r14 0
rjmp L171
L170:
addi r0 r14 1
L171:
cmpi r0 0
breq L169
load r2 r13 -8 [4]
addi r2 r2 1
store r13 r2 -8 [4]
rjmp L168
L169:
addi r15 r15 8
move r12 r14
ret
next_gen:
move r13 r15
push r13 [2]
call calc_next_gen
pop r13 [2]
push r13 [2]
call update_changed
pop r13 [2]
move r12 r14
ret
main:
move r13 r15
push r13 [2]
subi r15 r15 2
addi r0 r14 0
push r0 [1]
load r0 r14 6 [2]
subi r15 r15 1
push r0 [2]
addi r1 r14 28
push r1 [2]
call memset
addi r15 r15 8
pop r13 [2]
addi r0 r14 28
addi r0 r0 41
addi r1 r14 1
store r0 r1 0 [1]
addi r0 r14 28
addi r0 r0 82
addi r1 r14 1
store r0 r1 0 [1]
addi r0 r14 28
addi r0 r0 121
addi r1 r14 1
store r0 r1 0 [1]
addi r0 r14 28
addi r0 r0 122
addi r1 r14 1
store r0 r1 0 [1]
addi r0 r14 28
addi r0 r0 123
addi r1 r14 1
store r0 r1 0 [1]
push r13 [2]
call print_board
pop r13 [2]
L172:
push r13 [2]
subi r15 r15 2
addi r0 r14 500
push r0 [4]
subi r15 r15 2
call sleep_ms
addi r15 r15 8
pop r13 [2]
push r13 [2]
call next_gen
pop r13 [2]
rjmp L172
L173:
move r12 r14
ret
(Pre replace_pop_push)
(Code after 'replace_pop_push')
 load r0 r14 2 [2]
load r1 r14 4 [2]
mul r0 r0 r1
store r14 r0 6 [2]
load r0 r14 6 [2]
store r14 r0 8 [2]
load r0 r14 6 [2]
load r2 r14 10 [2]
add r0 r0 r2
store r14 r0 12 [2]
subi r15 r15 1
call main
subi r15 r15 2
__halt:
rjmp __halt
in:
move r13 r15
load r0 r13 2 [2]
subi r15 r15 4
load r1 r13 -4 [4]
in r1 0
move r12 r1
addi r15 r15 4
ret
out:
move r13 r15
load r0 r13 4 [4]
load r1 r13 10 [2]
out 0 r0
store r13 r0 4 [4]
move r12 r14
ret
vga_write:
move r13 r15
load r0 r13 4 [2]
load r1 r13 6 [2]
vgaw r1 r0 0
store r13 r1 6 [2]
move r12 r14
ret
outside_bound:
move r13 r15
load r0 r13 2 [2]
load r1 r13 4 [2]
load r2 r13 6 [2]
cmp r0 r2
brge L0
addi r0 r14 0
rjmp L1
L0:
addi r0 r14 1
L1:
load r3 r13 2 [2]
cmp r3 r1
brlt L2
addi r3 r14 0
rjmp L3
L2:
addi r3 r14 1
L3:
or r0 r0 r3
move r12 r0
ret
left_shift_l:
move r13 r15
load r0 r13 4 [4]
load r1 r13 10 [2]
L4:
load r0 r13 10 [2]
cmpi r0 0
brgt L6
addi r0 r14 0
rjmp L7
L6:
addi r0 r14 1
L7:
cmpi r0 0
breq L5
load r1 r13 4 [4]
lsl r1 r1 [4]
load r2 r13 10 [2]
subi r2 r2 1
store r13 r1 4 [4]
store r13 r2 10 [2]
rjmp L4
L5:
load r0 r13 4 [4]
move r12 r0
ret
right_shift_l:
move r13 r15
load r0 r13 4 [4]
load r1 r13 10 [2]
L8:
load r0 r13 10 [2]
cmpi r0 0
brgt L10
addi r0 r14 0
rjmp L11
L10:
addi r0 r14 1
L11:
cmpi r0 0
breq L9
load r1 r13 4 [4]
lsr r1 r1 [4]
load r2 r13 10 [2]
subi r2 r2 1
store r13 r1 4 [4]
store r13 r2 10 [2]
rjmp L8
L9:
load r0 r13 4 [4]
move r12 r0
ret
left_shift_i:
move r13 r15
load r0 r13 4 [2]
load r1 r13 6 [2]
L12:
load r0 r13 6 [2]
cmpi r0 0
brgt L14
addi r0 r14 0
rjmp L15
L14:
addi r0 r14 1
L15:
cmpi r0 0
breq L13
load r1 r13 4 [2]
lsl r1 r1 [2]
load r2 r13 6 [2]
subi r2 r2 1
store r13 r1 4 [2]
store r13 r2 6 [2]
rjmp L12
L13:
load r0 r13 4 [2]
move r12 r0
ret
right_shift_i:
move r13 r15
load r0 r13 4 [2]
load r1 r13 6 [2]
L16:
load r0 r13 6 [2]
cmpi r0 0
brgt L18
addi r0 r14 0
rjmp L19
L18:
addi r0 r14 1
L19:
cmpi r0 0
breq L17
load r1 r13 4 [2]
lsr r1 r1 [2]
load r2 r13 6 [2]
subi r2 r2 1
store r13 r1 4 [2]
store r13 r2 6 [2]
rjmp L16
L17:
load r0 r13 4 [2]
move r12 r0
ret
left_shift_c:
move r13 r15
load r0 r13 5 [1]
load r1 r13 6 [2]
L20:
load r0 r13 6 [2]
cmpi r0 0
brgt L22
addi r0 r14 0
rjmp L23
L22:
addi r0 r14 1
L23:
cmpi r0 0
breq L21
load r1 r13 5 [1]
lsl r1 r1 [1]
load r2 r13 6 [2]
subi r2 r2 1
store r13 r1 5 [1]
store r13 r2 6 [2]
rjmp L20
L21:
load r0 r13 5 [1]
move r12 r0
ret
right_shift_c:
move r13 r15
load r0 r13 5 [1]
load r1 r13 6 [2]
L24:
load r0 r13 6 [2]
cmpi r0 0
brgt L26
addi r0 r14 0
rjmp L27
L26:
addi r0 r14 1
L27:
cmpi r0 0
breq L25
load r1 r13 5 [1]
lsr r1 r1 [1]
load r2 r13 6 [2]
subi r2 r2 1
store r13 r1 5 [1]
store r13 r2 6 [2]
rjmp L24
L25:
load r0 r13 5 [1]
move r12 r0
ret
divide:
move r13 r15
load r0 r13 4 [2]
load r1 r13 6 [2]
subi r15 r15 2
subi r15 r15 2
addi r2 r14 0
store r13 r0 -2 [2]
store r13 r2 -4 [2]
L28:
load r0 r13 -2 [2]
load r1 r13 6 [2]
cmp r0 r1
brgt L30
addi r0 r14 0
rjmp L31
L30:
addi r0 r14 1
L31:
cmpi r0 0
breq L29
load r2 r13 -2 [2]
sub r2 r2 r1
load r3 r13 -4 [2]
addi r3 r3 1
store r13 r2 -2 [2]
store r13 r3 -4 [2]
rjmp L28
L29:
subi r15 r15 4
load r0 r13 -4 [2]
addi r15, r15, -2
store r15, r13, 0 [2]
subi r15 r15 2
addi r1 r14 16
addi r15, r15, -2
store r15, r1, 0 [2]
subi r15 r15 2
addi r15, r15, -4
store r15, r0, 0 [4]
store r13 r0 -8 [4]
subi r15 r15 2
call left_shift_l
addi r15 r15 12
load r13, r15, 0 [2]
addi r15, r15, 2
move r0 r12
store r13 r0 -8 [4]
load r1 r13 -2 [2]
add r0 r0 r1
move r12 r0
addi r15 r15 8
ret
tile_index_write:
move r13 r15
load r0 r13 4 [2]
load r3 r13 6 [2]
load r4 r14 6 [2]
cmp r3 r4
brge L32
addi r3 r14 0
rjmp L33
L32:
addi r3 r14 1
L33:
cmpi r3 0
breq L34
addi r12 r14 0
ret
rjmp L35
L34:
L35:
addi r15, r15, -2
store r15, r13, 0 [2]
subi r15 r15 2
load r0 r13 6 [2]
addi r15, r15, -2
store r15, r0, 0 [2]
load r1 r13 4 [2]
addi r15, r15, -2
store r15, r1, 0 [2]
subi r15 r15 2
call vga_write
addi r15 r15 8
load r13, r15, 0 [2]
addi r15, r15, 2
addi r12 r14 1
ret
tile_coord_write:
move r13 r15
load r0 r13 4 [4]
load r1 r13 8 [2]
load r2 r13 10 [2]
load r3 r14 14 [2]
cmp r1 r3
brge L36
addi r1 r14 0
rjmp L37
L36:
addi r1 r14 1
L37:
load r4 r14 16 [2]
cmp r2 r4
brge L38
addi r2 r14 0
rjmp L39
L38:
addi r2 r14 1
L39:
or r1 r1 r2
cmpi r1 0
breq L40
addi r12 r14 0
ret
rjmp L41
L40:
L41:
subi r15 r15 2
load r0 r13 8 [2]
load r1 r14 14 [2]
load r2 r13 10 [2]
mul r1 r1 r2
add r0 r0 r1
addi r15, r15, -2
store r15, r13, 0 [2]
addi r15, r15, -2
store r15, r0, 0 [2]
load r3 r13 4 [4]
addi r15, r15, -2
store r15, r3, 0 [2]
store r13 r0 -2 [2]
subi r15 r15 2
call vga_write
addi r15 r15 6
load r13, r15, 0 [2]
addi r15, r15, 2
addi r12 r14 1
addi r15 r15 2
ret
palette_index_write:
move r13 r15
load r0 r13 2 [2]
load r1 r13 4 [2]
load r2 r13 6 [2]
load r3 r14 10 [2]
cmp r0 r3
brge L42
addi r0 r14 0
rjmp L43
L42:
addi r0 r14 1
L43:
cmpi r0 0
breq L44
addi r12 r14 0
ret
rjmp L45
L44:
L45:
subi r15 r15 2
load r0 r14 8 [2]
load r1 r13 2 [2]
add r0 r0 r1
subi r15 r15 2
load r2 r13 4 [2]
addi r15, r15, -2
store r15, r13, 0 [2]
subi r15 r15 2
addi r3 r14 8
addi r15, r15, -2
store r15, r3, 0 [2]
load r3 r13 4 [2]
addi r15, r15, -2
store r15, r3, 0 [2]
store r13 r0 -2 [2]
store r13 r2 -4 [2]
subi r15 r15 2
call left_shift_i
addi r15 r15 8
load r13, r15, 0 [2]
addi r15, r15, 2
move r0 r12
store r13 r0 -4 [2]
load r1 r13 6 [2]
add r0 r0 r1
addi r15, r15, -2
store r15, r13, 0 [2]
subi r15 r15 2
load r2 r13 -2 [2]
addi r15, r15, -2
store r15, r2, 0 [2]
addi r15, r15, -2
store r15, r0, 0 [2]
store r13 r0 -4 [2]
subi r15 r15 2
call vga_write
addi r15 r15 8
load r13, r15, 0 [2]
addi r15, r15, 2
addi r12 r14 1
addi r15 r15 4
ret
set_cursor:
move r13 r15
load r0 r13 2 [1]
load r1 r13 3 [1]
load r2 r14 2 [2]
cmp r0 r2
brge L46
addi r0 r14 0
rjmp L47
L46:
addi r0 r14 1
L47:
load r3 r14 4 [2]
cmp r1 r3
brge L48
addi r1 r14 0
rjmp L49
L48:
addi r1 r14 1
L49:
or r0 r0 r1
cmpi r0 0
breq L50
addi r12 r14 0
ret
rjmp L51
L50:
L51:
load r0 r13 2 [1]
move r1 r0
load r2 r13 3 [1]
move r3 r2
add r0 r0 r2
load r4 r14 2 [2]
mul r0 r0 r4
store r14 r0 22 [2]
store r14 r1 24 [2]
store r14 r3 26 [2]
addi r12 r14 1
ret
advance_cursor:
move r13 r15
load r0 r14 22 [2]
addi r0 r0 1
store r14 r0 22 [2]
load r1 r14 6 [2]
cmp r0 r1
brlt L52
addi r0 r14 0
rjmp L53
L52:
addi r0 r14 1
L53:
cmpi r0 0
breq L54
load r0 r14 24 [2]
addi r0 r0 1
store r14 r0 24 [2]
load r1 r14 2 [2]
cmp r0 r1
brge L56
addi r0 r14 0
rjmp L57
L56:
addi r0 r14 1
L57:
cmpi r0 0
breq L58
addi r0 r14 0
load r1 r14 26 [2]
addi r1 r1 1
store r14 r0 24 [2]
store r14 r1 26 [2]
rjmp L59
L58:
L59:
rjmp L55
L54:
addi r0 r14 0
addi r1 r14 0
addi r2 r14 0
store r14 r0 22 [2]
store r14 r1 24 [2]
store r14 r2 26 [2]
L55:
move r12 r14
ret
back_cursor:
move r13 r15
load r0 r14 22 [2]
cmpi r0 0
breq L60
addi r0 r14 0
rjmp L61
L60:
addi r0 r14 1
L61:
cmpi r0 0
breq L62
addi r12 r14 0
ret
rjmp L63
L62:
L63:
load r0 r14 22 [2]
subi r0 r0 1
store r14 r0 22 [2]
load r1 r14 6 [2]
cmp r0 r1
brlt L64
addi r0 r14 0
rjmp L65
L64:
addi r0 r14 1
L65:
cmpi r0 0
breq L66
load r0 r14 24 [2]
subi r0 r0 1
store r14 r0 24 [2]
cmpi r0 0
brlt L68
addi r0 r14 0
rjmp L69
L68:
addi r0 r14 1
L69:
cmpi r0 0
breq L70
addi r0 r14 0
load r1 r14 26 [2]
subi r1 r1 1
store r14 r0 24 [2]
store r14 r1 26 [2]
rjmp L71
L70:
L71:
rjmp L67
L66:
load r0 r14 6 [2]
subi r0 r0 1
load r1 r14 2 [2]
move r2 r1
load r3 r14 4 [2]
move r4 r3
store r14 r0 22 [2]
store r14 r2 24 [2]
store r14 r4 26 [2]
L67:
move r12 r14
ret
advance_steps:
move r13 r15
load r0 r13 2 [2]
load r1 r14 6 [2]
cmp r0 r1
brge L72
addi r0 r14 0
rjmp L73
L72:
addi r0 r14 1
L73:
cmpi r0 0
breq L74
addi r12 r14 0
ret
rjmp L75
L74:
L75:
load r0 r14 22 [2]
load r1 r13 2 [2]
add r0 r0 r1
store r14 r0 22 [2]
load r2 r14 6 [2]
cmp r0 r2
brge L76
addi r0 r14 0
rjmp L77
L76:
addi r0 r14 1
L77:
cmpi r0 0
breq L78
load r0 r14 22 [2]
load r1 r14 6 [2]
sub r0 r0 r1
store r14 r0 22 [2]
rjmp L79
L78:
L79:
subi r15 r15 4
addi r15, r15, -2
store r15, r13, 0 [2]
subi r15 r15 2
load r0 r14 2 [2]
addi r15, r15, -2
store r15, r0, 0 [2]
load r1 r14 22 [2]
addi r15, r15, -2
store r15, r1, 0 [2]
subi r15 r15 2
call divide
addi r15 r15 8
load r13, r15, 0 [2]
addi r15, r15, 2
move r0 r12
subi r15 r15 4
addi r15, r15, -2
store r15, r13, 0 [2]
subi r15 r15 2
load r1 r14 4 [2]
addi r15, r15, -2
store r15, r1, 0 [2]
load r2 r14 22 [2]
addi r15, r15, -2
store r15, r2, 0 [2]
store r13 r0 -4 [4]
subi r15 r15 2
call divide
addi r15 r15 8
load r13, r15, 0 [2]
addi r15, r15, 2
move r0 r12
addi r15, r15, -2
store r15, r13, 0 [2]
subi r15 r15 2
addi r1 r14 16
addi r15, r15, -2
store r15, r1, 0 [2]
load r1 r13 -4 [4]
subi r15 r15 2
addi r15, r15, -4
store r15, r1, 0 [4]
store r13 r0 -8 [4]
subi r15 r15 2
call right_shift_l
addi r15 r15 12
load r13, r15, 0 [2]
addi r15, r15, 2
move r0 r12
addi r15, r15, -2
store r15, r13, 0 [2]
subi r15 r15 2
addi r1 r14 16
addi r15, r15, -2
store r15, r1, 0 [2]
load r1 r13 -8 [4]
subi r15 r15 2
addi r15, r15, -4
store r15, r1, 0 [4]
store r14 r0 24 [2]
subi r15 r15 2
call right_shift_l
addi r15 r15 12
load r13, r15, 0 [2]
addi r15, r15, 2
move r0 r12
store r14 r0 26 [2]
addi r12 r14 1
addi r15 r15 8
ret
advance_line:
move r13 r15
load r0 r14 26 [2]
addi r0 r0 1
store r14 r0 26 [2]
load r1 r14 4 [2]
cmp r0 r1
brlt L80
addi r0 r14 0
rjmp L81
L80:
addi r0 r14 1
L81:
cmpi r0 0
breq L82
load r0 r14 2 [2]
load r1 r14 26 [2]
mul r0 r0 r1
load r2 r14 24 [2]
add r0 r0 r2
store r14 r0 22 [2]
rjmp L83
L82:
load r0 r14 24 [2]
move r1 r0
addi r2 r14 0
store r14 r1 22 [2]
store r14 r2 26 [2]
L83:
move r12 r14
ret
back_line:
move r13 r15
load r0 r14 26 [2]
subi r0 r0 1
store r14 r0 26 [2]
cmpi r0 0
brge L84
addi r0 r14 0
rjmp L85
L84:
addi r0 r14 1
L85:
cmpi r0 0
breq L86
load r0 r14 2 [2]
load r1 r14 26 [2]
mul r0 r0 r1
load r2 r14 24 [2]
add r0 r0 r2
store r14 r0 22 [2]
rjmp L87
L86:
load r0 r14 24 [2]
move r1 r0
load r2 r14 4 [2]
subi r2 r2 1
store r14 r1 22 [2]
store r14 r2 26 [2]
L87:
move r12 r14
ret
new_line:
move r13 r15
load r0 r14 26 [2]
addi r0 r0 1
store r14 r0 26 [2]
load r1 r14 4 [2]
cmp r0 r1
brlt L88
addi r0 r14 0
rjmp L89
L88:
addi r0 r14 1
L89:
cmpi r0 0
breq L90
load r0 r14 2 [2]
load r1 r14 26 [2]
mul r0 r0 r1
store r14 r0 22 [2]
rjmp L91
L90:
addi r0 r14 0
addi r1 r14 0
store r14 r0 22 [2]
store r14 r1 26 [2]
L91:
addi r0 r14 0
store r14 r0 24 [2]
move r12 r14
ret
print_c_at:
move r13 r15
load r0 r13 5 [1]
load r1 r13 6 [2]
load r2 r14 18 [2]
load r3 r14 10 [2]
cmp r2 r3
brge L92
addi r2 r14 0
rjmp L93
L92:
addi r2 r14 1
L93:
load r4 r14 20 [2]
cmp r4 r3
brge L94
addi r4 r14 0
rjmp L95
L94:
addi r4 r14 1
L95:
or r2 r2 r4
cmpi r2 0
breq L96
addi r12 r14 0
ret
rjmp L97
L96:
L97:
subi r15 r15 2
load r0 r14 18 [2]
addi r15, r15, -2
store r15, r13, 0 [2]
addi r1 r14 4
addi r15, r15, -2
store r15, r1, 0 [2]
addi r15, r15, -2
store r15, r0, 0 [2]
store r13 r0 -2 [2]
subi r15 r15 2
call left_shift_i
addi r15 r15 6
load r13, r15, 0 [2]
addi r15, r15, 2
move r0 r12
store r13 r0 -2 [2]
load r1 r14 20 [2]
add r0 r0 r1
addi r15, r15, -2
store r15, r13, 0 [2]
addi r2 r14 8
addi r15, r15, -2
store r15, r2, 0 [2]
addi r15, r15, -2
store r15, r0, 0 [2]
store r13 r0 -2 [2]
subi r15 r15 2
call left_shift_i
addi r15 r15 6
load r13, r15, 0 [2]
addi r15, r15, 2
move r0 r12
subi r15 r15 2
load r1 r13 5 [1]
store r13 r1 -4 [2]
add r1 r1 r0
addi r15, r15, -2
store r15, r13, 0 [2]
subi r15 r15 2
load r2 r13 6 [2]
addi r15, r15, -2
store r15, r2, 0 [2]
addi r15, r15, -2
store r15, r1, 0 [2]
store r13 r0 -2 [2]
store r13 r1 -4 [2]
subi r15 r15 2
call tile_index_write
addi r15 r15 8
load r13, r15, 0 [2]
addi r15, r15, 2
addi r15 r15 4
ret
print_c_at_pos:
move r13 r15
load r0 r13 3 [1]
load r1 r13 4 [2]
load r2 r13 6 [2]
addi r15, r15, -2
store r15, r13, 0 [2]
subi r15 r15 2
load r3 r14 2 [2]
mul r3 r3 r2
add r1 r1 r3
addi r15, r15, -2
store r15, r1, 0 [2]
addi r15, r15, -1
store r15, r0, 0 [1]
subi r15 r15 3
call print_c_at
addi r15 r15 8
load r13, r15, 0 [2]
addi r15, r15, 2
ret
print_c:
move r13 r15
load r0 r13 3 [1]
addi r15, r15, -2
store r15, r13, 0 [2]
subi r15 r15 2
load r1 r14 22 [2]
addi r15, r15, -2
store r15, r1, 0 [2]
addi r15, r15, -1
store r15, r0, 0 [1]
subi r15 r15 3
call print_c_at
addi r15 r15 8
load r13, r15, 0 [2]
addi r15, r15, 2
cmpi r12 0
breq L98
addi r15, r15, -2
store r15, r13, 0 [2]
call advance_cursor
load r13, r15, 0 [2]
addi r15, r15, 2
addi r12 r14 1
ret
rjmp L99
L98:
L99:
addi r12 r14 0
ret
print:
move r13 r15
load r0 r13 2 [2]
L100:
load r0 r13 2 [2]
load r0 r0 0 [1]
cmpi r0 0
breq L101
addi r15, r15, -2
store r15, r13, 0 [2]
subi r15 r15 2
load r1 r13 2 [2]
load r1 r1 0 [1]
addi r15, r15, -1
store r15, r1, 0 [1]
subi r15 r15 1
call print_c
addi r15 r15 4
load r13, r15, 0 [2]
addi r15, r15, 2
load r0 r13 2 [2]
addi r0 r0 1
store r13 r0 2 [2]
rjmp L100
L101:
move r12 r14
ret
clear:
move r13 r15
subi r15 r15 2
addi r0 r14 0
store r13 r0 -2 [2]
L102:
load r0 r13 -2 [2]
load r1 r14 6 [2]
cmp r0 r1
brlt L104
addi r0 r14 0
rjmp L105
L104:
addi r0 r14 1
L105:
cmpi r0 0
breq L103
addi r15, r15, -2
store r15, r13, 0 [2]
load r2 r13 -2 [2]
addi r15, r15, -2
store r15, r2, 0 [2]
addi r3 r14 0
addi r15, r15, -2
store r15, r3, 0 [2]
subi r15 r15 2
call tile_index_write
addi r15 r15 6
load r13, r15, 0 [2]
addi r15, r15, 2
rjmp L102
L103:
addi r0 r14 0
addi r1 r14 0
addi r2 r14 0
addi r15 r15 2
store r14 r0 22 [2]
store r14 r1 24 [2]
store r14 r2 26 [2]
move r12 r14
ret
memset:
move r13 r15
load r0 r13 2 [2]
load r1 r13 4 [2]
load r2 r13 7 [1]
subi r15 r15 2
addi r3 r14 0
store r13 r3 -2 [2]
L106:
load r0 r13 -2 [2]
load r1 r13 4 [2]
cmp r0 r1
brlt L108
addi r0 r14 0
rjmp L109
L108:
addi r0 r14 1
L109:
cmpi r0 0
breq L107
load r2 r13 2 [2]
load r3 r13 -2 [2]
addi r4 r14 1
mul r3 r3 r4
add r2 r2 r3
load r4 r13 7 [1]
store r2 r4 0 [1]
addi r3 r3 1
store r13 r3 -2 [2]
rjmp L106
L107:
addi r15 r15 2
move r12 r14
ret
add_changed:
move r13 r15
load r0 r13 2 [2]
addi r1 r14 31
load r2 r14 29 [2]
addi r3 r14 2
mul r2 r2 r3
add r1 r1 r2
store r1 r0 0 [2]
addi r2 r2 1
store r14 r2 29 [2]
move r12 r14
ret
calc_next_gen:
move r13 r15
subi r15 r15 2
addi r0 r14 0
subi r15 r15 2
addi r1 r14 0
subi r15 r15 2
addi r2 r14 0
store r13 r0 -2 [2]
store r13 r1 -4 [2]
store r13 r2 -6 [2]
L110:
load r0 r13 -2 [2]
load r1 r14 6 [2]
cmp r0 r1
brlt L112
addi r0 r14 0
rjmp L113
L112:
addi r0 r14 1
L113:
cmpi r0 0
breq L111
subi r15 r15 2
addi r2 r14 0
subi r15 r15 2
addi r3 r14 -1
subi r15 r15 2
addi r4 r14 -1
store r13 r2 -8 [2]
store r13 r3 -10 [2]
store r13 r4 -12 [2]
L114:
load r0 r13 -12 [2]
cmpi r0 2
brlt L116
addi r0 r14 0
rjmp L117
L116:
addi r0 r14 1
L117:
cmpi r0 0
breq L115
L118:
load r0 r13 -10 [2]
cmpi r0 2
brlt L120
addi r0 r14 0
rjmp L121
L120:
addi r0 r14 1
L121:
cmpi r0 0
breq L119
subi r15 r15 2
load r1 r13 -4 [2]
load r2 r13 -10 [2]
add r1 r1 r2
subi r15 r15 2
load r3 r13 -6 [2]
load r4 r13 -12 [2]
add r3 r3 r4
store r13 r1 -14 [2]
load r5 r14 2 [2]
cmp r1 r5
brge L122
addi r1 r14 0
rjmp L123
L122:
addi r1 r14 1
L123:
store r13 r3 -16 [2]
cmpi r1 0
breq L124
addi r0 r14 0
store r13 r0 -14 [2]
rjmp L125
L124:
load r0 r13 -14 [2]
load r1 r14 2 [2]
cmp r0 r1
brle L126
addi r0 r14 0
rjmp L127
L126:
addi r0 r14 1
L127:
cmpi r0 0
breq L128
load r0 r14 2 [2]
subi r0 r0 1
store r13 r0 -14 [2]
rjmp L129
L128:
L129:
L125:
load r0 r13 -16 [2]
load r1 r14 4 [2]
cmp r0 r1
brge L130
addi r0 r14 0
rjmp L131
L130:
addi r0 r14 1
L131:
cmpi r0 0
breq L132
addi r0 r14 0
store r13 r0 -16 [2]
rjmp L133
L132:
load r0 r13 -14 [2]
load r1 r14 2 [2]
cmp r0 r1
brle L134
addi r0 r14 0
rjmp L135
L134:
addi r0 r14 1
L135:
cmpi r0 0
breq L136
load r0 r14 4 [2]
subi r0 r0 1
store r13 r0 -16 [2]
rjmp L137
L136:
L137:
L133:
subi r15 r15 2
load r0 r13 -14 [2]
load r1 r14 2 [2]
load r2 r13 -16 [2]
mul r1 r1 r2
add r0 r0 r1
load r3 r13 -8 [2]
addi r4 r14 28
store r13 r0 -18 [2]
add r0 r4 r0
load r0 r0 0 [1]
add r3 r3 r0
load r5 r13 -10 [2]
addi r5 r5 1
addi r15 r15 6
store r13 r3 -8 [2]
store r13 r5 -10 [2]
rjmp L118
L119:
load r0 r13 -12 [2]
addi r0 r0 1
store r13 r0 -12 [2]
rjmp L114
L115:
addi r0 r14 28
load r1 r13 -2 [2]
add r1 r0 r1
load r1 r1 0 [1]
cmpi r1 1
breq L138
addi r1 r14 0
rjmp L139
L138:
addi r1 r14 1
L139:
cmpi r1 0
breq L140
load r0 r13 -8 [2]
cmpi r0 2
brlt L142
addi r0 r14 0
rjmp L143
L142:
addi r0 r14 1
L143:
load r1 r13 -8 [2]
cmpi r1 3
brgt L144
addi r1 r14 0
rjmp L145
L144:
addi r1 r14 1
L145:
or r0 r0 r1
cmpi r0 0
breq L146
addi r15, r15, -2
store r15, r13, 0 [2]
subi r15 r15 2
load r0 r13 -2 [2]
addi r15, r15, -2
store r15, r0, 0 [2]
call add_changed
addi r15 r15 4
load r13, r15, 0 [2]
addi r15, r15, 2
rjmp L147
L146:
L147:
rjmp L141
L140:
load r0 r13 -8 [2]
cmpi r0 3
breq L148
addi r0 r14 0
rjmp L149
L148:
addi r0 r14 1
L149:
cmpi r0 0
breq L150
addi r15, r15, -2
store r15, r13, 0 [2]
subi r15 r15 2
load r0 r13 -2 [2]
addi r15, r15, -2
store r15, r0, 0 [2]
call add_changed
addi r15 r15 4
load r13, r15, 0 [2]
addi r15, r15, 2
rjmp L151
L150:
L151:
L141:
load r0 r13 -4 [2]
addi r0 r0 1
load r1 r13 -2 [2]
addi r1 r1 1
store r13 r0 -4 [2]
load r2 r14 2 [2]
cmp r0 r2
brge L152
addi r0 r14 0
rjmp L153
L152:
addi r0 r14 1
L153:
store r13 r1 -2 [2]
cmpi r0 0
breq L154
addi r0 r14 0
store r13 r0 -4 [2]
rjmp L155
L154:
L155:
addi r15 r15 6
rjmp L110
L111:
addi r15 r15 6
move r12 r14
ret
print_board:
move r13 r15
subi r15 r15 2
addi r0 r14 0
store r13 r0 -2 [2]
L156:
load r0 r13 -2 [2]
load r1 r14 6 [2]
cmp r0 r1
brlt L158
addi r0 r14 0
rjmp L159
L158:
addi r0 r14 1
L159:
cmpi r0 0
breq L157
addi r2 r14 28
load r3 r13 -2 [2]
add r3 r2 r3
load r3 r3 0 [1]
cmpi r3 0
breq L160
addi r15, r15, -2
store r15, r13, 0 [2]
load r0 r13 -2 [2]
addi r15, r15, -2
store r15, r0, 0 [2]
addi r1 r14 43
addi r15, r15, -2
store r15, r1, 0 [2]
subi r15 r15 2
call vga_write
addi r15 r15 6
load r13, r15, 0 [2]
addi r15, r15, 2
rjmp L161
L160:
addi r15, r15, -2
store r15, r13, 0 [2]
load r0 r13 -2 [2]
addi r15, r15, -2
store r15, r0, 0 [2]
addi r1 r14 32
addi r15, r15, -2
store r15, r1, 0 [2]
subi r15 r15 2
call vga_write
addi r15 r15 6
load r13, r15, 0 [2]
addi r15, r15, 2
L161:
rjmp L156
L157:
addi r15 r15 2
move r12 r14
ret
update_changed:
move r13 r15
subi r15 r15 2
addi r0 r14 0
store r13 r0 -2 [2]
L162:
load r0 r13 -2 [2]
load r1 r14 29 [2]
cmp r0 r1
brlt L164
addi r0 r14 0
rjmp L165
L164:
addi r0 r14 1
L165:
cmpi r0 0
breq L163
subi r15 r15 2
addi r2 r14 31
load r3 r13 -2 [2]
addi r4 r14 2
mul r3 r3 r4
add r3 r2 r3
load r3 r3 0 [2]
addi r4 r14 28
store r13 r3 -4 [2]
add r3 r4 r3
load r3 r3 0 [1]
cmpi r3 0
breq L166
addi r0 r14 28
load r1 r13 -4 [2]
addi r2 r14 1
mul r1 r1 r2
add r0 r0 r1
addi r2 r14 0
store r0 r2 0 [1]
rjmp L167
L166:
addi r0 r14 28
load r1 r13 -4 [2]
addi r2 r14 1
mul r1 r1 r2
add r0 r0 r1
addi r2 r14 1
store r0 r2 0 [1]
L167:
addi r15 r15 2
rjmp L162
L163:
addi r0 r14 0
addi r15 r15 2
store r14 r0 29 [2]
move r12 r14
ret
sleep_ms:
move r13 r15
load r0 r13 4 [4]
subi r15 r15 4
load r1 r14 158 [4]
mul r0 r0 r1
subi r15 r15 4
addi r2 r14 0
store r13 r0 -4 [4]
store r13 r2 -8 [4]
L168:
load r0 r13 -8 [4]
load r1 r13 -4 [4]
cmp r0 r1
brlt L170
addi r0 r14 0
rjmp L171
L170:
addi r0 r14 1
L171:
cmpi r0 0
breq L169
load r2 r13 -8 [4]
addi r2 r2 1
store r13 r2 -8 [4]
rjmp L168
L169:
addi r15 r15 8
move r12 r14
ret
next_gen:
move r13 r15
addi r15, r15, -2
store r15, r13, 0 [2]
call calc_next_gen
load r13, r15, 0 [2]
addi r15, r15, 2
addi r15, r15, -2
store r15, r13, 0 [2]
call update_changed
load r13, r15, 0 [2]
addi r15, r15, 2
move r12 r14
ret
main:
move r13 r15
addi r15, r15, -2
store r15, r13, 0 [2]
subi r15 r15 2
addi r0 r14 0
addi r15, r15, -1
store r15, r0, 0 [1]
load r0 r14 6 [2]
subi r15 r15 1
addi r15, r15, -2
store r15, r0, 0 [2]
addi r1 r14 28
addi r15, r15, -2
store r15, r1, 0 [2]
call memset
addi r15 r15 8
load r13, r15, 0 [2]
addi r15, r15, 2
addi r0 r14 28
addi r0 r0 41
addi r1 r14 1
store r0 r1 0 [1]
addi r0 r14 28
addi r0 r0 82
addi r1 r14 1
store r0 r1 0 [1]
addi r0 r14 28
addi r0 r0 121
addi r1 r14 1
store r0 r1 0 [1]
addi r0 r14 28
addi r0 r0 122
addi r1 r14 1
store r0 r1 0 [1]
addi r0 r14 28
addi r0 r0 123
addi r1 r14 1
store r0 r1 0 [1]
addi r15, r15, -2
store r15, r13, 0 [2]
call print_board
load r13, r15, 0 [2]
addi r15, r15, 2
L172:
addi r15, r15, -2
store r15, r13, 0 [2]
subi r15 r15 2
addi r0 r14 500
addi r15, r15, -4
store r15, r0, 0 [4]
subi r15 r15 2
call sleep_ms
addi r15 r15 8
load r13, r15, 0 [2]
addi r15, r15, 2
addi r15, r15, -2
store r15, r13, 0 [2]
call next_gen
load r13, r15, 0 [2]
addi r15, r15, 2
rjmp L172
L173:
move r12 r14
ret
(Pre subroutine_lap)
(Code after 'subroutine_lap')
 load r0 r14 2 [2]
load r1 r14 4 [2]
mul r0 r0 r1
store r14 r0 6 [2]
load r0 r14 6 [2]
store r14 r0 8 [2]
load r0 r14 6 [2]
load r2 r14 10 [2]
add r0 r0 r2
store r14 r0 12 [2]
subi r15 r15 1
movlo r13 r13 $$CALL_IDX$$
push r13 [2]
rjmp main
subi r15 r15 2
__halt:
rjmp __halt
in:
move r13 r15
load r0 r13 2 [2]
subi r15 r15 4
load r1 r13 -4 [4]
in r1 0
move r12 r1
addi r15 r15 4
pop r13 [2]
subi r13 r13 $$RET_IDX$$
rjmprg r13
out:
move r13 r15
load r0 r13 4 [4]
load r1 r13 10 [2]
out 0 r0
store r13 r0 4 [4]
move r12 r14
pop r13 [2]
subi r13 r13 $$RET_IDX$$
rjmprg r13
vga_write:
move r13 r15
load r0 r13 4 [2]
load r1 r13 6 [2]
vgaw r1 r0 0
store r13 r1 6 [2]
move r12 r14
pop r13 [2]
subi r13 r13 $$RET_IDX$$
rjmprg r13
outside_bound:
move r13 r15
load r0 r13 2 [2]
load r1 r13 4 [2]
load r2 r13 6 [2]
cmp r0 r2
brge L0
addi r0 r14 0
rjmp L1
L0:
addi r0 r14 1
L1:
load r3 r13 2 [2]
cmp r3 r1
brlt L2
addi r3 r14 0
rjmp L3
L2:
addi r3 r14 1
L3:
or r0 r0 r3
move r12 r0
pop r13 [2]
subi r13 r13 $$RET_IDX$$
rjmprg r13
left_shift_l:
move r13 r15
load r0 r13 4 [4]
load r1 r13 10 [2]
L4:
load r0 r13 10 [2]
cmpi r0 0
brgt L6
addi r0 r14 0
rjmp L7
L6:
addi r0 r14 1
L7:
cmpi r0 0
breq L5
load r1 r13 4 [4]
lsl r1 r1 [4]
load r2 r13 10 [2]
subi r2 r2 1
store r13 r1 4 [4]
store r13 r2 10 [2]
rjmp L4
L5:
load r0 r13 4 [4]
move r12 r0
pop r13 [2]
subi r13 r13 $$RET_IDX$$
rjmprg r13
right_shift_l:
move r13 r15
load r0 r13 4 [4]
load r1 r13 10 [2]
L8:
load r0 r13 10 [2]
cmpi r0 0
brgt L10
addi r0 r14 0
rjmp L11
L10:
addi r0 r14 1
L11:
cmpi r0 0
breq L9
load r1 r13 4 [4]
lsr r1 r1 [4]
load r2 r13 10 [2]
subi r2 r2 1
store r13 r1 4 [4]
store r13 r2 10 [2]
rjmp L8
L9:
load r0 r13 4 [4]
move r12 r0
pop r13 [2]
subi r13 r13 $$RET_IDX$$
rjmprg r13
left_shift_i:
move r13 r15
load r0 r13 4 [2]
load r1 r13 6 [2]
L12:
load r0 r13 6 [2]
cmpi r0 0
brgt L14
addi r0 r14 0
rjmp L15
L14:
addi r0 r14 1
L15:
cmpi r0 0
breq L13
load r1 r13 4 [2]
lsl r1 r1 [2]
load r2 r13 6 [2]
subi r2 r2 1
store r13 r1 4 [2]
store r13 r2 6 [2]
rjmp L12
L13:
load r0 r13 4 [2]
move r12 r0
pop r13 [2]
subi r13 r13 $$RET_IDX$$
rjmprg r13
right_shift_i:
move r13 r15
load r0 r13 4 [2]
load r1 r13 6 [2]
L16:
load r0 r13 6 [2]
cmpi r0 0
brgt L18
addi r0 r14 0
rjmp L19
L18:
addi r0 r14 1
L19:
cmpi r0 0
breq L17
load r1 r13 4 [2]
lsr r1 r1 [2]
load r2 r13 6 [2]
subi r2 r2 1
store r13 r1 4 [2]
store r13 r2 6 [2]
rjmp L16
L17:
load r0 r13 4 [2]
move r12 r0
pop r13 [2]
subi r13 r13 $$RET_IDX$$
rjmprg r13
left_shift_c:
move r13 r15
load r0 r13 5 [1]
load r1 r13 6 [2]
L20:
load r0 r13 6 [2]
cmpi r0 0
brgt L22
addi r0 r14 0
rjmp L23
L22:
addi r0 r14 1
L23:
cmpi r0 0
breq L21
load r1 r13 5 [1]
lsl r1 r1 [1]
load r2 r13 6 [2]
subi r2 r2 1
store r13 r1 5 [1]
store r13 r2 6 [2]
rjmp L20
L21:
load r0 r13 5 [1]
move r12 r0
pop r13 [2]
subi r13 r13 $$RET_IDX$$
rjmprg r13
right_shift_c:
move r13 r15
load r0 r13 5 [1]
load r1 r13 6 [2]
L24:
load r0 r13 6 [2]
cmpi r0 0
brgt L26
addi r0 r14 0
rjmp L27
L26:
addi r0 r14 1
L27:
cmpi r0 0
breq L25
load r1 r13 5 [1]
lsr r1 r1 [1]
load r2 r13 6 [2]
subi r2 r2 1
store r13 r1 5 [1]
store r13 r2 6 [2]
rjmp L24
L25:
load r0 r13 5 [1]
move r12 r0
pop r13 [2]
subi r13 r13 $$RET_IDX$$
rjmprg r13
divide:
move r13 r15
load r0 r13 4 [2]
load r1 r13 6 [2]
subi r15 r15 2
subi r15 r15 2
addi r2 r14 0
store r13 r0 -2 [2]
store r13 r2 -4 [2]
L28:
load r0 r13 -2 [2]
load r1 r13 6 [2]
cmp r0 r1
brgt L30
addi r0 r14 0
rjmp L31
L30:
addi r0 r14 1
L31:
cmpi r0 0
breq L29
load r2 r13 -2 [2]
sub r2 r2 r1
load r3 r13 -4 [2]
addi r3 r3 1
store r13 r2 -2 [2]
store r13 r3 -4 [2]
rjmp L28
L29:
subi r15 r15 4
load r0 r13 -4 [2]
addi r15, r15, -2
store r15, r13, 0 [2]
subi r15 r15 2
addi r1 r14 16
addi r15, r15, -2
store r15, r1, 0 [2]
subi r15 r15 2
addi r15, r15, -4
store r15, r0, 0 [4]
store r13 r0 -8 [4]
subi r15 r15 2
movlo r13 r13 $$CALL_IDX$$
push r13 [2]
rjmp left_shift_l
addi r15 r15 12
load r13, r15, 0 [2]
addi r15, r15, 2
move r0 r12
store r13 r0 -8 [4]
load r1 r13 -2 [2]
add r0 r0 r1
move r12 r0
addi r15 r15 8
pop r13 [2]
subi r13 r13 $$RET_IDX$$
rjmprg r13
tile_index_write:
move r13 r15
load r0 r13 4 [2]
load r3 r13 6 [2]
load r4 r14 6 [2]
cmp r3 r4
brge L32
addi r3 r14 0
rjmp L33
L32:
addi r3 r14 1
L33:
cmpi r3 0
breq L34
addi r12 r14 0
pop r13 [2]
subi r13 r13 $$RET_IDX$$
rjmprg r13
rjmp L35
L34:
L35:
addi r15, r15, -2
store r15, r13, 0 [2]
subi r15 r15 2
load r0 r13 6 [2]
addi r15, r15, -2
store r15, r0, 0 [2]
load r1 r13 4 [2]
addi r15, r15, -2
store r15, r1, 0 [2]
subi r15 r15 2
movlo r13 r13 $$CALL_IDX$$
push r13 [2]
rjmp vga_write
addi r15 r15 8
load r13, r15, 0 [2]
addi r15, r15, 2
addi r12 r14 1
pop r13 [2]
subi r13 r13 $$RET_IDX$$
rjmprg r13
tile_coord_write:
move r13 r15
load r0 r13 4 [4]
load r1 r13 8 [2]
load r2 r13 10 [2]
load r3 r14 14 [2]
cmp r1 r3
brge L36
addi r1 r14 0
rjmp L37
L36:
addi r1 r14 1
L37:
load r4 r14 16 [2]
cmp r2 r4
brge L38
addi r2 r14 0
rjmp L39
L38:
addi r2 r14 1
L39:
or r1 r1 r2
cmpi r1 0
breq L40
addi r12 r14 0
pop r13 [2]
subi r13 r13 $$RET_IDX$$
rjmprg r13
rjmp L41
L40:
L41:
subi r15 r15 2
load r0 r13 8 [2]
load r1 r14 14 [2]
load r2 r13 10 [2]
mul r1 r1 r2
add r0 r0 r1
addi r15, r15, -2
store r15, r13, 0 [2]
addi r15, r15, -2
store r15, r0, 0 [2]
load r3 r13 4 [4]
addi r15, r15, -2
store r15, r3, 0 [2]
store r13 r0 -2 [2]
subi r15 r15 2
movlo r13 r13 $$CALL_IDX$$
push r13 [2]
rjmp vga_write
addi r15 r15 6
load r13, r15, 0 [2]
addi r15, r15, 2
addi r12 r14 1
addi r15 r15 2
pop r13 [2]
subi r13 r13 $$RET_IDX$$
rjmprg r13
palette_index_write:
move r13 r15
load r0 r13 2 [2]
load r1 r13 4 [2]
load r2 r13 6 [2]
load r3 r14 10 [2]
cmp r0 r3
brge L42
addi r0 r14 0
rjmp L43
L42:
addi r0 r14 1
L43:
cmpi r0 0
breq L44
addi r12 r14 0
pop r13 [2]
subi r13 r13 $$RET_IDX$$
rjmprg r13
rjmp L45
L44:
L45:
subi r15 r15 2
load r0 r14 8 [2]
load r1 r13 2 [2]
add r0 r0 r1
subi r15 r15 2
load r2 r13 4 [2]
addi r15, r15, -2
store r15, r13, 0 [2]
subi r15 r15 2
addi r3 r14 8
addi r15, r15, -2
store r15, r3, 0 [2]
load r3 r13 4 [2]
addi r15, r15, -2
store r15, r3, 0 [2]
store r13 r0 -2 [2]
store r13 r2 -4 [2]
subi r15 r15 2
movlo r13 r13 $$CALL_IDX$$
push r13 [2]
rjmp left_shift_i
addi r15 r15 8
load r13, r15, 0 [2]
addi r15, r15, 2
move r0 r12
store r13 r0 -4 [2]
load r1 r13 6 [2]
add r0 r0 r1
addi r15, r15, -2
store r15, r13, 0 [2]
subi r15 r15 2
load r2 r13 -2 [2]
addi r15, r15, -2
store r15, r2, 0 [2]
addi r15, r15, -2
store r15, r0, 0 [2]
store r13 r0 -4 [2]
subi r15 r15 2
movlo r13 r13 $$CALL_IDX$$
push r13 [2]
rjmp vga_write
addi r15 r15 8
load r13, r15, 0 [2]
addi r15, r15, 2
addi r12 r14 1
addi r15 r15 4
pop r13 [2]
subi r13 r13 $$RET_IDX$$
rjmprg r13
set_cursor:
move r13 r15
load r0 r13 2 [1]
load r1 r13 3 [1]
load r2 r14 2 [2]
cmp r0 r2
brge L46
addi r0 r14 0
rjmp L47
L46:
addi r0 r14 1
L47:
load r3 r14 4 [2]
cmp r1 r3
brge L48
addi r1 r14 0
rjmp L49
L48:
addi r1 r14 1
L49:
or r0 r0 r1
cmpi r0 0
breq L50
addi r12 r14 0
pop r13 [2]
subi r13 r13 $$RET_IDX$$
rjmprg r13
rjmp L51
L50:
L51:
load r0 r13 2 [1]
move r1 r0
load r2 r13 3 [1]
move r3 r2
add r0 r0 r2
load r4 r14 2 [2]
mul r0 r0 r4
store r14 r0 22 [2]
store r14 r1 24 [2]
store r14 r3 26 [2]
addi r12 r14 1
pop r13 [2]
subi r13 r13 $$RET_IDX$$
rjmprg r13
advance_cursor:
move r13 r15
load r0 r14 22 [2]
addi r0 r0 1
store r14 r0 22 [2]
load r1 r14 6 [2]
cmp r0 r1
brlt L52
addi r0 r14 0
rjmp L53
L52:
addi r0 r14 1
L53:
cmpi r0 0
breq L54
load r0 r14 24 [2]
addi r0 r0 1
store r14 r0 24 [2]
load r1 r14 2 [2]
cmp r0 r1
brge L56
addi r0 r14 0
rjmp L57
L56:
addi r0 r14 1
L57:
cmpi r0 0
breq L58
addi r0 r14 0
load r1 r14 26 [2]
addi r1 r1 1
store r14 r0 24 [2]
store r14 r1 26 [2]
rjmp L59
L58:
L59:
rjmp L55
L54:
addi r0 r14 0
addi r1 r14 0
addi r2 r14 0
store r14 r0 22 [2]
store r14 r1 24 [2]
store r14 r2 26 [2]
L55:
move r12 r14
pop r13 [2]
subi r13 r13 $$RET_IDX$$
rjmprg r13
back_cursor:
move r13 r15
load r0 r14 22 [2]
cmpi r0 0
breq L60
addi r0 r14 0
rjmp L61
L60:
addi r0 r14 1
L61:
cmpi r0 0
breq L62
addi r12 r14 0
pop r13 [2]
subi r13 r13 $$RET_IDX$$
rjmprg r13
rjmp L63
L62:
L63:
load r0 r14 22 [2]
subi r0 r0 1
store r14 r0 22 [2]
load r1 r14 6 [2]
cmp r0 r1
brlt L64
addi r0 r14 0
rjmp L65
L64:
addi r0 r14 1
L65:
cmpi r0 0
breq L66
load r0 r14 24 [2]
subi r0 r0 1
store r14 r0 24 [2]
cmpi r0 0
brlt L68
addi r0 r14 0
rjmp L69
L68:
addi r0 r14 1
L69:
cmpi r0 0
breq L70
addi r0 r14 0
load r1 r14 26 [2]
subi r1 r1 1
store r14 r0 24 [2]
store r14 r1 26 [2]
rjmp L71
L70:
L71:
rjmp L67
L66:
load r0 r14 6 [2]
subi r0 r0 1
load r1 r14 2 [2]
move r2 r1
load r3 r14 4 [2]
move r4 r3
store r14 r0 22 [2]
store r14 r2 24 [2]
store r14 r4 26 [2]
L67:
move r12 r14
pop r13 [2]
subi r13 r13 $$RET_IDX$$
rjmprg r13
advance_steps:
move r13 r15
load r0 r13 2 [2]
load r1 r14 6 [2]
cmp r0 r1
brge L72
addi r0 r14 0
rjmp L73
L72:
addi r0 r14 1
L73:
cmpi r0 0
breq L74
addi r12 r14 0
pop r13 [2]
subi r13 r13 $$RET_IDX$$
rjmprg r13
rjmp L75
L74:
L75:
load r0 r14 22 [2]
load r1 r13 2 [2]
add r0 r0 r1
store r14 r0 22 [2]
load r2 r14 6 [2]
cmp r0 r2
brge L76
addi r0 r14 0
rjmp L77
L76:
addi r0 r14 1
L77:
cmpi r0 0
breq L78
load r0 r14 22 [2]
load r1 r14 6 [2]
sub r0 r0 r1
store r14 r0 22 [2]
rjmp L79
L78:
L79:
subi r15 r15 4
addi r15, r15, -2
store r15, r13, 0 [2]
subi r15 r15 2
load r0 r14 2 [2]
addi r15, r15, -2
store r15, r0, 0 [2]
load r1 r14 22 [2]
addi r15, r15, -2
store r15, r1, 0 [2]
subi r15 r15 2
movlo r13 r13 $$CALL_IDX$$
push r13 [2]
rjmp divide
addi r15 r15 8
load r13, r15, 0 [2]
addi r15, r15, 2
move r0 r12
subi r15 r15 4
addi r15, r15, -2
store r15, r13, 0 [2]
subi r15 r15 2
load r1 r14 4 [2]
addi r15, r15, -2
store r15, r1, 0 [2]
load r2 r14 22 [2]
addi r15, r15, -2
store r15, r2, 0 [2]
store r13 r0 -4 [4]
subi r15 r15 2
movlo r13 r13 $$CALL_IDX$$
push r13 [2]
rjmp divide
addi r15 r15 8
load r13, r15, 0 [2]
addi r15, r15, 2
move r0 r12
addi r15, r15, -2
store r15, r13, 0 [2]
subi r15 r15 2
addi r1 r14 16
addi r15, r15, -2
store r15, r1, 0 [2]
load r1 r13 -4 [4]
subi r15 r15 2
addi r15, r15, -4
store r15, r1, 0 [4]
store r13 r0 -8 [4]
subi r15 r15 2
movlo r13 r13 $$CALL_IDX$$
push r13 [2]
rjmp right_shift_l
addi r15 r15 12
load r13, r15, 0 [2]
addi r15, r15, 2
move r0 r12
addi r15, r15, -2
store r15, r13, 0 [2]
subi r15 r15 2
addi r1 r14 16
addi r15, r15, -2
store r15, r1, 0 [2]
load r1 r13 -8 [4]
subi r15 r15 2
addi r15, r15, -4
store r15, r1, 0 [4]
store r14 r0 24 [2]
subi r15 r15 2
movlo r13 r13 $$CALL_IDX$$
push r13 [2]
rjmp right_shift_l
addi r15 r15 12
load r13, r15, 0 [2]
addi r15, r15, 2
move r0 r12
store r14 r0 26 [2]
addi r12 r14 1
addi r15 r15 8
pop r13 [2]
subi r13 r13 $$RET_IDX$$
rjmprg r13
advance_line:
move r13 r15
load r0 r14 26 [2]
addi r0 r0 1
store r14 r0 26 [2]
load r1 r14 4 [2]
cmp r0 r1
brlt L80
addi r0 r14 0
rjmp L81
L80:
addi r0 r14 1
L81:
cmpi r0 0
breq L82
load r0 r14 2 [2]
load r1 r14 26 [2]
mul r0 r0 r1
load r2 r14 24 [2]
add r0 r0 r2
store r14 r0 22 [2]
rjmp L83
L82:
load r0 r14 24 [2]
move r1 r0
addi r2 r14 0
store r14 r1 22 [2]
store r14 r2 26 [2]
L83:
move r12 r14
pop r13 [2]
subi r13 r13 $$RET_IDX$$
rjmprg r13
back_line:
move r13 r15
load r0 r14 26 [2]
subi r0 r0 1
store r14 r0 26 [2]
cmpi r0 0
brge L84
addi r0 r14 0
rjmp L85
L84:
addi r0 r14 1
L85:
cmpi r0 0
breq L86
load r0 r14 2 [2]
load r1 r14 26 [2]
mul r0 r0 r1
load r2 r14 24 [2]
add r0 r0 r2
store r14 r0 22 [2]
rjmp L87
L86:
load r0 r14 24 [2]
move r1 r0
load r2 r14 4 [2]
subi r2 r2 1
store r14 r1 22 [2]
store r14 r2 26 [2]
L87:
move r12 r14
pop r13 [2]
subi r13 r13 $$RET_IDX$$
rjmprg r13
new_line:
move r13 r15
load r0 r14 26 [2]
addi r0 r0 1
store r14 r0 26 [2]
load r1 r14 4 [2]
cmp r0 r1
brlt L88
addi r0 r14 0
rjmp L89
L88:
addi r0 r14 1
L89:
cmpi r0 0
breq L90
load r0 r14 2 [2]
load r1 r14 26 [2]
mul r0 r0 r1
store r14 r0 22 [2]
rjmp L91
L90:
addi r0 r14 0
addi r1 r14 0
store r14 r0 22 [2]
store r14 r1 26 [2]
L91:
addi r0 r14 0
store r14 r0 24 [2]
move r12 r14
pop r13 [2]
subi r13 r13 $$RET_IDX$$
rjmprg r13
print_c_at:
move r13 r15
load r0 r13 5 [1]
load r1 r13 6 [2]
load r2 r14 18 [2]
load r3 r14 10 [2]
cmp r2 r3
brge L92
addi r2 r14 0
rjmp L93
L92:
addi r2 r14 1
L93:
load r4 r14 20 [2]
cmp r4 r3
brge L94
addi r4 r14 0
rjmp L95
L94:
addi r4 r14 1
L95:
or r2 r2 r4
cmpi r2 0
breq L96
addi r12 r14 0
pop r13 [2]
subi r13 r13 $$RET_IDX$$
rjmprg r13
rjmp L97
L96:
L97:
subi r15 r15 2
load r0 r14 18 [2]
addi r15, r15, -2
store r15, r13, 0 [2]
addi r1 r14 4
addi r15, r15, -2
store r15, r1, 0 [2]
addi r15, r15, -2
store r15, r0, 0 [2]
store r13 r0 -2 [2]
subi r15 r15 2
movlo r13 r13 $$CALL_IDX$$
push r13 [2]
rjmp left_shift_i
addi r15 r15 6
load r13, r15, 0 [2]
addi r15, r15, 2
move r0 r12
store r13 r0 -2 [2]
load r1 r14 20 [2]
add r0 r0 r1
addi r15, r15, -2
store r15, r13, 0 [2]
addi r2 r14 8
addi r15, r15, -2
store r15, r2, 0 [2]
addi r15, r15, -2
store r15, r0, 0 [2]
store r13 r0 -2 [2]
subi r15 r15 2
movlo r13 r13 $$CALL_IDX$$
push r13 [2]
rjmp left_shift_i
addi r15 r15 6
load r13, r15, 0 [2]
addi r15, r15, 2
move r0 r12
subi r15 r15 2
load r1 r13 5 [1]
store r13 r1 -4 [2]
add r1 r1 r0
addi r15, r15, -2
store r15, r13, 0 [2]
subi r15 r15 2
load r2 r13 6 [2]
addi r15, r15, -2
store r15, r2, 0 [2]
addi r15, r15, -2
store r15, r1, 0 [2]
store r13 r0 -2 [2]
store r13 r1 -4 [2]
subi r15 r15 2
movlo r13 r13 $$CALL_IDX$$
push r13 [2]
rjmp tile_index_write
addi r15 r15 8
load r13, r15, 0 [2]
addi r15, r15, 2
addi r15 r15 4
pop r13 [2]
subi r13 r13 $$RET_IDX$$
rjmprg r13
print_c_at_pos:
move r13 r15
load r0 r13 3 [1]
load r1 r13 4 [2]
load r2 r13 6 [2]
addi r15, r15, -2
store r15, r13, 0 [2]
subi r15 r15 2
load r3 r14 2 [2]
mul r3 r3 r2
add r1 r1 r3
addi r15, r15, -2
store r15, r1, 0 [2]
addi r15, r15, -1
store r15, r0, 0 [1]
subi r15 r15 3
movlo r13 r13 $$CALL_IDX$$
push r13 [2]
rjmp print_c_at
addi r15 r15 8
load r13, r15, 0 [2]
addi r15, r15, 2
pop r13 [2]
subi r13 r13 $$RET_IDX$$
rjmprg r13
print_c:
move r13 r15
load r0 r13 3 [1]
addi r15, r15, -2
store r15, r13, 0 [2]
subi r15 r15 2
load r1 r14 22 [2]
addi r15, r15, -2
store r15, r1, 0 [2]
addi r15, r15, -1
store r15, r0, 0 [1]
subi r15 r15 3
movlo r13 r13 $$CALL_IDX$$
push r13 [2]
rjmp print_c_at
addi r15 r15 8
load r13, r15, 0 [2]
addi r15, r15, 2
cmpi r12 0
breq L98
addi r15, r15, -2
store r15, r13, 0 [2]
movlo r13 r13 $$CALL_IDX$$
push r13 [2]
rjmp advance_cursor
load r13, r15, 0 [2]
addi r15, r15, 2
addi r12 r14 1
pop r13 [2]
subi r13 r13 $$RET_IDX$$
rjmprg r13
rjmp L99
L98:
L99:
addi r12 r14 0
pop r13 [2]
subi r13 r13 $$RET_IDX$$
rjmprg r13
print:
move r13 r15
load r0 r13 2 [2]
L100:
load r0 r13 2 [2]
load r0 r0 0 [1]
cmpi r0 0
breq L101
addi r15, r15, -2
store r15, r13, 0 [2]
subi r15 r15 2
load r1 r13 2 [2]
load r1 r1 0 [1]
addi r15, r15, -1
store r15, r1, 0 [1]
subi r15 r15 1
movlo r13 r13 $$CALL_IDX$$
push r13 [2]
rjmp print_c
addi r15 r15 4
load r13, r15, 0 [2]
addi r15, r15, 2
load r0 r13 2 [2]
addi r0 r0 1
store r13 r0 2 [2]
rjmp L100
L101:
move r12 r14
pop r13 [2]
subi r13 r13 $$RET_IDX$$
rjmprg r13
clear:
move r13 r15
subi r15 r15 2
addi r0 r14 0
store r13 r0 -2 [2]
L102:
load r0 r13 -2 [2]
load r1 r14 6 [2]
cmp r0 r1
brlt L104
addi r0 r14 0
rjmp L105
L104:
addi r0 r14 1
L105:
cmpi r0 0
breq L103
addi r15, r15, -2
store r15, r13, 0 [2]
load r2 r13 -2 [2]
addi r15, r15, -2
store r15, r2, 0 [2]
addi r3 r14 0
addi r15, r15, -2
store r15, r3, 0 [2]
subi r15 r15 2
movlo r13 r13 $$CALL_IDX$$
push r13 [2]
rjmp tile_index_write
addi r15 r15 6
load r13, r15, 0 [2]
addi r15, r15, 2
rjmp L102
L103:
addi r0 r14 0
addi r1 r14 0
addi r2 r14 0
addi r15 r15 2
store r14 r0 22 [2]
store r14 r1 24 [2]
store r14 r2 26 [2]
move r12 r14
pop r13 [2]
subi r13 r13 $$RET_IDX$$
rjmprg r13
memset:
move r13 r15
load r0 r13 2 [2]
load r1 r13 4 [2]
load r2 r13 7 [1]
subi r15 r15 2
addi r3 r14 0
store r13 r3 -2 [2]
L106:
load r0 r13 -2 [2]
load r1 r13 4 [2]
cmp r0 r1
brlt L108
addi r0 r14 0
rjmp L109
L108:
addi r0 r14 1
L109:
cmpi r0 0
breq L107
load r2 r13 2 [2]
load r3 r13 -2 [2]
addi r4 r14 1
mul r3 r3 r4
add r2 r2 r3
load r4 r13 7 [1]
store r2 r4 0 [1]
addi r3 r3 1
store r13 r3 -2 [2]
rjmp L106
L107:
addi r15 r15 2
move r12 r14
pop r13 [2]
subi r13 r13 $$RET_IDX$$
rjmprg r13
add_changed:
move r13 r15
load r0 r13 2 [2]
addi r1 r14 31
load r2 r14 29 [2]
addi r3 r14 2
mul r2 r2 r3
add r1 r1 r2
store r1 r0 0 [2]
addi r2 r2 1
store r14 r2 29 [2]
move r12 r14
pop r13 [2]
subi r13 r13 $$RET_IDX$$
rjmprg r13
calc_next_gen:
move r13 r15
subi r15 r15 2
addi r0 r14 0
subi r15 r15 2
addi r1 r14 0
subi r15 r15 2
addi r2 r14 0
store r13 r0 -2 [2]
store r13 r1 -4 [2]
store r13 r2 -6 [2]
L110:
load r0 r13 -2 [2]
load r1 r14 6 [2]
cmp r0 r1
brlt L112
addi r0 r14 0
rjmp L113
L112:
addi r0 r14 1
L113:
cmpi r0 0
breq L111
subi r15 r15 2
addi r2 r14 0
subi r15 r15 2
addi r3 r14 -1
subi r15 r15 2
addi r4 r14 -1
store r13 r2 -8 [2]
store r13 r3 -10 [2]
store r13 r4 -12 [2]
L114:
load r0 r13 -12 [2]
cmpi r0 2
brlt L116
addi r0 r14 0
rjmp L117
L116:
addi r0 r14 1
L117:
cmpi r0 0
breq L115
L118:
load r0 r13 -10 [2]
cmpi r0 2
brlt L120
addi r0 r14 0
rjmp L121
L120:
addi r0 r14 1
L121:
cmpi r0 0
breq L119
subi r15 r15 2
load r1 r13 -4 [2]
load r2 r13 -10 [2]
add r1 r1 r2
subi r15 r15 2
load r3 r13 -6 [2]
load r4 r13 -12 [2]
add r3 r3 r4
store r13 r1 -14 [2]
load r5 r14 2 [2]
cmp r1 r5
brge L122
addi r1 r14 0
rjmp L123
L122:
addi r1 r14 1
L123:
store r13 r3 -16 [2]
cmpi r1 0
breq L124
addi r0 r14 0
store r13 r0 -14 [2]
rjmp L125
L124:
load r0 r13 -14 [2]
load r1 r14 2 [2]
cmp r0 r1
brle L126
addi r0 r14 0
rjmp L127
L126:
addi r0 r14 1
L127:
cmpi r0 0
breq L128
load r0 r14 2 [2]
subi r0 r0 1
store r13 r0 -14 [2]
rjmp L129
L128:
L129:
L125:
load r0 r13 -16 [2]
load r1 r14 4 [2]
cmp r0 r1
brge L130
addi r0 r14 0
rjmp L131
L130:
addi r0 r14 1
L131:
cmpi r0 0
breq L132
addi r0 r14 0
store r13 r0 -16 [2]
rjmp L133
L132:
load r0 r13 -14 [2]
load r1 r14 2 [2]
cmp r0 r1
brle L134
addi r0 r14 0
rjmp L135
L134:
addi r0 r14 1
L135:
cmpi r0 0
breq L136
load r0 r14 4 [2]
subi r0 r0 1
store r13 r0 -16 [2]
rjmp L137
L136:
L137:
L133:
subi r15 r15 2
load r0 r13 -14 [2]
load r1 r14 2 [2]
load r2 r13 -16 [2]
mul r1 r1 r2
add r0 r0 r1
load r3 r13 -8 [2]
addi r4 r14 28
store r13 r0 -18 [2]
add r0 r4 r0
load r0 r0 0 [1]
add r3 r3 r0
load r5 r13 -10 [2]
addi r5 r5 1
addi r15 r15 6
store r13 r3 -8 [2]
store r13 r5 -10 [2]
rjmp L118
L119:
load r0 r13 -12 [2]
addi r0 r0 1
store r13 r0 -12 [2]
rjmp L114
L115:
addi r0 r14 28
load r1 r13 -2 [2]
add r1 r0 r1
load r1 r1 0 [1]
cmpi r1 1
breq L138
addi r1 r14 0
rjmp L139
L138:
addi r1 r14 1
L139:
cmpi r1 0
breq L140
load r0 r13 -8 [2]
cmpi r0 2
brlt L142
addi r0 r14 0
rjmp L143
L142:
addi r0 r14 1
L143:
load r1 r13 -8 [2]
cmpi r1 3
brgt L144
addi r1 r14 0
rjmp L145
L144:
addi r1 r14 1
L145:
or r0 r0 r1
cmpi r0 0
breq L146
addi r15, r15, -2
store r15, r13, 0 [2]
subi r15 r15 2
load r0 r13 -2 [2]
addi r15, r15, -2
store r15, r0, 0 [2]
movlo r13 r13 $$CALL_IDX$$
push r13 [2]
rjmp add_changed
addi r15 r15 4
load r13, r15, 0 [2]
addi r15, r15, 2
rjmp L147
L146:
L147:
rjmp L141
L140:
load r0 r13 -8 [2]
cmpi r0 3
breq L148
addi r0 r14 0
rjmp L149
L148:
addi r0 r14 1
L149:
cmpi r0 0
breq L150
addi r15, r15, -2
store r15, r13, 0 [2]
subi r15 r15 2
load r0 r13 -2 [2]
addi r15, r15, -2
store r15, r0, 0 [2]
movlo r13 r13 $$CALL_IDX$$
push r13 [2]
rjmp add_changed
addi r15 r15 4
load r13, r15, 0 [2]
addi r15, r15, 2
rjmp L151
L150:
L151:
L141:
load r0 r13 -4 [2]
addi r0 r0 1
load r1 r13 -2 [2]
addi r1 r1 1
store r13 r0 -4 [2]
load r2 r14 2 [2]
cmp r0 r2
brge L152
addi r0 r14 0
rjmp L153
L152:
addi r0 r14 1
L153:
store r13 r1 -2 [2]
cmpi r0 0
breq L154
addi r0 r14 0
store r13 r0 -4 [2]
rjmp L155
L154:
L155:
addi r15 r15 6
rjmp L110
L111:
addi r15 r15 6
move r12 r14
pop r13 [2]
subi r13 r13 $$RET_IDX$$
rjmprg r13
print_board:
move r13 r15
subi r15 r15 2
addi r0 r14 0
store r13 r0 -2 [2]
L156:
load r0 r13 -2 [2]
load r1 r14 6 [2]
cmp r0 r1
brlt L158
addi r0 r14 0
rjmp L159
L158:
addi r0 r14 1
L159:
cmpi r0 0
breq L157
addi r2 r14 28
load r3 r13 -2 [2]
add r3 r2 r3
load r3 r3 0 [1]
cmpi r3 0
breq L160
addi r15, r15, -2
store r15, r13, 0 [2]
load r0 r13 -2 [2]
addi r15, r15, -2
store r15, r0, 0 [2]
addi r1 r14 43
addi r15, r15, -2
store r15, r1, 0 [2]
subi r15 r15 2
movlo r13 r13 $$CALL_IDX$$
push r13 [2]
rjmp vga_write
addi r15 r15 6
load r13, r15, 0 [2]
addi r15, r15, 2
rjmp L161
L160:
addi r15, r15, -2
store r15, r13, 0 [2]
load r0 r13 -2 [2]
addi r15, r15, -2
store r15, r0, 0 [2]
addi r1 r14 32
addi r15, r15, -2
store r15, r1, 0 [2]
subi r15 r15 2
movlo r13 r13 $$CALL_IDX$$
push r13 [2]
rjmp vga_write
addi r15 r15 6
load r13, r15, 0 [2]
addi r15, r15, 2
L161:
rjmp L156
L157:
addi r15 r15 2
move r12 r14
pop r13 [2]
subi r13 r13 $$RET_IDX$$
rjmprg r13
update_changed:
move r13 r15
subi r15 r15 2
addi r0 r14 0
store r13 r0 -2 [2]
L162:
load r0 r13 -2 [2]
load r1 r14 29 [2]
cmp r0 r1
brlt L164
addi r0 r14 0
rjmp L165
L164:
addi r0 r14 1
L165:
cmpi r0 0
breq L163
subi r15 r15 2
addi r2 r14 31
load r3 r13 -2 [2]
addi r4 r14 2
mul r3 r3 r4
add r3 r2 r3
load r3 r3 0 [2]
addi r4 r14 28
store r13 r3 -4 [2]
add r3 r4 r3
load r3 r3 0 [1]
cmpi r3 0
breq L166
addi r0 r14 28
load r1 r13 -4 [2]
addi r2 r14 1
mul r1 r1 r2
add r0 r0 r1
addi r2 r14 0
store r0 r2 0 [1]
rjmp L167
L166:
addi r0 r14 28
load r1 r13 -4 [2]
addi r2 r14 1
mul r1 r1 r2
add r0 r0 r1
addi r2 r14 1
store r0 r2 0 [1]
L167:
addi r15 r15 2
rjmp L162
L163:
addi r0 r14 0
addi r15 r15 2
store r14 r0 29 [2]
move r12 r14
pop r13 [2]
subi r13 r13 $$RET_IDX$$
rjmprg r13
sleep_ms:
move r13 r15
load r0 r13 4 [4]
subi r15 r15 4
load r1 r14 158 [4]
mul r0 r0 r1
subi r15 r15 4
addi r2 r14 0
store r13 r0 -4 [4]
store r13 r2 -8 [4]
L168:
load r0 r13 -8 [4]
load r1 r13 -4 [4]
cmp r0 r1
brlt L170
addi r0 r14 0
rjmp L171
L170:
addi r0 r14 1
L171:
cmpi r0 0
breq L169
load r2 r13 -8 [4]
addi r2 r2 1
store r13 r2 -8 [4]
rjmp L168
L169:
addi r15 r15 8
move r12 r14
pop r13 [2]
subi r13 r13 $$RET_IDX$$
rjmprg r13
next_gen:
move r13 r15
addi r15, r15, -2
store r15, r13, 0 [2]
movlo r13 r13 $$CALL_IDX$$
push r13 [2]
rjmp calc_next_gen
load r13, r15, 0 [2]
addi r15, r15, 2
addi r15, r15, -2
store r15, r13, 0 [2]
movlo r13 r13 $$CALL_IDX$$
push r13 [2]
rjmp update_changed
load r13, r15, 0 [2]
addi r15, r15, 2
move r12 r14
pop r13 [2]
subi r13 r13 $$RET_IDX$$
rjmprg r13
main:
move r13 r15
addi r15, r15, -2
store r15, r13, 0 [2]
subi r15 r15 2
addi r0 r14 0
addi r15, r15, -1
store r15, r0, 0 [1]
load r0 r14 6 [2]
subi r15 r15 1
addi r15, r15, -2
store r15, r0, 0 [2]
addi r1 r14 28
addi r15, r15, -2
store r15, r1, 0 [2]
movlo r13 r13 $$CALL_IDX$$
push r13 [2]
rjmp memset
addi r15 r15 8
load r13, r15, 0 [2]
addi r15, r15, 2
addi r0 r14 28
addi r0 r0 41
addi r1 r14 1
store r0 r1 0 [1]
addi r0 r14 28
addi r0 r0 82
addi r1 r14 1
store r0 r1 0 [1]
addi r0 r14 28
addi r0 r0 121
addi r1 r14 1
store r0 r1 0 [1]
addi r0 r14 28
addi r0 r0 122
addi r1 r14 1
store r0 r1 0 [1]
addi r0 r14 28
addi r0 r0 123
addi r1 r14 1
store r0 r1 0 [1]
addi r15, r15, -2
store r15, r13, 0 [2]
movlo r13 r13 $$CALL_IDX$$
push r13 [2]
rjmp print_board
load r13, r15, 0 [2]
addi r15, r15, 2
L172:
addi r15, r15, -2
store r15, r13, 0 [2]
subi r15 r15 2
addi r0 r14 500
addi r15, r15, -4
store r15, r0, 0 [4]
subi r15 r15 2
movlo r13 r13 $$CALL_IDX$$
push r13 [2]
rjmp sleep_ms
addi r15 r15 8
load r13, r15, 0 [2]
addi r15, r15, 2
addi r15, r15, -2
store r15, r13, 0 [2]
movlo r13 r13 $$CALL_IDX$$
push r13 [2]
rjmp next_gen
load r13, r15, 0 [2]
addi r15, r15, 2
rjmp L172
L173:
move r12 r14
pop r13 [2]
subi r13 r13 $$RET_IDX$$
rjmprg r13
(Pre replace_pop_push)
(Code after 'replace_pop_push')
 load r0 r14 2 [2]
load r1 r14 4 [2]
mul r0 r0 r1
store r14 r0 6 [2]
load r0 r14 6 [2]
store r14 r0 8 [2]
load r0 r14 6 [2]
load r2 r14 10 [2]
add r0 r0 r2
store r14 r0 12 [2]
subi r15 r15 1
movlo r13 r13 $$CALL_IDX$$
addi r15, r15, -2
store r15, r13, 0 [2]
rjmp main
subi r15 r15 2
__halt:
rjmp __halt
in:
move r13 r15
load r0 r13 2 [2]
subi r15 r15 4
load r1 r13 -4 [4]
in r1 0
move r12 r1
addi r15 r15 4
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 $$RET_IDX$$
rjmprg r13
out:
move r13 r15
load r0 r13 4 [4]
load r1 r13 10 [2]
out 0 r0
store r13 r0 4 [4]
move r12 r14
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 $$RET_IDX$$
rjmprg r13
vga_write:
move r13 r15
load r0 r13 4 [2]
load r1 r13 6 [2]
vgaw r1 r0 0
store r13 r1 6 [2]
move r12 r14
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 $$RET_IDX$$
rjmprg r13
outside_bound:
move r13 r15
load r0 r13 2 [2]
load r1 r13 4 [2]
load r2 r13 6 [2]
cmp r0 r2
brge L0
addi r0 r14 0
rjmp L1
L0:
addi r0 r14 1
L1:
load r3 r13 2 [2]
cmp r3 r1
brlt L2
addi r3 r14 0
rjmp L3
L2:
addi r3 r14 1
L3:
or r0 r0 r3
move r12 r0
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 $$RET_IDX$$
rjmprg r13
left_shift_l:
move r13 r15
load r0 r13 4 [4]
load r1 r13 10 [2]
L4:
load r0 r13 10 [2]
cmpi r0 0
brgt L6
addi r0 r14 0
rjmp L7
L6:
addi r0 r14 1
L7:
cmpi r0 0
breq L5
load r1 r13 4 [4]
lsl r1 r1 [4]
load r2 r13 10 [2]
subi r2 r2 1
store r13 r1 4 [4]
store r13 r2 10 [2]
rjmp L4
L5:
load r0 r13 4 [4]
move r12 r0
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 $$RET_IDX$$
rjmprg r13
right_shift_l:
move r13 r15
load r0 r13 4 [4]
load r1 r13 10 [2]
L8:
load r0 r13 10 [2]
cmpi r0 0
brgt L10
addi r0 r14 0
rjmp L11
L10:
addi r0 r14 1
L11:
cmpi r0 0
breq L9
load r1 r13 4 [4]
lsr r1 r1 [4]
load r2 r13 10 [2]
subi r2 r2 1
store r13 r1 4 [4]
store r13 r2 10 [2]
rjmp L8
L9:
load r0 r13 4 [4]
move r12 r0
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 $$RET_IDX$$
rjmprg r13
left_shift_i:
move r13 r15
load r0 r13 4 [2]
load r1 r13 6 [2]
L12:
load r0 r13 6 [2]
cmpi r0 0
brgt L14
addi r0 r14 0
rjmp L15
L14:
addi r0 r14 1
L15:
cmpi r0 0
breq L13
load r1 r13 4 [2]
lsl r1 r1 [2]
load r2 r13 6 [2]
subi r2 r2 1
store r13 r1 4 [2]
store r13 r2 6 [2]
rjmp L12
L13:
load r0 r13 4 [2]
move r12 r0
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 $$RET_IDX$$
rjmprg r13
right_shift_i:
move r13 r15
load r0 r13 4 [2]
load r1 r13 6 [2]
L16:
load r0 r13 6 [2]
cmpi r0 0
brgt L18
addi r0 r14 0
rjmp L19
L18:
addi r0 r14 1
L19:
cmpi r0 0
breq L17
load r1 r13 4 [2]
lsr r1 r1 [2]
load r2 r13 6 [2]
subi r2 r2 1
store r13 r1 4 [2]
store r13 r2 6 [2]
rjmp L16
L17:
load r0 r13 4 [2]
move r12 r0
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 $$RET_IDX$$
rjmprg r13
left_shift_c:
move r13 r15
load r0 r13 5 [1]
load r1 r13 6 [2]
L20:
load r0 r13 6 [2]
cmpi r0 0
brgt L22
addi r0 r14 0
rjmp L23
L22:
addi r0 r14 1
L23:
cmpi r0 0
breq L21
load r1 r13 5 [1]
lsl r1 r1 [1]
load r2 r13 6 [2]
subi r2 r2 1
store r13 r1 5 [1]
store r13 r2 6 [2]
rjmp L20
L21:
load r0 r13 5 [1]
move r12 r0
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 $$RET_IDX$$
rjmprg r13
right_shift_c:
move r13 r15
load r0 r13 5 [1]
load r1 r13 6 [2]
L24:
load r0 r13 6 [2]
cmpi r0 0
brgt L26
addi r0 r14 0
rjmp L27
L26:
addi r0 r14 1
L27:
cmpi r0 0
breq L25
load r1 r13 5 [1]
lsr r1 r1 [1]
load r2 r13 6 [2]
subi r2 r2 1
store r13 r1 5 [1]
store r13 r2 6 [2]
rjmp L24
L25:
load r0 r13 5 [1]
move r12 r0
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 $$RET_IDX$$
rjmprg r13
divide:
move r13 r15
load r0 r13 4 [2]
load r1 r13 6 [2]
subi r15 r15 2
subi r15 r15 2
addi r2 r14 0
store r13 r0 -2 [2]
store r13 r2 -4 [2]
L28:
load r0 r13 -2 [2]
load r1 r13 6 [2]
cmp r0 r1
brgt L30
addi r0 r14 0
rjmp L31
L30:
addi r0 r14 1
L31:
cmpi r0 0
breq L29
load r2 r13 -2 [2]
sub r2 r2 r1
load r3 r13 -4 [2]
addi r3 r3 1
store r13 r2 -2 [2]
store r13 r3 -4 [2]
rjmp L28
L29:
subi r15 r15 4
load r0 r13 -4 [2]
addi r15, r15, -2
store r15, r13, 0 [2]
subi r15 r15 2
addi r1 r14 16
addi r15, r15, -2
store r15, r1, 0 [2]
subi r15 r15 2
addi r15, r15, -4
store r15, r0, 0 [4]
store r13 r0 -8 [4]
subi r15 r15 2
movlo r13 r13 $$CALL_IDX$$
addi r15, r15, -2
store r15, r13, 0 [2]
rjmp left_shift_l
addi r15 r15 12
load r13, r15, 0 [2]
addi r15, r15, 2
move r0 r12
store r13 r0 -8 [4]
load r1 r13 -2 [2]
add r0 r0 r1
move r12 r0
addi r15 r15 8
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 $$RET_IDX$$
rjmprg r13
tile_index_write:
move r13 r15
load r0 r13 4 [2]
load r3 r13 6 [2]
load r4 r14 6 [2]
cmp r3 r4
brge L32
addi r3 r14 0
rjmp L33
L32:
addi r3 r14 1
L33:
cmpi r3 0
breq L34
addi r12 r14 0
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 $$RET_IDX$$
rjmprg r13
rjmp L35
L34:
L35:
addi r15, r15, -2
store r15, r13, 0 [2]
subi r15 r15 2
load r0 r13 6 [2]
addi r15, r15, -2
store r15, r0, 0 [2]
load r1 r13 4 [2]
addi r15, r15, -2
store r15, r1, 0 [2]
subi r15 r15 2
movlo r13 r13 $$CALL_IDX$$
addi r15, r15, -2
store r15, r13, 0 [2]
rjmp vga_write
addi r15 r15 8
load r13, r15, 0 [2]
addi r15, r15, 2
addi r12 r14 1
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 $$RET_IDX$$
rjmprg r13
tile_coord_write:
move r13 r15
load r0 r13 4 [4]
load r1 r13 8 [2]
load r2 r13 10 [2]
load r3 r14 14 [2]
cmp r1 r3
brge L36
addi r1 r14 0
rjmp L37
L36:
addi r1 r14 1
L37:
load r4 r14 16 [2]
cmp r2 r4
brge L38
addi r2 r14 0
rjmp L39
L38:
addi r2 r14 1
L39:
or r1 r1 r2
cmpi r1 0
breq L40
addi r12 r14 0
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 $$RET_IDX$$
rjmprg r13
rjmp L41
L40:
L41:
subi r15 r15 2
load r0 r13 8 [2]
load r1 r14 14 [2]
load r2 r13 10 [2]
mul r1 r1 r2
add r0 r0 r1
addi r15, r15, -2
store r15, r13, 0 [2]
addi r15, r15, -2
store r15, r0, 0 [2]
load r3 r13 4 [4]
addi r15, r15, -2
store r15, r3, 0 [2]
store r13 r0 -2 [2]
subi r15 r15 2
movlo r13 r13 $$CALL_IDX$$
addi r15, r15, -2
store r15, r13, 0 [2]
rjmp vga_write
addi r15 r15 6
load r13, r15, 0 [2]
addi r15, r15, 2
addi r12 r14 1
addi r15 r15 2
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 $$RET_IDX$$
rjmprg r13
palette_index_write:
move r13 r15
load r0 r13 2 [2]
load r1 r13 4 [2]
load r2 r13 6 [2]
load r3 r14 10 [2]
cmp r0 r3
brge L42
addi r0 r14 0
rjmp L43
L42:
addi r0 r14 1
L43:
cmpi r0 0
breq L44
addi r12 r14 0
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 $$RET_IDX$$
rjmprg r13
rjmp L45
L44:
L45:
subi r15 r15 2
load r0 r14 8 [2]
load r1 r13 2 [2]
add r0 r0 r1
subi r15 r15 2
load r2 r13 4 [2]
addi r15, r15, -2
store r15, r13, 0 [2]
subi r15 r15 2
addi r3 r14 8
addi r15, r15, -2
store r15, r3, 0 [2]
load r3 r13 4 [2]
addi r15, r15, -2
store r15, r3, 0 [2]
store r13 r0 -2 [2]
store r13 r2 -4 [2]
subi r15 r15 2
movlo r13 r13 $$CALL_IDX$$
addi r15, r15, -2
store r15, r13, 0 [2]
rjmp left_shift_i
addi r15 r15 8
load r13, r15, 0 [2]
addi r15, r15, 2
move r0 r12
store r13 r0 -4 [2]
load r1 r13 6 [2]
add r0 r0 r1
addi r15, r15, -2
store r15, r13, 0 [2]
subi r15 r15 2
load r2 r13 -2 [2]
addi r15, r15, -2
store r15, r2, 0 [2]
addi r15, r15, -2
store r15, r0, 0 [2]
store r13 r0 -4 [2]
subi r15 r15 2
movlo r13 r13 $$CALL_IDX$$
addi r15, r15, -2
store r15, r13, 0 [2]
rjmp vga_write
addi r15 r15 8
load r13, r15, 0 [2]
addi r15, r15, 2
addi r12 r14 1
addi r15 r15 4
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 $$RET_IDX$$
rjmprg r13
set_cursor:
move r13 r15
load r0 r13 2 [1]
load r1 r13 3 [1]
load r2 r14 2 [2]
cmp r0 r2
brge L46
addi r0 r14 0
rjmp L47
L46:
addi r0 r14 1
L47:
load r3 r14 4 [2]
cmp r1 r3
brge L48
addi r1 r14 0
rjmp L49
L48:
addi r1 r14 1
L49:
or r0 r0 r1
cmpi r0 0
breq L50
addi r12 r14 0
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 $$RET_IDX$$
rjmprg r13
rjmp L51
L50:
L51:
load r0 r13 2 [1]
move r1 r0
load r2 r13 3 [1]
move r3 r2
add r0 r0 r2
load r4 r14 2 [2]
mul r0 r0 r4
store r14 r0 22 [2]
store r14 r1 24 [2]
store r14 r3 26 [2]
addi r12 r14 1
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 $$RET_IDX$$
rjmprg r13
advance_cursor:
move r13 r15
load r0 r14 22 [2]
addi r0 r0 1
store r14 r0 22 [2]
load r1 r14 6 [2]
cmp r0 r1
brlt L52
addi r0 r14 0
rjmp L53
L52:
addi r0 r14 1
L53:
cmpi r0 0
breq L54
load r0 r14 24 [2]
addi r0 r0 1
store r14 r0 24 [2]
load r1 r14 2 [2]
cmp r0 r1
brge L56
addi r0 r14 0
rjmp L57
L56:
addi r0 r14 1
L57:
cmpi r0 0
breq L58
addi r0 r14 0
load r1 r14 26 [2]
addi r1 r1 1
store r14 r0 24 [2]
store r14 r1 26 [2]
rjmp L59
L58:
L59:
rjmp L55
L54:
addi r0 r14 0
addi r1 r14 0
addi r2 r14 0
store r14 r0 22 [2]
store r14 r1 24 [2]
store r14 r2 26 [2]
L55:
move r12 r14
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 $$RET_IDX$$
rjmprg r13
back_cursor:
move r13 r15
load r0 r14 22 [2]
cmpi r0 0
breq L60
addi r0 r14 0
rjmp L61
L60:
addi r0 r14 1
L61:
cmpi r0 0
breq L62
addi r12 r14 0
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 $$RET_IDX$$
rjmprg r13
rjmp L63
L62:
L63:
load r0 r14 22 [2]
subi r0 r0 1
store r14 r0 22 [2]
load r1 r14 6 [2]
cmp r0 r1
brlt L64
addi r0 r14 0
rjmp L65
L64:
addi r0 r14 1
L65:
cmpi r0 0
breq L66
load r0 r14 24 [2]
subi r0 r0 1
store r14 r0 24 [2]
cmpi r0 0
brlt L68
addi r0 r14 0
rjmp L69
L68:
addi r0 r14 1
L69:
cmpi r0 0
breq L70
addi r0 r14 0
load r1 r14 26 [2]
subi r1 r1 1
store r14 r0 24 [2]
store r14 r1 26 [2]
rjmp L71
L70:
L71:
rjmp L67
L66:
load r0 r14 6 [2]
subi r0 r0 1
load r1 r14 2 [2]
move r2 r1
load r3 r14 4 [2]
move r4 r3
store r14 r0 22 [2]
store r14 r2 24 [2]
store r14 r4 26 [2]
L67:
move r12 r14
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 $$RET_IDX$$
rjmprg r13
advance_steps:
move r13 r15
load r0 r13 2 [2]
load r1 r14 6 [2]
cmp r0 r1
brge L72
addi r0 r14 0
rjmp L73
L72:
addi r0 r14 1
L73:
cmpi r0 0
breq L74
addi r12 r14 0
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 $$RET_IDX$$
rjmprg r13
rjmp L75
L74:
L75:
load r0 r14 22 [2]
load r1 r13 2 [2]
add r0 r0 r1
store r14 r0 22 [2]
load r2 r14 6 [2]
cmp r0 r2
brge L76
addi r0 r14 0
rjmp L77
L76:
addi r0 r14 1
L77:
cmpi r0 0
breq L78
load r0 r14 22 [2]
load r1 r14 6 [2]
sub r0 r0 r1
store r14 r0 22 [2]
rjmp L79
L78:
L79:
subi r15 r15 4
addi r15, r15, -2
store r15, r13, 0 [2]
subi r15 r15 2
load r0 r14 2 [2]
addi r15, r15, -2
store r15, r0, 0 [2]
load r1 r14 22 [2]
addi r15, r15, -2
store r15, r1, 0 [2]
subi r15 r15 2
movlo r13 r13 $$CALL_IDX$$
addi r15, r15, -2
store r15, r13, 0 [2]
rjmp divide
addi r15 r15 8
load r13, r15, 0 [2]
addi r15, r15, 2
move r0 r12
subi r15 r15 4
addi r15, r15, -2
store r15, r13, 0 [2]
subi r15 r15 2
load r1 r14 4 [2]
addi r15, r15, -2
store r15, r1, 0 [2]
load r2 r14 22 [2]
addi r15, r15, -2
store r15, r2, 0 [2]
store r13 r0 -4 [4]
subi r15 r15 2
movlo r13 r13 $$CALL_IDX$$
addi r15, r15, -2
store r15, r13, 0 [2]
rjmp divide
addi r15 r15 8
load r13, r15, 0 [2]
addi r15, r15, 2
move r0 r12
addi r15, r15, -2
store r15, r13, 0 [2]
subi r15 r15 2
addi r1 r14 16
addi r15, r15, -2
store r15, r1, 0 [2]
load r1 r13 -4 [4]
subi r15 r15 2
addi r15, r15, -4
store r15, r1, 0 [4]
store r13 r0 -8 [4]
subi r15 r15 2
movlo r13 r13 $$CALL_IDX$$
addi r15, r15, -2
store r15, r13, 0 [2]
rjmp right_shift_l
addi r15 r15 12
load r13, r15, 0 [2]
addi r15, r15, 2
move r0 r12
addi r15, r15, -2
store r15, r13, 0 [2]
subi r15 r15 2
addi r1 r14 16
addi r15, r15, -2
store r15, r1, 0 [2]
load r1 r13 -8 [4]
subi r15 r15 2
addi r15, r15, -4
store r15, r1, 0 [4]
store r14 r0 24 [2]
subi r15 r15 2
movlo r13 r13 $$CALL_IDX$$
addi r15, r15, -2
store r15, r13, 0 [2]
rjmp right_shift_l
addi r15 r15 12
load r13, r15, 0 [2]
addi r15, r15, 2
move r0 r12
store r14 r0 26 [2]
addi r12 r14 1
addi r15 r15 8
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 $$RET_IDX$$
rjmprg r13
advance_line:
move r13 r15
load r0 r14 26 [2]
addi r0 r0 1
store r14 r0 26 [2]
load r1 r14 4 [2]
cmp r0 r1
brlt L80
addi r0 r14 0
rjmp L81
L80:
addi r0 r14 1
L81:
cmpi r0 0
breq L82
load r0 r14 2 [2]
load r1 r14 26 [2]
mul r0 r0 r1
load r2 r14 24 [2]
add r0 r0 r2
store r14 r0 22 [2]
rjmp L83
L82:
load r0 r14 24 [2]
move r1 r0
addi r2 r14 0
store r14 r1 22 [2]
store r14 r2 26 [2]
L83:
move r12 r14
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 $$RET_IDX$$
rjmprg r13
back_line:
move r13 r15
load r0 r14 26 [2]
subi r0 r0 1
store r14 r0 26 [2]
cmpi r0 0
brge L84
addi r0 r14 0
rjmp L85
L84:
addi r0 r14 1
L85:
cmpi r0 0
breq L86
load r0 r14 2 [2]
load r1 r14 26 [2]
mul r0 r0 r1
load r2 r14 24 [2]
add r0 r0 r2
store r14 r0 22 [2]
rjmp L87
L86:
load r0 r14 24 [2]
move r1 r0
load r2 r14 4 [2]
subi r2 r2 1
store r14 r1 22 [2]
store r14 r2 26 [2]
L87:
move r12 r14
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 $$RET_IDX$$
rjmprg r13
new_line:
move r13 r15
load r0 r14 26 [2]
addi r0 r0 1
store r14 r0 26 [2]
load r1 r14 4 [2]
cmp r0 r1
brlt L88
addi r0 r14 0
rjmp L89
L88:
addi r0 r14 1
L89:
cmpi r0 0
breq L90
load r0 r14 2 [2]
load r1 r14 26 [2]
mul r0 r0 r1
store r14 r0 22 [2]
rjmp L91
L90:
addi r0 r14 0
addi r1 r14 0
store r14 r0 22 [2]
store r14 r1 26 [2]
L91:
addi r0 r14 0
store r14 r0 24 [2]
move r12 r14
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 $$RET_IDX$$
rjmprg r13
print_c_at:
move r13 r15
load r0 r13 5 [1]
load r1 r13 6 [2]
load r2 r14 18 [2]
load r3 r14 10 [2]
cmp r2 r3
brge L92
addi r2 r14 0
rjmp L93
L92:
addi r2 r14 1
L93:
load r4 r14 20 [2]
cmp r4 r3
brge L94
addi r4 r14 0
rjmp L95
L94:
addi r4 r14 1
L95:
or r2 r2 r4
cmpi r2 0
breq L96
addi r12 r14 0
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 $$RET_IDX$$
rjmprg r13
rjmp L97
L96:
L97:
subi r15 r15 2
load r0 r14 18 [2]
addi r15, r15, -2
store r15, r13, 0 [2]
addi r1 r14 4
addi r15, r15, -2
store r15, r1, 0 [2]
addi r15, r15, -2
store r15, r0, 0 [2]
store r13 r0 -2 [2]
subi r15 r15 2
movlo r13 r13 $$CALL_IDX$$
addi r15, r15, -2
store r15, r13, 0 [2]
rjmp left_shift_i
addi r15 r15 6
load r13, r15, 0 [2]
addi r15, r15, 2
move r0 r12
store r13 r0 -2 [2]
load r1 r14 20 [2]
add r0 r0 r1
addi r15, r15, -2
store r15, r13, 0 [2]
addi r2 r14 8
addi r15, r15, -2
store r15, r2, 0 [2]
addi r15, r15, -2
store r15, r0, 0 [2]
store r13 r0 -2 [2]
subi r15 r15 2
movlo r13 r13 $$CALL_IDX$$
addi r15, r15, -2
store r15, r13, 0 [2]
rjmp left_shift_i
addi r15 r15 6
load r13, r15, 0 [2]
addi r15, r15, 2
move r0 r12
subi r15 r15 2
load r1 r13 5 [1]
store r13 r1 -4 [2]
add r1 r1 r0
addi r15, r15, -2
store r15, r13, 0 [2]
subi r15 r15 2
load r2 r13 6 [2]
addi r15, r15, -2
store r15, r2, 0 [2]
addi r15, r15, -2
store r15, r1, 0 [2]
store r13 r0 -2 [2]
store r13 r1 -4 [2]
subi r15 r15 2
movlo r13 r13 $$CALL_IDX$$
addi r15, r15, -2
store r15, r13, 0 [2]
rjmp tile_index_write
addi r15 r15 8
load r13, r15, 0 [2]
addi r15, r15, 2
addi r15 r15 4
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 $$RET_IDX$$
rjmprg r13
print_c_at_pos:
move r13 r15
load r0 r13 3 [1]
load r1 r13 4 [2]
load r2 r13 6 [2]
addi r15, r15, -2
store r15, r13, 0 [2]
subi r15 r15 2
load r3 r14 2 [2]
mul r3 r3 r2
add r1 r1 r3
addi r15, r15, -2
store r15, r1, 0 [2]
addi r15, r15, -1
store r15, r0, 0 [1]
subi r15 r15 3
movlo r13 r13 $$CALL_IDX$$
addi r15, r15, -2
store r15, r13, 0 [2]
rjmp print_c_at
addi r15 r15 8
load r13, r15, 0 [2]
addi r15, r15, 2
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 $$RET_IDX$$
rjmprg r13
print_c:
move r13 r15
load r0 r13 3 [1]
addi r15, r15, -2
store r15, r13, 0 [2]
subi r15 r15 2
load r1 r14 22 [2]
addi r15, r15, -2
store r15, r1, 0 [2]
addi r15, r15, -1
store r15, r0, 0 [1]
subi r15 r15 3
movlo r13 r13 $$CALL_IDX$$
addi r15, r15, -2
store r15, r13, 0 [2]
rjmp print_c_at
addi r15 r15 8
load r13, r15, 0 [2]
addi r15, r15, 2
cmpi r12 0
breq L98
addi r15, r15, -2
store r15, r13, 0 [2]
movlo r13 r13 $$CALL_IDX$$
addi r15, r15, -2
store r15, r13, 0 [2]
rjmp advance_cursor
load r13, r15, 0 [2]
addi r15, r15, 2
addi r12 r14 1
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 $$RET_IDX$$
rjmprg r13
rjmp L99
L98:
L99:
addi r12 r14 0
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 $$RET_IDX$$
rjmprg r13
print:
move r13 r15
load r0 r13 2 [2]
L100:
load r0 r13 2 [2]
load r0 r0 0 [1]
cmpi r0 0
breq L101
addi r15, r15, -2
store r15, r13, 0 [2]
subi r15 r15 2
load r1 r13 2 [2]
load r1 r1 0 [1]
addi r15, r15, -1
store r15, r1, 0 [1]
subi r15 r15 1
movlo r13 r13 $$CALL_IDX$$
addi r15, r15, -2
store r15, r13, 0 [2]
rjmp print_c
addi r15 r15 4
load r13, r15, 0 [2]
addi r15, r15, 2
load r0 r13 2 [2]
addi r0 r0 1
store r13 r0 2 [2]
rjmp L100
L101:
move r12 r14
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 $$RET_IDX$$
rjmprg r13
clear:
move r13 r15
subi r15 r15 2
addi r0 r14 0
store r13 r0 -2 [2]
L102:
load r0 r13 -2 [2]
load r1 r14 6 [2]
cmp r0 r1
brlt L104
addi r0 r14 0
rjmp L105
L104:
addi r0 r14 1
L105:
cmpi r0 0
breq L103
addi r15, r15, -2
store r15, r13, 0 [2]
load r2 r13 -2 [2]
addi r15, r15, -2
store r15, r2, 0 [2]
addi r3 r14 0
addi r15, r15, -2
store r15, r3, 0 [2]
subi r15 r15 2
movlo r13 r13 $$CALL_IDX$$
addi r15, r15, -2
store r15, r13, 0 [2]
rjmp tile_index_write
addi r15 r15 6
load r13, r15, 0 [2]
addi r15, r15, 2
rjmp L102
L103:
addi r0 r14 0
addi r1 r14 0
addi r2 r14 0
addi r15 r15 2
store r14 r0 22 [2]
store r14 r1 24 [2]
store r14 r2 26 [2]
move r12 r14
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 $$RET_IDX$$
rjmprg r13
memset:
move r13 r15
load r0 r13 2 [2]
load r1 r13 4 [2]
load r2 r13 7 [1]
subi r15 r15 2
addi r3 r14 0
store r13 r3 -2 [2]
L106:
load r0 r13 -2 [2]
load r1 r13 4 [2]
cmp r0 r1
brlt L108
addi r0 r14 0
rjmp L109
L108:
addi r0 r14 1
L109:
cmpi r0 0
breq L107
load r2 r13 2 [2]
load r3 r13 -2 [2]
addi r4 r14 1
mul r3 r3 r4
add r2 r2 r3
load r4 r13 7 [1]
store r2 r4 0 [1]
addi r3 r3 1
store r13 r3 -2 [2]
rjmp L106
L107:
addi r15 r15 2
move r12 r14
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 $$RET_IDX$$
rjmprg r13
add_changed:
move r13 r15
load r0 r13 2 [2]
addi r1 r14 31
load r2 r14 29 [2]
addi r3 r14 2
mul r2 r2 r3
add r1 r1 r2
store r1 r0 0 [2]
addi r2 r2 1
store r14 r2 29 [2]
move r12 r14
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 $$RET_IDX$$
rjmprg r13
calc_next_gen:
move r13 r15
subi r15 r15 2
addi r0 r14 0
subi r15 r15 2
addi r1 r14 0
subi r15 r15 2
addi r2 r14 0
store r13 r0 -2 [2]
store r13 r1 -4 [2]
store r13 r2 -6 [2]
L110:
load r0 r13 -2 [2]
load r1 r14 6 [2]
cmp r0 r1
brlt L112
addi r0 r14 0
rjmp L113
L112:
addi r0 r14 1
L113:
cmpi r0 0
breq L111
subi r15 r15 2
addi r2 r14 0
subi r15 r15 2
addi r3 r14 -1
subi r15 r15 2
addi r4 r14 -1
store r13 r2 -8 [2]
store r13 r3 -10 [2]
store r13 r4 -12 [2]
L114:
load r0 r13 -12 [2]
cmpi r0 2
brlt L116
addi r0 r14 0
rjmp L117
L116:
addi r0 r14 1
L117:
cmpi r0 0
breq L115
L118:
load r0 r13 -10 [2]
cmpi r0 2
brlt L120
addi r0 r14 0
rjmp L121
L120:
addi r0 r14 1
L121:
cmpi r0 0
breq L119
subi r15 r15 2
load r1 r13 -4 [2]
load r2 r13 -10 [2]
add r1 r1 r2
subi r15 r15 2
load r3 r13 -6 [2]
load r4 r13 -12 [2]
add r3 r3 r4
store r13 r1 -14 [2]
load r5 r14 2 [2]
cmp r1 r5
brge L122
addi r1 r14 0
rjmp L123
L122:
addi r1 r14 1
L123:
store r13 r3 -16 [2]
cmpi r1 0
breq L124
addi r0 r14 0
store r13 r0 -14 [2]
rjmp L125
L124:
load r0 r13 -14 [2]
load r1 r14 2 [2]
cmp r0 r1
brle L126
addi r0 r14 0
rjmp L127
L126:
addi r0 r14 1
L127:
cmpi r0 0
breq L128
load r0 r14 2 [2]
subi r0 r0 1
store r13 r0 -14 [2]
rjmp L129
L128:
L129:
L125:
load r0 r13 -16 [2]
load r1 r14 4 [2]
cmp r0 r1
brge L130
addi r0 r14 0
rjmp L131
L130:
addi r0 r14 1
L131:
cmpi r0 0
breq L132
addi r0 r14 0
store r13 r0 -16 [2]
rjmp L133
L132:
load r0 r13 -14 [2]
load r1 r14 2 [2]
cmp r0 r1
brle L134
addi r0 r14 0
rjmp L135
L134:
addi r0 r14 1
L135:
cmpi r0 0
breq L136
load r0 r14 4 [2]
subi r0 r0 1
store r13 r0 -16 [2]
rjmp L137
L136:
L137:
L133:
subi r15 r15 2
load r0 r13 -14 [2]
load r1 r14 2 [2]
load r2 r13 -16 [2]
mul r1 r1 r2
add r0 r0 r1
load r3 r13 -8 [2]
addi r4 r14 28
store r13 r0 -18 [2]
add r0 r4 r0
load r0 r0 0 [1]
add r3 r3 r0
load r5 r13 -10 [2]
addi r5 r5 1
addi r15 r15 6
store r13 r3 -8 [2]
store r13 r5 -10 [2]
rjmp L118
L119:
load r0 r13 -12 [2]
addi r0 r0 1
store r13 r0 -12 [2]
rjmp L114
L115:
addi r0 r14 28
load r1 r13 -2 [2]
add r1 r0 r1
load r1 r1 0 [1]
cmpi r1 1
breq L138
addi r1 r14 0
rjmp L139
L138:
addi r1 r14 1
L139:
cmpi r1 0
breq L140
load r0 r13 -8 [2]
cmpi r0 2
brlt L142
addi r0 r14 0
rjmp L143
L142:
addi r0 r14 1
L143:
load r1 r13 -8 [2]
cmpi r1 3
brgt L144
addi r1 r14 0
rjmp L145
L144:
addi r1 r14 1
L145:
or r0 r0 r1
cmpi r0 0
breq L146
addi r15, r15, -2
store r15, r13, 0 [2]
subi r15 r15 2
load r0 r13 -2 [2]
addi r15, r15, -2
store r15, r0, 0 [2]
movlo r13 r13 $$CALL_IDX$$
addi r15, r15, -2
store r15, r13, 0 [2]
rjmp add_changed
addi r15 r15 4
load r13, r15, 0 [2]
addi r15, r15, 2
rjmp L147
L146:
L147:
rjmp L141
L140:
load r0 r13 -8 [2]
cmpi r0 3
breq L148
addi r0 r14 0
rjmp L149
L148:
addi r0 r14 1
L149:
cmpi r0 0
breq L150
addi r15, r15, -2
store r15, r13, 0 [2]
subi r15 r15 2
load r0 r13 -2 [2]
addi r15, r15, -2
store r15, r0, 0 [2]
movlo r13 r13 $$CALL_IDX$$
addi r15, r15, -2
store r15, r13, 0 [2]
rjmp add_changed
addi r15 r15 4
load r13, r15, 0 [2]
addi r15, r15, 2
rjmp L151
L150:
L151:
L141:
load r0 r13 -4 [2]
addi r0 r0 1
load r1 r13 -2 [2]
addi r1 r1 1
store r13 r0 -4 [2]
load r2 r14 2 [2]
cmp r0 r2
brge L152
addi r0 r14 0
rjmp L153
L152:
addi r0 r14 1
L153:
store r13 r1 -2 [2]
cmpi r0 0
breq L154
addi r0 r14 0
store r13 r0 -4 [2]
rjmp L155
L154:
L155:
addi r15 r15 6
rjmp L110
L111:
addi r15 r15 6
move r12 r14
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 $$RET_IDX$$
rjmprg r13
print_board:
move r13 r15
subi r15 r15 2
addi r0 r14 0
store r13 r0 -2 [2]
L156:
load r0 r13 -2 [2]
load r1 r14 6 [2]
cmp r0 r1
brlt L158
addi r0 r14 0
rjmp L159
L158:
addi r0 r14 1
L159:
cmpi r0 0
breq L157
addi r2 r14 28
load r3 r13 -2 [2]
add r3 r2 r3
load r3 r3 0 [1]
cmpi r3 0
breq L160
addi r15, r15, -2
store r15, r13, 0 [2]
load r0 r13 -2 [2]
addi r15, r15, -2
store r15, r0, 0 [2]
addi r1 r14 43
addi r15, r15, -2
store r15, r1, 0 [2]
subi r15 r15 2
movlo r13 r13 $$CALL_IDX$$
addi r15, r15, -2
store r15, r13, 0 [2]
rjmp vga_write
addi r15 r15 6
load r13, r15, 0 [2]
addi r15, r15, 2
rjmp L161
L160:
addi r15, r15, -2
store r15, r13, 0 [2]
load r0 r13 -2 [2]
addi r15, r15, -2
store r15, r0, 0 [2]
addi r1 r14 32
addi r15, r15, -2
store r15, r1, 0 [2]
subi r15 r15 2
movlo r13 r13 $$CALL_IDX$$
addi r15, r15, -2
store r15, r13, 0 [2]
rjmp vga_write
addi r15 r15 6
load r13, r15, 0 [2]
addi r15, r15, 2
L161:
rjmp L156
L157:
addi r15 r15 2
move r12 r14
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 $$RET_IDX$$
rjmprg r13
update_changed:
move r13 r15
subi r15 r15 2
addi r0 r14 0
store r13 r0 -2 [2]
L162:
load r0 r13 -2 [2]
load r1 r14 29 [2]
cmp r0 r1
brlt L164
addi r0 r14 0
rjmp L165
L164:
addi r0 r14 1
L165:
cmpi r0 0
breq L163
subi r15 r15 2
addi r2 r14 31
load r3 r13 -2 [2]
addi r4 r14 2
mul r3 r3 r4
add r3 r2 r3
load r3 r3 0 [2]
addi r4 r14 28
store r13 r3 -4 [2]
add r3 r4 r3
load r3 r3 0 [1]
cmpi r3 0
breq L166
addi r0 r14 28
load r1 r13 -4 [2]
addi r2 r14 1
mul r1 r1 r2
add r0 r0 r1
addi r2 r14 0
store r0 r2 0 [1]
rjmp L167
L166:
addi r0 r14 28
load r1 r13 -4 [2]
addi r2 r14 1
mul r1 r1 r2
add r0 r0 r1
addi r2 r14 1
store r0 r2 0 [1]
L167:
addi r15 r15 2
rjmp L162
L163:
addi r0 r14 0
addi r15 r15 2
store r14 r0 29 [2]
move r12 r14
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 $$RET_IDX$$
rjmprg r13
sleep_ms:
move r13 r15
load r0 r13 4 [4]
subi r15 r15 4
load r1 r14 158 [4]
mul r0 r0 r1
subi r15 r15 4
addi r2 r14 0
store r13 r0 -4 [4]
store r13 r2 -8 [4]
L168:
load r0 r13 -8 [4]
load r1 r13 -4 [4]
cmp r0 r1
brlt L170
addi r0 r14 0
rjmp L171
L170:
addi r0 r14 1
L171:
cmpi r0 0
breq L169
load r2 r13 -8 [4]
addi r2 r2 1
store r13 r2 -8 [4]
rjmp L168
L169:
addi r15 r15 8
move r12 r14
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 $$RET_IDX$$
rjmprg r13
next_gen:
move r13 r15
addi r15, r15, -2
store r15, r13, 0 [2]
movlo r13 r13 $$CALL_IDX$$
addi r15, r15, -2
store r15, r13, 0 [2]
rjmp calc_next_gen
load r13, r15, 0 [2]
addi r15, r15, 2
addi r15, r15, -2
store r15, r13, 0 [2]
movlo r13 r13 $$CALL_IDX$$
addi r15, r15, -2
store r15, r13, 0 [2]
rjmp update_changed
load r13, r15, 0 [2]
addi r15, r15, 2
move r12 r14
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 $$RET_IDX$$
rjmprg r13
main:
move r13 r15
addi r15, r15, -2
store r15, r13, 0 [2]
subi r15 r15 2
addi r0 r14 0
addi r15, r15, -1
store r15, r0, 0 [1]
load r0 r14 6 [2]
subi r15 r15 1
addi r15, r15, -2
store r15, r0, 0 [2]
addi r1 r14 28
addi r15, r15, -2
store r15, r1, 0 [2]
movlo r13 r13 $$CALL_IDX$$
addi r15, r15, -2
store r15, r13, 0 [2]
rjmp memset
addi r15 r15 8
load r13, r15, 0 [2]
addi r15, r15, 2
addi r0 r14 28
addi r0 r0 41
addi r1 r14 1
store r0 r1 0 [1]
addi r0 r14 28
addi r0 r0 82
addi r1 r14 1
store r0 r1 0 [1]
addi r0 r14 28
addi r0 r0 121
addi r1 r14 1
store r0 r1 0 [1]
addi r0 r14 28
addi r0 r0 122
addi r1 r14 1
store r0 r1 0 [1]
addi r0 r14 28
addi r0 r0 123
addi r1 r14 1
store r0 r1 0 [1]
addi r15, r15, -2
store r15, r13, 0 [2]
movlo r13 r13 $$CALL_IDX$$
addi r15, r15, -2
store r15, r13, 0 [2]
rjmp print_board
load r13, r15, 0 [2]
addi r15, r15, 2
L172:
addi r15, r15, -2
store r15, r13, 0 [2]
subi r15 r15 2
addi r0 r14 500
addi r15, r15, -4
store r15, r0, 0 [4]
subi r15 r15 2
movlo r13 r13 $$CALL_IDX$$
addi r15, r15, -2
store r15, r13, 0 [2]
rjmp sleep_ms
addi r15 r15 8
load r13, r15, 0 [2]
addi r15, r15, 2
addi r15, r15, -2
store r15, r13, 0 [2]
movlo r13 r13 $$CALL_IDX$$
addi r15, r15, -2
store r15, r13, 0 [2]
rjmp next_gen
load r13, r15, 0 [2]
addi r15, r15, 2
rjmp L172
L173:
move r12 r14
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 $$RET_IDX$$
rjmprg r13
(Pre handle_labels)
(Code after 'handle_labels')
 load r0 r14 2 [2]
load r1 r14 4 [2]
mul r0 r0 r1
store r14 r0 6 [2]
load r0 r14 6 [2]
store r14 r0 8 [2]
load r0 r14 6 [2]
load r2 r14 10 [2]
add r0 r0 r2
store r14 r0 12 [2]
subi r15 r15 1
movlo r13 r13 $$CALL_IDX$$
addi r15, r15, -2
store r15, r13, 0 [2]
rjmp main
subi r15 r15 2
rjmp __halt
move r13 r15
load r0 r13 2 [2]
subi r15 r15 4
load r1 r13 -4 [4]
in r1 0
move r12 r1
addi r15 r15 4
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 $$RET_IDX$$
rjmprg r13
move r13 r15
load r0 r13 4 [4]
load r1 r13 10 [2]
out 0 r0
store r13 r0 4 [4]
move r12 r14
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 $$RET_IDX$$
rjmprg r13
move r13 r15
load r0 r13 4 [2]
load r1 r13 6 [2]
vgaw r1 r0 0
store r13 r1 6 [2]
move r12 r14
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 $$RET_IDX$$
rjmprg r13
move r13 r15
load r0 r13 2 [2]
load r1 r13 4 [2]
load r2 r13 6 [2]
cmp r0 r2
brge L0
addi r0 r14 0
rjmp L1
addi r0 r14 1
load r3 r13 2 [2]
cmp r3 r1
brlt L2
addi r3 r14 0
rjmp L3
addi r3 r14 1
or r0 r0 r3
move r12 r0
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 $$RET_IDX$$
rjmprg r13
move r13 r15
load r0 r13 4 [4]
load r1 r13 10 [2]
load r0 r13 10 [2]
cmpi r0 0
brgt L6
addi r0 r14 0
rjmp L7
addi r0 r14 1
cmpi r0 0
breq L5
load r1 r13 4 [4]
lsl r1 r1 [4]
load r2 r13 10 [2]
subi r2 r2 1
store r13 r1 4 [4]
store r13 r2 10 [2]
rjmp L4
load r0 r13 4 [4]
move r12 r0
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 $$RET_IDX$$
rjmprg r13
move r13 r15
load r0 r13 4 [4]
load r1 r13 10 [2]
load r0 r13 10 [2]
cmpi r0 0
brgt L10
addi r0 r14 0
rjmp L11
addi r0 r14 1
cmpi r0 0
breq L9
load r1 r13 4 [4]
lsr r1 r1 [4]
load r2 r13 10 [2]
subi r2 r2 1
store r13 r1 4 [4]
store r13 r2 10 [2]
rjmp L8
load r0 r13 4 [4]
move r12 r0
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 $$RET_IDX$$
rjmprg r13
move r13 r15
load r0 r13 4 [2]
load r1 r13 6 [2]
load r0 r13 6 [2]
cmpi r0 0
brgt L14
addi r0 r14 0
rjmp L15
addi r0 r14 1
cmpi r0 0
breq L13
load r1 r13 4 [2]
lsl r1 r1 [2]
load r2 r13 6 [2]
subi r2 r2 1
store r13 r1 4 [2]
store r13 r2 6 [2]
rjmp L12
load r0 r13 4 [2]
move r12 r0
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 $$RET_IDX$$
rjmprg r13
move r13 r15
load r0 r13 4 [2]
load r1 r13 6 [2]
load r0 r13 6 [2]
cmpi r0 0
brgt L18
addi r0 r14 0
rjmp L19
addi r0 r14 1
cmpi r0 0
breq L17
load r1 r13 4 [2]
lsr r1 r1 [2]
load r2 r13 6 [2]
subi r2 r2 1
store r13 r1 4 [2]
store r13 r2 6 [2]
rjmp L16
load r0 r13 4 [2]
move r12 r0
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 $$RET_IDX$$
rjmprg r13
move r13 r15
load r0 r13 5 [1]
load r1 r13 6 [2]
load r0 r13 6 [2]
cmpi r0 0
brgt L22
addi r0 r14 0
rjmp L23
addi r0 r14 1
cmpi r0 0
breq L21
load r1 r13 5 [1]
lsl r1 r1 [1]
load r2 r13 6 [2]
subi r2 r2 1
store r13 r1 5 [1]
store r13 r2 6 [2]
rjmp L20
load r0 r13 5 [1]
move r12 r0
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 $$RET_IDX$$
rjmprg r13
move r13 r15
load r0 r13 5 [1]
load r1 r13 6 [2]
load r0 r13 6 [2]
cmpi r0 0
brgt L26
addi r0 r14 0
rjmp L27
addi r0 r14 1
cmpi r0 0
breq L25
load r1 r13 5 [1]
lsr r1 r1 [1]
load r2 r13 6 [2]
subi r2 r2 1
store r13 r1 5 [1]
store r13 r2 6 [2]
rjmp L24
load r0 r13 5 [1]
move r12 r0
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 $$RET_IDX$$
rjmprg r13
move r13 r15
load r0 r13 4 [2]
load r1 r13 6 [2]
subi r15 r15 2
subi r15 r15 2
addi r2 r14 0
store r13 r0 -2 [2]
store r13 r2 -4 [2]
load r0 r13 -2 [2]
load r1 r13 6 [2]
cmp r0 r1
brgt L30
addi r0 r14 0
rjmp L31
addi r0 r14 1
cmpi r0 0
breq L29
load r2 r13 -2 [2]
sub r2 r2 r1
load r3 r13 -4 [2]
addi r3 r3 1
store r13 r2 -2 [2]
store r13 r3 -4 [2]
rjmp L28
subi r15 r15 4
load r0 r13 -4 [2]
addi r15, r15, -2
store r15, r13, 0 [2]
subi r15 r15 2
addi r1 r14 16
addi r15, r15, -2
store r15, r1, 0 [2]
subi r15 r15 2
addi r15, r15, -4
store r15, r0, 0 [4]
store r13 r0 -8 [4]
subi r15 r15 2
movlo r13 r13 $$CALL_IDX$$
addi r15, r15, -2
store r15, r13, 0 [2]
rjmp left_shift_l
addi r15 r15 12
load r13, r15, 0 [2]
addi r15, r15, 2
move r0 r12
store r13 r0 -8 [4]
load r1 r13 -2 [2]
add r0 r0 r1
move r12 r0
addi r15 r15 8
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 $$RET_IDX$$
rjmprg r13
move r13 r15
load r0 r13 4 [2]
load r3 r13 6 [2]
load r4 r14 6 [2]
cmp r3 r4
brge L32
addi r3 r14 0
rjmp L33
addi r3 r14 1
cmpi r3 0
breq L34
addi r12 r14 0
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 $$RET_IDX$$
rjmprg r13
rjmp L35
addi r15, r15, -2
store r15, r13, 0 [2]
subi r15 r15 2
load r0 r13 6 [2]
addi r15, r15, -2
store r15, r0, 0 [2]
load r1 r13 4 [2]
addi r15, r15, -2
store r15, r1, 0 [2]
subi r15 r15 2
movlo r13 r13 $$CALL_IDX$$
addi r15, r15, -2
store r15, r13, 0 [2]
rjmp vga_write
addi r15 r15 8
load r13, r15, 0 [2]
addi r15, r15, 2
addi r12 r14 1
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 $$RET_IDX$$
rjmprg r13
move r13 r15
load r0 r13 4 [4]
load r1 r13 8 [2]
load r2 r13 10 [2]
load r3 r14 14 [2]
cmp r1 r3
brge L36
addi r1 r14 0
rjmp L37
addi r1 r14 1
load r4 r14 16 [2]
cmp r2 r4
brge L38
addi r2 r14 0
rjmp L39
addi r2 r14 1
or r1 r1 r2
cmpi r1 0
breq L40
addi r12 r14 0
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 $$RET_IDX$$
rjmprg r13
rjmp L41
subi r15 r15 2
load r0 r13 8 [2]
load r1 r14 14 [2]
load r2 r13 10 [2]
mul r1 r1 r2
add r0 r0 r1
addi r15, r15, -2
store r15, r13, 0 [2]
addi r15, r15, -2
store r15, r0, 0 [2]
load r3 r13 4 [4]
addi r15, r15, -2
store r15, r3, 0 [2]
store r13 r0 -2 [2]
subi r15 r15 2
movlo r13 r13 $$CALL_IDX$$
addi r15, r15, -2
store r15, r13, 0 [2]
rjmp vga_write
addi r15 r15 6
load r13, r15, 0 [2]
addi r15, r15, 2
addi r12 r14 1
addi r15 r15 2
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 $$RET_IDX$$
rjmprg r13
move r13 r15
load r0 r13 2 [2]
load r1 r13 4 [2]
load r2 r13 6 [2]
load r3 r14 10 [2]
cmp r0 r3
brge L42
addi r0 r14 0
rjmp L43
addi r0 r14 1
cmpi r0 0
breq L44
addi r12 r14 0
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 $$RET_IDX$$
rjmprg r13
rjmp L45
subi r15 r15 2
load r0 r14 8 [2]
load r1 r13 2 [2]
add r0 r0 r1
subi r15 r15 2
load r2 r13 4 [2]
addi r15, r15, -2
store r15, r13, 0 [2]
subi r15 r15 2
addi r3 r14 8
addi r15, r15, -2
store r15, r3, 0 [2]
load r3 r13 4 [2]
addi r15, r15, -2
store r15, r3, 0 [2]
store r13 r0 -2 [2]
store r13 r2 -4 [2]
subi r15 r15 2
movlo r13 r13 $$CALL_IDX$$
addi r15, r15, -2
store r15, r13, 0 [2]
rjmp left_shift_i
addi r15 r15 8
load r13, r15, 0 [2]
addi r15, r15, 2
move r0 r12
store r13 r0 -4 [2]
load r1 r13 6 [2]
add r0 r0 r1
addi r15, r15, -2
store r15, r13, 0 [2]
subi r15 r15 2
load r2 r13 -2 [2]
addi r15, r15, -2
store r15, r2, 0 [2]
addi r15, r15, -2
store r15, r0, 0 [2]
store r13 r0 -4 [2]
subi r15 r15 2
movlo r13 r13 $$CALL_IDX$$
addi r15, r15, -2
store r15, r13, 0 [2]
rjmp vga_write
addi r15 r15 8
load r13, r15, 0 [2]
addi r15, r15, 2
addi r12 r14 1
addi r15 r15 4
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 $$RET_IDX$$
rjmprg r13
move r13 r15
load r0 r13 2 [1]
load r1 r13 3 [1]
load r2 r14 2 [2]
cmp r0 r2
brge L46
addi r0 r14 0
rjmp L47
addi r0 r14 1
load r3 r14 4 [2]
cmp r1 r3
brge L48
addi r1 r14 0
rjmp L49
addi r1 r14 1
or r0 r0 r1
cmpi r0 0
breq L50
addi r12 r14 0
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 $$RET_IDX$$
rjmprg r13
rjmp L51
load r0 r13 2 [1]
move r1 r0
load r2 r13 3 [1]
move r3 r2
add r0 r0 r2
load r4 r14 2 [2]
mul r0 r0 r4
store r14 r0 22 [2]
store r14 r1 24 [2]
store r14 r3 26 [2]
addi r12 r14 1
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 $$RET_IDX$$
rjmprg r13
move r13 r15
load r0 r14 22 [2]
addi r0 r0 1
store r14 r0 22 [2]
load r1 r14 6 [2]
cmp r0 r1
brlt L52
addi r0 r14 0
rjmp L53
addi r0 r14 1
cmpi r0 0
breq L54
load r0 r14 24 [2]
addi r0 r0 1
store r14 r0 24 [2]
load r1 r14 2 [2]
cmp r0 r1
brge L56
addi r0 r14 0
rjmp L57
addi r0 r14 1
cmpi r0 0
breq L58
addi r0 r14 0
load r1 r14 26 [2]
addi r1 r1 1
store r14 r0 24 [2]
store r14 r1 26 [2]
rjmp L59
rjmp L55
addi r0 r14 0
addi r1 r14 0
addi r2 r14 0
store r14 r0 22 [2]
store r14 r1 24 [2]
store r14 r2 26 [2]
move r12 r14
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 $$RET_IDX$$
rjmprg r13
move r13 r15
load r0 r14 22 [2]
cmpi r0 0
breq L60
addi r0 r14 0
rjmp L61
addi r0 r14 1
cmpi r0 0
breq L62
addi r12 r14 0
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 $$RET_IDX$$
rjmprg r13
rjmp L63
load r0 r14 22 [2]
subi r0 r0 1
store r14 r0 22 [2]
load r1 r14 6 [2]
cmp r0 r1
brlt L64
addi r0 r14 0
rjmp L65
addi r0 r14 1
cmpi r0 0
breq L66
load r0 r14 24 [2]
subi r0 r0 1
store r14 r0 24 [2]
cmpi r0 0
brlt L68
addi r0 r14 0
rjmp L69
addi r0 r14 1
cmpi r0 0
breq L70
addi r0 r14 0
load r1 r14 26 [2]
subi r1 r1 1
store r14 r0 24 [2]
store r14 r1 26 [2]
rjmp L71
rjmp L67
load r0 r14 6 [2]
subi r0 r0 1
load r1 r14 2 [2]
move r2 r1
load r3 r14 4 [2]
move r4 r3
store r14 r0 22 [2]
store r14 r2 24 [2]
store r14 r4 26 [2]
move r12 r14
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 $$RET_IDX$$
rjmprg r13
move r13 r15
load r0 r13 2 [2]
load r1 r14 6 [2]
cmp r0 r1
brge L72
addi r0 r14 0
rjmp L73
addi r0 r14 1
cmpi r0 0
breq L74
addi r12 r14 0
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 $$RET_IDX$$
rjmprg r13
rjmp L75
load r0 r14 22 [2]
load r1 r13 2 [2]
add r0 r0 r1
store r14 r0 22 [2]
load r2 r14 6 [2]
cmp r0 r2
brge L76
addi r0 r14 0
rjmp L77
addi r0 r14 1
cmpi r0 0
breq L78
load r0 r14 22 [2]
load r1 r14 6 [2]
sub r0 r0 r1
store r14 r0 22 [2]
rjmp L79
subi r15 r15 4
addi r15, r15, -2
store r15, r13, 0 [2]
subi r15 r15 2
load r0 r14 2 [2]
addi r15, r15, -2
store r15, r0, 0 [2]
load r1 r14 22 [2]
addi r15, r15, -2
store r15, r1, 0 [2]
subi r15 r15 2
movlo r13 r13 $$CALL_IDX$$
addi r15, r15, -2
store r15, r13, 0 [2]
rjmp divide
addi r15 r15 8
load r13, r15, 0 [2]
addi r15, r15, 2
move r0 r12
subi r15 r15 4
addi r15, r15, -2
store r15, r13, 0 [2]
subi r15 r15 2
load r1 r14 4 [2]
addi r15, r15, -2
store r15, r1, 0 [2]
load r2 r14 22 [2]
addi r15, r15, -2
store r15, r2, 0 [2]
store r13 r0 -4 [4]
subi r15 r15 2
movlo r13 r13 $$CALL_IDX$$
addi r15, r15, -2
store r15, r13, 0 [2]
rjmp divide
addi r15 r15 8
load r13, r15, 0 [2]
addi r15, r15, 2
move r0 r12
addi r15, r15, -2
store r15, r13, 0 [2]
subi r15 r15 2
addi r1 r14 16
addi r15, r15, -2
store r15, r1, 0 [2]
load r1 r13 -4 [4]
subi r15 r15 2
addi r15, r15, -4
store r15, r1, 0 [4]
store r13 r0 -8 [4]
subi r15 r15 2
movlo r13 r13 $$CALL_IDX$$
addi r15, r15, -2
store r15, r13, 0 [2]
rjmp right_shift_l
addi r15 r15 12
load r13, r15, 0 [2]
addi r15, r15, 2
move r0 r12
addi r15, r15, -2
store r15, r13, 0 [2]
subi r15 r15 2
addi r1 r14 16
addi r15, r15, -2
store r15, r1, 0 [2]
load r1 r13 -8 [4]
subi r15 r15 2
addi r15, r15, -4
store r15, r1, 0 [4]
store r14 r0 24 [2]
subi r15 r15 2
movlo r13 r13 $$CALL_IDX$$
addi r15, r15, -2
store r15, r13, 0 [2]
rjmp right_shift_l
addi r15 r15 12
load r13, r15, 0 [2]
addi r15, r15, 2
move r0 r12
store r14 r0 26 [2]
addi r12 r14 1
addi r15 r15 8
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 $$RET_IDX$$
rjmprg r13
move r13 r15
load r0 r14 26 [2]
addi r0 r0 1
store r14 r0 26 [2]
load r1 r14 4 [2]
cmp r0 r1
brlt L80
addi r0 r14 0
rjmp L81
addi r0 r14 1
cmpi r0 0
breq L82
load r0 r14 2 [2]
load r1 r14 26 [2]
mul r0 r0 r1
load r2 r14 24 [2]
add r0 r0 r2
store r14 r0 22 [2]
rjmp L83
load r0 r14 24 [2]
move r1 r0
addi r2 r14 0
store r14 r1 22 [2]
store r14 r2 26 [2]
move r12 r14
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 $$RET_IDX$$
rjmprg r13
move r13 r15
load r0 r14 26 [2]
subi r0 r0 1
store r14 r0 26 [2]
cmpi r0 0
brge L84
addi r0 r14 0
rjmp L85
addi r0 r14 1
cmpi r0 0
breq L86
load r0 r14 2 [2]
load r1 r14 26 [2]
mul r0 r0 r1
load r2 r14 24 [2]
add r0 r0 r2
store r14 r0 22 [2]
rjmp L87
load r0 r14 24 [2]
move r1 r0
load r2 r14 4 [2]
subi r2 r2 1
store r14 r1 22 [2]
store r14 r2 26 [2]
move r12 r14
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 $$RET_IDX$$
rjmprg r13
move r13 r15
load r0 r14 26 [2]
addi r0 r0 1
store r14 r0 26 [2]
load r1 r14 4 [2]
cmp r0 r1
brlt L88
addi r0 r14 0
rjmp L89
addi r0 r14 1
cmpi r0 0
breq L90
load r0 r14 2 [2]
load r1 r14 26 [2]
mul r0 r0 r1
store r14 r0 22 [2]
rjmp L91
addi r0 r14 0
addi r1 r14 0
store r14 r0 22 [2]
store r14 r1 26 [2]
addi r0 r14 0
store r14 r0 24 [2]
move r12 r14
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 $$RET_IDX$$
rjmprg r13
move r13 r15
load r0 r13 5 [1]
load r1 r13 6 [2]
load r2 r14 18 [2]
load r3 r14 10 [2]
cmp r2 r3
brge L92
addi r2 r14 0
rjmp L93
addi r2 r14 1
load r4 r14 20 [2]
cmp r4 r3
brge L94
addi r4 r14 0
rjmp L95
addi r4 r14 1
or r2 r2 r4
cmpi r2 0
breq L96
addi r12 r14 0
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 $$RET_IDX$$
rjmprg r13
rjmp L97
subi r15 r15 2
load r0 r14 18 [2]
addi r15, r15, -2
store r15, r13, 0 [2]
addi r1 r14 4
addi r15, r15, -2
store r15, r1, 0 [2]
addi r15, r15, -2
store r15, r0, 0 [2]
store r13 r0 -2 [2]
subi r15 r15 2
movlo r13 r13 $$CALL_IDX$$
addi r15, r15, -2
store r15, r13, 0 [2]
rjmp left_shift_i
addi r15 r15 6
load r13, r15, 0 [2]
addi r15, r15, 2
move r0 r12
store r13 r0 -2 [2]
load r1 r14 20 [2]
add r0 r0 r1
addi r15, r15, -2
store r15, r13, 0 [2]
addi r2 r14 8
addi r15, r15, -2
store r15, r2, 0 [2]
addi r15, r15, -2
store r15, r0, 0 [2]
store r13 r0 -2 [2]
subi r15 r15 2
movlo r13 r13 $$CALL_IDX$$
addi r15, r15, -2
store r15, r13, 0 [2]
rjmp left_shift_i
addi r15 r15 6
load r13, r15, 0 [2]
addi r15, r15, 2
move r0 r12
subi r15 r15 2
load r1 r13 5 [1]
store r13 r1 -4 [2]
add r1 r1 r0
addi r15, r15, -2
store r15, r13, 0 [2]
subi r15 r15 2
load r2 r13 6 [2]
addi r15, r15, -2
store r15, r2, 0 [2]
addi r15, r15, -2
store r15, r1, 0 [2]
store r13 r0 -2 [2]
store r13 r1 -4 [2]
subi r15 r15 2
movlo r13 r13 $$CALL_IDX$$
addi r15, r15, -2
store r15, r13, 0 [2]
rjmp tile_index_write
addi r15 r15 8
load r13, r15, 0 [2]
addi r15, r15, 2
addi r15 r15 4
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 $$RET_IDX$$
rjmprg r13
move r13 r15
load r0 r13 3 [1]
load r1 r13 4 [2]
load r2 r13 6 [2]
addi r15, r15, -2
store r15, r13, 0 [2]
subi r15 r15 2
load r3 r14 2 [2]
mul r3 r3 r2
add r1 r1 r3
addi r15, r15, -2
store r15, r1, 0 [2]
addi r15, r15, -1
store r15, r0, 0 [1]
subi r15 r15 3
movlo r13 r13 $$CALL_IDX$$
addi r15, r15, -2
store r15, r13, 0 [2]
rjmp print_c_at
addi r15 r15 8
load r13, r15, 0 [2]
addi r15, r15, 2
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 $$RET_IDX$$
rjmprg r13
move r13 r15
load r0 r13 3 [1]
addi r15, r15, -2
store r15, r13, 0 [2]
subi r15 r15 2
load r1 r14 22 [2]
addi r15, r15, -2
store r15, r1, 0 [2]
addi r15, r15, -1
store r15, r0, 0 [1]
subi r15 r15 3
movlo r13 r13 $$CALL_IDX$$
addi r15, r15, -2
store r15, r13, 0 [2]
rjmp print_c_at
addi r15 r15 8
load r13, r15, 0 [2]
addi r15, r15, 2
cmpi r12 0
breq L98
addi r15, r15, -2
store r15, r13, 0 [2]
movlo r13 r13 $$CALL_IDX$$
addi r15, r15, -2
store r15, r13, 0 [2]
rjmp advance_cursor
load r13, r15, 0 [2]
addi r15, r15, 2
addi r12 r14 1
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 $$RET_IDX$$
rjmprg r13
rjmp L99
addi r12 r14 0
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 $$RET_IDX$$
rjmprg r13
move r13 r15
load r0 r13 2 [2]
load r0 r13 2 [2]
load r0 r0 0 [1]
cmpi r0 0
breq L101
addi r15, r15, -2
store r15, r13, 0 [2]
subi r15 r15 2
load r1 r13 2 [2]
load r1 r1 0 [1]
addi r15, r15, -1
store r15, r1, 0 [1]
subi r15 r15 1
movlo r13 r13 $$CALL_IDX$$
addi r15, r15, -2
store r15, r13, 0 [2]
rjmp print_c
addi r15 r15 4
load r13, r15, 0 [2]
addi r15, r15, 2
load r0 r13 2 [2]
addi r0 r0 1
store r13 r0 2 [2]
rjmp L100
move r12 r14
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 $$RET_IDX$$
rjmprg r13
move r13 r15
subi r15 r15 2
addi r0 r14 0
store r13 r0 -2 [2]
load r0 r13 -2 [2]
load r1 r14 6 [2]
cmp r0 r1
brlt L104
addi r0 r14 0
rjmp L105
addi r0 r14 1
cmpi r0 0
breq L103
addi r15, r15, -2
store r15, r13, 0 [2]
load r2 r13 -2 [2]
addi r15, r15, -2
store r15, r2, 0 [2]
addi r3 r14 0
addi r15, r15, -2
store r15, r3, 0 [2]
subi r15 r15 2
movlo r13 r13 $$CALL_IDX$$
addi r15, r15, -2
store r15, r13, 0 [2]
rjmp tile_index_write
addi r15 r15 6
load r13, r15, 0 [2]
addi r15, r15, 2
rjmp L102
addi r0 r14 0
addi r1 r14 0
addi r2 r14 0
addi r15 r15 2
store r14 r0 22 [2]
store r14 r1 24 [2]
store r14 r2 26 [2]
move r12 r14
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 $$RET_IDX$$
rjmprg r13
move r13 r15
load r0 r13 2 [2]
load r1 r13 4 [2]
load r2 r13 7 [1]
subi r15 r15 2
addi r3 r14 0
store r13 r3 -2 [2]
load r0 r13 -2 [2]
load r1 r13 4 [2]
cmp r0 r1
brlt L108
addi r0 r14 0
rjmp L109
addi r0 r14 1
cmpi r0 0
breq L107
load r2 r13 2 [2]
load r3 r13 -2 [2]
addi r4 r14 1
mul r3 r3 r4
add r2 r2 r3
load r4 r13 7 [1]
store r2 r4 0 [1]
addi r3 r3 1
store r13 r3 -2 [2]
rjmp L106
addi r15 r15 2
move r12 r14
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 $$RET_IDX$$
rjmprg r13
move r13 r15
load r0 r13 2 [2]
addi r1 r14 31
load r2 r14 29 [2]
addi r3 r14 2
mul r2 r2 r3
add r1 r1 r2
store r1 r0 0 [2]
addi r2 r2 1
store r14 r2 29 [2]
move r12 r14
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 $$RET_IDX$$
rjmprg r13
move r13 r15
subi r15 r15 2
addi r0 r14 0
subi r15 r15 2
addi r1 r14 0
subi r15 r15 2
addi r2 r14 0
store r13 r0 -2 [2]
store r13 r1 -4 [2]
store r13 r2 -6 [2]
load r0 r13 -2 [2]
load r1 r14 6 [2]
cmp r0 r1
brlt L112
addi r0 r14 0
rjmp L113
addi r0 r14 1
cmpi r0 0
breq L111
subi r15 r15 2
addi r2 r14 0
subi r15 r15 2
addi r3 r14 -1
subi r15 r15 2
addi r4 r14 -1
store r13 r2 -8 [2]
store r13 r3 -10 [2]
store r13 r4 -12 [2]
load r0 r13 -12 [2]
cmpi r0 2
brlt L116
addi r0 r14 0
rjmp L117
addi r0 r14 1
cmpi r0 0
breq L115
load r0 r13 -10 [2]
cmpi r0 2
brlt L120
addi r0 r14 0
rjmp L121
addi r0 r14 1
cmpi r0 0
breq L119
subi r15 r15 2
load r1 r13 -4 [2]
load r2 r13 -10 [2]
add r1 r1 r2
subi r15 r15 2
load r3 r13 -6 [2]
load r4 r13 -12 [2]
add r3 r3 r4
store r13 r1 -14 [2]
load r5 r14 2 [2]
cmp r1 r5
brge L122
addi r1 r14 0
rjmp L123
addi r1 r14 1
store r13 r3 -16 [2]
cmpi r1 0
breq L124
addi r0 r14 0
store r13 r0 -14 [2]
rjmp L125
load r0 r13 -14 [2]
load r1 r14 2 [2]
cmp r0 r1
brle L126
addi r0 r14 0
rjmp L127
addi r0 r14 1
cmpi r0 0
breq L128
load r0 r14 2 [2]
subi r0 r0 1
store r13 r0 -14 [2]
rjmp L129
load r0 r13 -16 [2]
load r1 r14 4 [2]
cmp r0 r1
brge L130
addi r0 r14 0
rjmp L131
addi r0 r14 1
cmpi r0 0
breq L132
addi r0 r14 0
store r13 r0 -16 [2]
rjmp L133
load r0 r13 -14 [2]
load r1 r14 2 [2]
cmp r0 r1
brle L134
addi r0 r14 0
rjmp L135
addi r0 r14 1
cmpi r0 0
breq L136
load r0 r14 4 [2]
subi r0 r0 1
store r13 r0 -16 [2]
rjmp L137
subi r15 r15 2
load r0 r13 -14 [2]
load r1 r14 2 [2]
load r2 r13 -16 [2]
mul r1 r1 r2
add r0 r0 r1
load r3 r13 -8 [2]
addi r4 r14 28
store r13 r0 -18 [2]
add r0 r4 r0
load r0 r0 0 [1]
add r3 r3 r0
load r5 r13 -10 [2]
addi r5 r5 1
addi r15 r15 6
store r13 r3 -8 [2]
store r13 r5 -10 [2]
rjmp L118
load r0 r13 -12 [2]
addi r0 r0 1
store r13 r0 -12 [2]
rjmp L114
addi r0 r14 28
load r1 r13 -2 [2]
add r1 r0 r1
load r1 r1 0 [1]
cmpi r1 1
breq L138
addi r1 r14 0
rjmp L139
addi r1 r14 1
cmpi r1 0
breq L140
load r0 r13 -8 [2]
cmpi r0 2
brlt L142
addi r0 r14 0
rjmp L143
addi r0 r14 1
load r1 r13 -8 [2]
cmpi r1 3
brgt L144
addi r1 r14 0
rjmp L145
addi r1 r14 1
or r0 r0 r1
cmpi r0 0
breq L146
addi r15, r15, -2
store r15, r13, 0 [2]
subi r15 r15 2
load r0 r13 -2 [2]
addi r15, r15, -2
store r15, r0, 0 [2]
movlo r13 r13 $$CALL_IDX$$
addi r15, r15, -2
store r15, r13, 0 [2]
rjmp add_changed
addi r15 r15 4
load r13, r15, 0 [2]
addi r15, r15, 2
rjmp L147
rjmp L141
load r0 r13 -8 [2]
cmpi r0 3
breq L148
addi r0 r14 0
rjmp L149
addi r0 r14 1
cmpi r0 0
breq L150
addi r15, r15, -2
store r15, r13, 0 [2]
subi r15 r15 2
load r0 r13 -2 [2]
addi r15, r15, -2
store r15, r0, 0 [2]
movlo r13 r13 $$CALL_IDX$$
addi r15, r15, -2
store r15, r13, 0 [2]
rjmp add_changed
addi r15 r15 4
load r13, r15, 0 [2]
addi r15, r15, 2
rjmp L151
load r0 r13 -4 [2]
addi r0 r0 1
load r1 r13 -2 [2]
addi r1 r1 1
store r13 r0 -4 [2]
load r2 r14 2 [2]
cmp r0 r2
brge L152
addi r0 r14 0
rjmp L153
addi r0 r14 1
store r13 r1 -2 [2]
cmpi r0 0
breq L154
addi r0 r14 0
store r13 r0 -4 [2]
rjmp L155
addi r15 r15 6
rjmp L110
addi r15 r15 6
move r12 r14
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 $$RET_IDX$$
rjmprg r13
move r13 r15
subi r15 r15 2
addi r0 r14 0
store r13 r0 -2 [2]
load r0 r13 -2 [2]
load r1 r14 6 [2]
cmp r0 r1
brlt L158
addi r0 r14 0
rjmp L159
addi r0 r14 1
cmpi r0 0
breq L157
addi r2 r14 28
load r3 r13 -2 [2]
add r3 r2 r3
load r3 r3 0 [1]
cmpi r3 0
breq L160
addi r15, r15, -2
store r15, r13, 0 [2]
load r0 r13 -2 [2]
addi r15, r15, -2
store r15, r0, 0 [2]
addi r1 r14 43
addi r15, r15, -2
store r15, r1, 0 [2]
subi r15 r15 2
movlo r13 r13 $$CALL_IDX$$
addi r15, r15, -2
store r15, r13, 0 [2]
rjmp vga_write
addi r15 r15 6
load r13, r15, 0 [2]
addi r15, r15, 2
rjmp L161
addi r15, r15, -2
store r15, r13, 0 [2]
load r0 r13 -2 [2]
addi r15, r15, -2
store r15, r0, 0 [2]
addi r1 r14 32
addi r15, r15, -2
store r15, r1, 0 [2]
subi r15 r15 2
movlo r13 r13 $$CALL_IDX$$
addi r15, r15, -2
store r15, r13, 0 [2]
rjmp vga_write
addi r15 r15 6
load r13, r15, 0 [2]
addi r15, r15, 2
rjmp L156
addi r15 r15 2
move r12 r14
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 $$RET_IDX$$
rjmprg r13
move r13 r15
subi r15 r15 2
addi r0 r14 0
store r13 r0 -2 [2]
load r0 r13 -2 [2]
load r1 r14 29 [2]
cmp r0 r1
brlt L164
addi r0 r14 0
rjmp L165
addi r0 r14 1
cmpi r0 0
breq L163
subi r15 r15 2
addi r2 r14 31
load r3 r13 -2 [2]
addi r4 r14 2
mul r3 r3 r4
add r3 r2 r3
load r3 r3 0 [2]
addi r4 r14 28
store r13 r3 -4 [2]
add r3 r4 r3
load r3 r3 0 [1]
cmpi r3 0
breq L166
addi r0 r14 28
load r1 r13 -4 [2]
addi r2 r14 1
mul r1 r1 r2
add r0 r0 r1
addi r2 r14 0
store r0 r2 0 [1]
rjmp L167
addi r0 r14 28
load r1 r13 -4 [2]
addi r2 r14 1
mul r1 r1 r2
add r0 r0 r1
addi r2 r14 1
store r0 r2 0 [1]
addi r15 r15 2
rjmp L162
addi r0 r14 0
addi r15 r15 2
store r14 r0 29 [2]
move r12 r14
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 $$RET_IDX$$
rjmprg r13
move r13 r15
load r0 r13 4 [4]
subi r15 r15 4
load r1 r14 158 [4]
mul r0 r0 r1
subi r15 r15 4
addi r2 r14 0
store r13 r0 -4 [4]
store r13 r2 -8 [4]
load r0 r13 -8 [4]
load r1 r13 -4 [4]
cmp r0 r1
brlt L170
addi r0 r14 0
rjmp L171
addi r0 r14 1
cmpi r0 0
breq L169
load r2 r13 -8 [4]
addi r2 r2 1
store r13 r2 -8 [4]
rjmp L168
addi r15 r15 8
move r12 r14
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 $$RET_IDX$$
rjmprg r13
move r13 r15
addi r15, r15, -2
store r15, r13, 0 [2]
movlo r13 r13 $$CALL_IDX$$
addi r15, r15, -2
store r15, r13, 0 [2]
rjmp calc_next_gen
load r13, r15, 0 [2]
addi r15, r15, 2
addi r15, r15, -2
store r15, r13, 0 [2]
movlo r13 r13 $$CALL_IDX$$
addi r15, r15, -2
store r15, r13, 0 [2]
rjmp update_changed
load r13, r15, 0 [2]
addi r15, r15, 2
move r12 r14
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 $$RET_IDX$$
rjmprg r13
move r13 r15
addi r15, r15, -2
store r15, r13, 0 [2]
subi r15 r15 2
addi r0 r14 0
addi r15, r15, -1
store r15, r0, 0 [1]
load r0 r14 6 [2]
subi r15 r15 1
addi r15, r15, -2
store r15, r0, 0 [2]
addi r1 r14 28
addi r15, r15, -2
store r15, r1, 0 [2]
movlo r13 r13 $$CALL_IDX$$
addi r15, r15, -2
store r15, r13, 0 [2]
rjmp memset
addi r15 r15 8
load r13, r15, 0 [2]
addi r15, r15, 2
addi r0 r14 28
addi r0 r0 41
addi r1 r14 1
store r0 r1 0 [1]
addi r0 r14 28
addi r0 r0 82
addi r1 r14 1
store r0 r1 0 [1]
addi r0 r14 28
addi r0 r0 121
addi r1 r14 1
store r0 r1 0 [1]
addi r0 r14 28
addi r0 r0 122
addi r1 r14 1
store r0 r1 0 [1]
addi r0 r14 28
addi r0 r0 123
addi r1 r14 1
store r0 r1 0 [1]
addi r15, r15, -2
store r15, r13, 0 [2]
movlo r13 r13 $$CALL_IDX$$
addi r15, r15, -2
store r15, r13, 0 [2]
rjmp print_board
load r13, r15, 0 [2]
addi r15, r15, 2
addi r15, r15, -2
store r15, r13, 0 [2]
subi r15 r15 2
addi r0 r14 500
addi r15, r15, -4
store r15, r0, 0 [4]
subi r15 r15 2
movlo r13 r13 $$CALL_IDX$$
addi r15, r15, -2
store r15, r13, 0 [2]
rjmp sleep_ms
addi r15 r15 8
load r13, r15, 0 [2]
addi r15, r15, 2
addi r15, r15, -2
store r15, r13, 0 [2]
movlo r13 r13 $$CALL_IDX$$
addi r15, r15, -2
store r15, r13, 0 [2]
rjmp next_gen
load r13, r15, 0 [2]
addi r15, r15, 2
rjmp L172
move r12 r14
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 $$RET_IDX$$
rjmprg r13
(Pre insert_subroutine_indexes)
(Code after 'insert_subroutine_indexes')
 load r0 r14 2 [2]
load r1 r14 4 [2]
mul r0 r0 r1
store r14 r0 6 [2]
load r0 r14 6 [2]
store r14 r0 8 [2]
load r0 r14 6 [2]
load r2 r14 10 [2]
add r0 r0 r2
store r14 r0 12 [2]
subi r15 r15 1
movlo r13 r13 15
addi r15, r15, -2
store r15, r13, 0 [2]
rjmp main
subi r15 r15 2
rjmp __halt
move r13 r15
load r0 r13 2 [2]
subi r15 r15 4
load r1 r13 -4 [4]
in r1 0
move r12 r1
addi r15 r15 4
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 27
rjmprg r13
move r13 r15
load r0 r13 4 [4]
load r1 r13 10 [2]
out 0 r0
store r13 r0 4 [4]
move r12 r14
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 37
rjmprg r13
move r13 r15
load r0 r13 4 [2]
load r1 r13 6 [2]
vgaw r1 r0 0
store r13 r1 6 [2]
move r12 r14
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 47
rjmprg r13
move r13 r15
load r0 r13 2 [2]
load r1 r13 4 [2]
load r2 r13 6 [2]
cmp r0 r2
brge L0
addi r0 r14 0
rjmp L1
addi r0 r14 1
load r3 r13 2 [2]
cmp r3 r1
brlt L2
addi r3 r14 0
rjmp L3
addi r3 r14 1
or r0 r0 r3
move r12 r0
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 68
rjmprg r13
move r13 r15
load r0 r13 4 [4]
load r1 r13 10 [2]
load r0 r13 10 [2]
cmpi r0 0
brgt L6
addi r0 r14 0
rjmp L7
addi r0 r14 1
cmpi r0 0
breq L5
load r1 r13 4 [4]
lsl r1 r1 [4]
load r2 r13 10 [2]
subi r2 r2 1
store r13 r1 4 [4]
store r13 r2 10 [2]
rjmp L4
load r0 r13 4 [4]
move r12 r0
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 92
rjmprg r13
move r13 r15
load r0 r13 4 [4]
load r1 r13 10 [2]
load r0 r13 10 [2]
cmpi r0 0
brgt L10
addi r0 r14 0
rjmp L11
addi r0 r14 1
cmpi r0 0
breq L9
load r1 r13 4 [4]
lsr r1 r1 [4]
load r2 r13 10 [2]
subi r2 r2 1
store r13 r1 4 [4]
store r13 r2 10 [2]
rjmp L8
load r0 r13 4 [4]
move r12 r0
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 116
rjmprg r13
move r13 r15
load r0 r13 4 [2]
load r1 r13 6 [2]
load r0 r13 6 [2]
cmpi r0 0
brgt L14
addi r0 r14 0
rjmp L15
addi r0 r14 1
cmpi r0 0
breq L13
load r1 r13 4 [2]
lsl r1 r1 [2]
load r2 r13 6 [2]
subi r2 r2 1
store r13 r1 4 [2]
store r13 r2 6 [2]
rjmp L12
load r0 r13 4 [2]
move r12 r0
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 140
rjmprg r13
move r13 r15
load r0 r13 4 [2]
load r1 r13 6 [2]
load r0 r13 6 [2]
cmpi r0 0
brgt L18
addi r0 r14 0
rjmp L19
addi r0 r14 1
cmpi r0 0
breq L17
load r1 r13 4 [2]
lsr r1 r1 [2]
load r2 r13 6 [2]
subi r2 r2 1
store r13 r1 4 [2]
store r13 r2 6 [2]
rjmp L16
load r0 r13 4 [2]
move r12 r0
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 164
rjmprg r13
move r13 r15
load r0 r13 5 [1]
load r1 r13 6 [2]
load r0 r13 6 [2]
cmpi r0 0
brgt L22
addi r0 r14 0
rjmp L23
addi r0 r14 1
cmpi r0 0
breq L21
load r1 r13 5 [1]
lsl r1 r1 [1]
load r2 r13 6 [2]
subi r2 r2 1
store r13 r1 5 [1]
store r13 r2 6 [2]
rjmp L20
load r0 r13 5 [1]
move r12 r0
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 188
rjmprg r13
move r13 r15
load r0 r13 5 [1]
load r1 r13 6 [2]
load r0 r13 6 [2]
cmpi r0 0
brgt L26
addi r0 r14 0
rjmp L27
addi r0 r14 1
cmpi r0 0
breq L25
load r1 r13 5 [1]
lsr r1 r1 [1]
load r2 r13 6 [2]
subi r2 r2 1
store r13 r1 5 [1]
store r13 r2 6 [2]
rjmp L24
load r0 r13 5 [1]
move r12 r0
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 212
rjmprg r13
move r13 r15
load r0 r13 4 [2]
load r1 r13 6 [2]
subi r15 r15 2
subi r15 r15 2
addi r2 r14 0
store r13 r0 -2 [2]
store r13 r2 -4 [2]
load r0 r13 -2 [2]
load r1 r13 6 [2]
cmp r0 r1
brgt L30
addi r0 r14 0
rjmp L31
addi r0 r14 1
cmpi r0 0
breq L29
load r2 r13 -2 [2]
sub r2 r2 r1
load r3 r13 -4 [2]
addi r3 r3 1
store r13 r2 -2 [2]
store r13 r3 -4 [2]
rjmp L28
subi r15 r15 4
load r0 r13 -4 [2]
addi r15, r15, -2
store r15, r13, 0 [2]
subi r15 r15 2
addi r1 r14 16
addi r15, r15, -2
store r15, r1, 0 [2]
subi r15 r15 2
addi r15, r15, -4
store r15, r0, 0 [4]
store r13 r0 -8 [4]
subi r15 r15 2
movlo r13 r13 254
addi r15, r15, -2
store r15, r13, 0 [2]
rjmp left_shift_l
addi r15 r15 12
load r13, r15, 0 [2]
addi r15, r15, 2
move r0 r12
store r13 r0 -8 [4]
load r1 r13 -2 [2]
add r0 r0 r1
move r12 r0
addi r15 r15 8
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 266
rjmprg r13
move r13 r15
load r0 r13 4 [2]
load r3 r13 6 [2]
load r4 r14 6 [2]
cmp r3 r4
brge L32
addi r3 r14 0
rjmp L33
addi r3 r14 1
cmpi r3 0
breq L34
addi r12 r14 0
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 282
rjmprg r13
rjmp L35
addi r15, r15, -2
store r15, r13, 0 [2]
subi r15 r15 2
load r0 r13 6 [2]
addi r15, r15, -2
store r15, r0, 0 [2]
load r1 r13 4 [2]
addi r15, r15, -2
store r15, r1, 0 [2]
subi r15 r15 2
movlo r13 r13 298
addi r15, r15, -2
store r15, r13, 0 [2]
rjmp vga_write
addi r15 r15 8
load r13, r15, 0 [2]
addi r15, r15, 2
addi r12 r14 1
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 305
rjmprg r13
move r13 r15
load r0 r13 4 [4]
load r1 r13 8 [2]
load r2 r13 10 [2]
load r3 r14 14 [2]
cmp r1 r3
brge L36
addi r1 r14 0
rjmp L37
addi r1 r14 1
load r4 r14 16 [2]
cmp r2 r4
brge L38
addi r2 r14 0
rjmp L39
addi r2 r14 1
or r1 r1 r2
cmpi r1 0
breq L40
addi r12 r14 0
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 329
rjmprg r13
rjmp L41
subi r15 r15 2
load r0 r13 8 [2]
load r1 r14 14 [2]
load r2 r13 10 [2]
mul r1 r1 r2
add r0 r0 r1
addi r15, r15, -2
store r15, r13, 0 [2]
addi r15, r15, -2
store r15, r0, 0 [2]
load r3 r13 4 [4]
addi r15, r15, -2
store r15, r3, 0 [2]
store r13 r0 -2 [2]
subi r15 r15 2
movlo r13 r13 350
addi r15, r15, -2
store r15, r13, 0 [2]
rjmp vga_write
addi r15 r15 6
load r13, r15, 0 [2]
addi r15, r15, 2
addi r12 r14 1
addi r15 r15 2
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 358
rjmprg r13
move r13 r15
load r0 r13 2 [2]
load r1 r13 4 [2]
load r2 r13 6 [2]
load r3 r14 10 [2]
cmp r0 r3
brge L42
addi r0 r14 0
rjmp L43
addi r0 r14 1
cmpi r0 0
breq L44
addi r12 r14 0
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 375
rjmprg r13
rjmp L45
subi r15 r15 2
load r0 r14 8 [2]
load r1 r13 2 [2]
add r0 r0 r1
subi r15 r15 2
load r2 r13 4 [2]
addi r15, r15, -2
store r15, r13, 0 [2]
subi r15 r15 2
addi r3 r14 8
addi r15, r15, -2
store r15, r3, 0 [2]
load r3 r13 4 [2]
addi r15, r15, -2
store r15, r3, 0 [2]
store r13 r0 -2 [2]
store r13 r2 -4 [2]
subi r15 r15 2
movlo r13 r13 399
addi r15, r15, -2
store r15, r13, 0 [2]
rjmp left_shift_i
addi r15 r15 8
load r13, r15, 0 [2]
addi r15, r15, 2
move r0 r12
store r13 r0 -4 [2]
load r1 r13 6 [2]
add r0 r0 r1
addi r15, r15, -2
store r15, r13, 0 [2]
subi r15 r15 2
load r2 r13 -2 [2]
addi r15, r15, -2
store r15, r2, 0 [2]
addi r15, r15, -2
store r15, r0, 0 [2]
store r13 r0 -4 [2]
subi r15 r15 2
movlo r13 r13 420
addi r15, r15, -2
store r15, r13, 0 [2]
rjmp vga_write
addi r15 r15 8
load r13, r15, 0 [2]
addi r15, r15, 2
addi r12 r14 1
addi r15 r15 4
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 428
rjmprg r13
move r13 r15
load r0 r13 2 [1]
load r1 r13 3 [1]
load r2 r14 2 [2]
cmp r0 r2
brge L46
addi r0 r14 0
rjmp L47
addi r0 r14 1
load r3 r14 4 [2]
cmp r1 r3
brge L48
addi r1 r14 0
rjmp L49
addi r1 r14 1
or r0 r0 r1
cmpi r0 0
breq L50
addi r12 r14 0
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 451
rjmprg r13
rjmp L51
load r0 r13 2 [1]
move r1 r0
load r2 r13 3 [1]
move r3 r2
add r0 r0 r2
load r4 r14 2 [2]
mul r0 r0 r4
store r14 r0 22 [2]
store r14 r1 24 [2]
store r14 r3 26 [2]
addi r12 r14 1
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 467
rjmprg r13
move r13 r15
load r0 r14 22 [2]
addi r0 r0 1
store r14 r0 22 [2]
load r1 r14 6 [2]
cmp r0 r1
brlt L52
addi r0 r14 0
rjmp L53
addi r0 r14 1
cmpi r0 0
breq L54
load r0 r14 24 [2]
addi r0 r0 1
store r14 r0 24 [2]
load r1 r14 2 [2]
cmp r0 r1
brge L56
addi r0 r14 0
rjmp L57
addi r0 r14 1
cmpi r0 0
breq L58
addi r0 r14 0
load r1 r14 26 [2]
addi r1 r1 1
store r14 r0 24 [2]
store r14 r1 26 [2]
rjmp L59
rjmp L55
addi r0 r14 0
addi r1 r14 0
addi r2 r14 0
store r14 r0 22 [2]
store r14 r1 24 [2]
store r14 r2 26 [2]
move r12 r14
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 508
rjmprg r13
move r13 r15
load r0 r14 22 [2]
cmpi r0 0
breq L60
addi r0 r14 0
rjmp L61
addi r0 r14 1
cmpi r0 0
breq L62
addi r12 r14 0
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 522
rjmprg r13
rjmp L63
load r0 r14 22 [2]
subi r0 r0 1
store r14 r0 22 [2]
load r1 r14 6 [2]
cmp r0 r1
brlt L64
addi r0 r14 0
rjmp L65
addi r0 r14 1
cmpi r0 0
breq L66
load r0 r14 24 [2]
subi r0 r0 1
store r14 r0 24 [2]
cmpi r0 0
brlt L68
addi r0 r14 0
rjmp L69
addi r0 r14 1
cmpi r0 0
breq L70
addi r0 r14 0
load r1 r14 26 [2]
subi r1 r1 1
store r14 r0 24 [2]
store r14 r1 26 [2]
rjmp L71
rjmp L67
load r0 r14 6 [2]
subi r0 r0 1
load r1 r14 2 [2]
move r2 r1
load r3 r14 4 [2]
move r4 r3
store r14 r0 22 [2]
store r14 r2 24 [2]
store r14 r4 26 [2]
move r12 r14
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 565
rjmprg r13
move r13 r15
load r0 r13 2 [2]
load r1 r14 6 [2]
cmp r0 r1
brge L72
addi r0 r14 0
rjmp L73
addi r0 r14 1
cmpi r0 0
breq L74
addi r12 r14 0
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 580
rjmprg r13
rjmp L75
load r0 r14 22 [2]
load r1 r13 2 [2]
add r0 r0 r1
store r14 r0 22 [2]
load r2 r14 6 [2]
cmp r0 r2
brge L76
addi r0 r14 0
rjmp L77
addi r0 r14 1
cmpi r0 0
breq L78
load r0 r14 22 [2]
load r1 r14 6 [2]
sub r0 r0 r1
store r14 r0 22 [2]
rjmp L79
subi r15 r15 4
addi r15, r15, -2
store r15, r13, 0 [2]
subi r15 r15 2
load r0 r14 2 [2]
addi r15, r15, -2
store r15, r0, 0 [2]
load r1 r14 22 [2]
addi r15, r15, -2
store r15, r1, 0 [2]
subi r15 r15 2
movlo r13 r13 614
addi r15, r15, -2
store r15, r13, 0 [2]
rjmp divide
addi r15 r15 8
load r13, r15, 0 [2]
addi r15, r15, 2
move r0 r12
subi r15 r15 4
addi r15, r15, -2
store r15, r13, 0 [2]
subi r15 r15 2
load r1 r14 4 [2]
addi r15, r15, -2
store r15, r1, 0 [2]
load r2 r14 22 [2]
addi r15, r15, -2
store r15, r2, 0 [2]
store r13 r0 -4 [4]
subi r15 r15 2
movlo r13 r13 634
addi r15, r15, -2
store r15, r13, 0 [2]
rjmp divide
addi r15 r15 8
load r13, r15, 0 [2]
addi r15, r15, 2
move r0 r12
addi r15, r15, -2
store r15, r13, 0 [2]
subi r15 r15 2
addi r1 r14 16
addi r15, r15, -2
store r15, r1, 0 [2]
load r1 r13 -4 [4]
subi r15 r15 2
addi r15, r15, -4
store r15, r1, 0 [4]
store r13 r0 -8 [4]
subi r15 r15 2
movlo r13 r13 654
addi r15, r15, -2
store r15, r13, 0 [2]
rjmp right_shift_l
addi r15 r15 12
load r13, r15, 0 [2]
addi r15, r15, 2
move r0 r12
addi r15, r15, -2
store r15, r13, 0 [2]
subi r15 r15 2
addi r1 r14 16
addi r15, r15, -2
store r15, r1, 0 [2]
load r1 r13 -8 [4]
subi r15 r15 2
addi r15, r15, -4
store r15, r1, 0 [4]
store r14 r0 24 [2]
subi r15 r15 2
movlo r13 r13 674
addi r15, r15, -2
store r15, r13, 0 [2]
rjmp right_shift_l
addi r15 r15 12
load r13, r15, 0 [2]
addi r15, r15, 2
move r0 r12
store r14 r0 26 [2]
addi r12 r14 1
addi r15 r15 8
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 684
rjmprg r13
move r13 r15
load r0 r14 26 [2]
addi r0 r0 1
store r14 r0 26 [2]
load r1 r14 4 [2]
cmp r0 r1
brlt L80
addi r0 r14 0
rjmp L81
addi r0 r14 1
cmpi r0 0
breq L82
load r0 r14 2 [2]
load r1 r14 26 [2]
mul r0 r0 r1
load r2 r14 24 [2]
add r0 r0 r2
store r14 r0 22 [2]
rjmp L83
load r0 r14 24 [2]
move r1 r0
addi r2 r14 0
store r14 r1 22 [2]
store r14 r2 26 [2]
move r12 r14
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 713
rjmprg r13
move r13 r15
load r0 r14 26 [2]
subi r0 r0 1
store r14 r0 26 [2]
cmpi r0 0
brge L84
addi r0 r14 0
rjmp L85
addi r0 r14 1
cmpi r0 0
breq L86
load r0 r14 2 [2]
load r1 r14 26 [2]
mul r0 r0 r1
load r2 r14 24 [2]
add r0 r0 r2
store r14 r0 22 [2]
rjmp L87
load r0 r14 24 [2]
move r1 r0
load r2 r14 4 [2]
subi r2 r2 1
store r14 r1 22 [2]
store r14 r2 26 [2]
move r12 r14
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 742
rjmprg r13
move r13 r15
load r0 r14 26 [2]
addi r0 r0 1
store r14 r0 26 [2]
load r1 r14 4 [2]
cmp r0 r1
brlt L88
addi r0 r14 0
rjmp L89
addi r0 r14 1
cmpi r0 0
breq L90
load r0 r14 2 [2]
load r1 r14 26 [2]
mul r0 r0 r1
store r14 r0 22 [2]
rjmp L91
addi r0 r14 0
addi r1 r14 0
store r14 r0 22 [2]
store r14 r1 26 [2]
addi r0 r14 0
store r14 r0 24 [2]
move r12 r14
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 770
rjmprg r13
move r13 r15
load r0 r13 5 [1]
load r1 r13 6 [2]
load r2 r14 18 [2]
load r3 r14 10 [2]
cmp r2 r3
brge L92
addi r2 r14 0
rjmp L93
addi r2 r14 1
load r4 r14 20 [2]
cmp r4 r3
brge L94
addi r4 r14 0
rjmp L95
addi r4 r14 1
or r2 r2 r4
cmpi r2 0
breq L96
addi r12 r14 0
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 794
rjmprg r13
rjmp L97
subi r15 r15 2
load r0 r14 18 [2]
addi r15, r15, -2
store r15, r13, 0 [2]
addi r1 r14 4
addi r15, r15, -2
store r15, r1, 0 [2]
addi r15, r15, -2
store r15, r0, 0 [2]
store r13 r0 -2 [2]
subi r15 r15 2
movlo r13 r13 811
addi r15, r15, -2
store r15, r13, 0 [2]
rjmp left_shift_i
addi r15 r15 6
load r13, r15, 0 [2]
addi r15, r15, 2
move r0 r12
store r13 r0 -2 [2]
load r1 r14 20 [2]
add r0 r0 r1
addi r15, r15, -2
store r15, r13, 0 [2]
addi r2 r14 8
addi r15, r15, -2
store r15, r2, 0 [2]
addi r15, r15, -2
store r15, r0, 0 [2]
store r13 r0 -2 [2]
subi r15 r15 2
movlo r13 r13 831
addi r15, r15, -2
store r15, r13, 0 [2]
rjmp left_shift_i
addi r15 r15 6
load r13, r15, 0 [2]
addi r15, r15, 2
move r0 r12
subi r15 r15 2
load r1 r13 5 [1]
store r13 r1 -4 [2]
add r1 r1 r0
addi r15, r15, -2
store r15, r13, 0 [2]
subi r15 r15 2
load r2 r13 6 [2]
addi r15, r15, -2
store r15, r2, 0 [2]
addi r15, r15, -2
store r15, r1, 0 [2]
store r13 r0 -2 [2]
store r13 r1 -4 [2]
subi r15 r15 2
movlo r13 r13 854
addi r15, r15, -2
store r15, r13, 0 [2]
rjmp tile_index_write
addi r15 r15 8
load r13, r15, 0 [2]
addi r15, r15, 2
addi r15 r15 4
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 861
rjmprg r13
move r13 r15
load r0 r13 3 [1]
load r1 r13 4 [2]
load r2 r13 6 [2]
addi r15, r15, -2
store r15, r13, 0 [2]
subi r15 r15 2
load r3 r14 2 [2]
mul r3 r3 r2
add r1 r1 r3
addi r15, r15, -2
store r15, r1, 0 [2]
addi r15, r15, -1
store r15, r0, 0 [1]
subi r15 r15 3
movlo r13 r13 881
addi r15, r15, -2
store r15, r13, 0 [2]
rjmp print_c_at
addi r15 r15 8
load r13, r15, 0 [2]
addi r15, r15, 2
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 887
rjmprg r13
move r13 r15
load r0 r13 3 [1]
addi r15, r15, -2
store r15, r13, 0 [2]
subi r15 r15 2
load r1 r14 22 [2]
addi r15, r15, -2
store r15, r1, 0 [2]
addi r15, r15, -1
store r15, r0, 0 [1]
subi r15 r15 3
movlo r13 r13 903
addi r15, r15, -2
store r15, r13, 0 [2]
rjmp print_c_at
addi r15 r15 8
load r13, r15, 0 [2]
addi r15, r15, 2
cmpi r12 0
breq L98
addi r15, r15, -2
store r15, r13, 0 [2]
movlo r13 r13 914
addi r15, r15, -2
store r15, r13, 0 [2]
rjmp advance_cursor
load r13, r15, 0 [2]
addi r15, r15, 2
addi r12 r14 1
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 920
rjmprg r13
rjmp L99
addi r12 r14 0
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 926
rjmprg r13
move r13 r15
load r0 r13 2 [2]
load r0 r13 2 [2]
load r0 r0 0 [1]
cmpi r0 0
breq L101
addi r15, r15, -2
store r15, r13, 0 [2]
subi r15 r15 2
load r1 r13 2 [2]
load r1 r1 0 [1]
addi r15, r15, -1
store r15, r1, 0 [1]
subi r15 r15 1
movlo r13 r13 945
addi r15, r15, -2
store r15, r13, 0 [2]
rjmp print_c
addi r15 r15 4
load r13, r15, 0 [2]
addi r15, r15, 2
load r0 r13 2 [2]
addi r0 r0 1
store r13 r0 2 [2]
rjmp L100
move r12 r14
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 956
rjmprg r13
move r13 r15
subi r15 r15 2
addi r0 r14 0
store r13 r0 -2 [2]
load r0 r13 -2 [2]
load r1 r14 6 [2]
cmp r0 r1
brlt L104
addi r0 r14 0
rjmp L105
addi r0 r14 1
cmpi r0 0
breq L103
addi r15, r15, -2
store r15, r13, 0 [2]
load r2 r13 -2 [2]
addi r15, r15, -2
store r15, r2, 0 [2]
addi r3 r14 0
addi r15, r15, -2
store r15, r3, 0 [2]
subi r15 r15 2
movlo r13 r13 983
addi r15, r15, -2
store r15, r13, 0 [2]
rjmp tile_index_write
addi r15 r15 6
load r13, r15, 0 [2]
addi r15, r15, 2
rjmp L102
addi r0 r14 0
addi r1 r14 0
addi r2 r14 0
addi r15 r15 2
store r14 r0 22 [2]
store r14 r1 24 [2]
store r14 r2 26 [2]
move r12 r14
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 998
rjmprg r13
move r13 r15
load r0 r13 2 [2]
load r1 r13 4 [2]
load r2 r13 7 [1]
subi r15 r15 2
addi r3 r14 0
store r13 r3 -2 [2]
load r0 r13 -2 [2]
load r1 r13 4 [2]
cmp r0 r1
brlt L108
addi r0 r14 0
rjmp L109
addi r0 r14 1
cmpi r0 0
breq L107
load r2 r13 2 [2]
load r3 r13 -2 [2]
addi r4 r14 1
mul r3 r3 r4
add r2 r2 r3
load r4 r13 7 [1]
store r2 r4 0 [1]
addi r3 r3 1
store r13 r3 -2 [2]
rjmp L106
addi r15 r15 2
move r12 r14
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 1030
rjmprg r13
move r13 r15
load r0 r13 2 [2]
addi r1 r14 31
load r2 r14 29 [2]
addi r3 r14 2
mul r2 r2 r3
add r1 r1 r2
store r1 r0 0 [2]
addi r2 r2 1
store r14 r2 29 [2]
move r12 r14
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 1045
rjmprg r13
move r13 r15
subi r15 r15 2
addi r0 r14 0
subi r15 r15 2
addi r1 r14 0
subi r15 r15 2
addi r2 r14 0
store r13 r0 -2 [2]
store r13 r1 -4 [2]
store r13 r2 -6 [2]
load r0 r13 -2 [2]
load r1 r14 6 [2]
cmp r0 r1
brlt L112
addi r0 r14 0
rjmp L113
addi r0 r14 1
cmpi r0 0
breq L111
subi r15 r15 2
addi r2 r14 0
subi r15 r15 2
addi r3 r14 -1
subi r15 r15 2
addi r4 r14 -1
store r13 r2 -8 [2]
store r13 r3 -10 [2]
store r13 r4 -12 [2]
load r0 r13 -12 [2]
cmpi r0 2
brlt L116
addi r0 r14 0
rjmp L117
addi r0 r14 1
cmpi r0 0
breq L115
load r0 r13 -10 [2]
cmpi r0 2
brlt L120
addi r0 r14 0
rjmp L121
addi r0 r14 1
cmpi r0 0
breq L119
subi r15 r15 2
load r1 r13 -4 [2]
load r2 r13 -10 [2]
add r1 r1 r2
subi r15 r15 2
load r3 r13 -6 [2]
load r4 r13 -12 [2]
add r3 r3 r4
store r13 r1 -14 [2]
load r5 r14 2 [2]
cmp r1 r5
brge L122
addi r1 r14 0
rjmp L123
addi r1 r14 1
store r13 r3 -16 [2]
cmpi r1 0
breq L124
addi r0 r14 0
store r13 r0 -14 [2]
rjmp L125
load r0 r13 -14 [2]
load r1 r14 2 [2]
cmp r0 r1
brle L126
addi r0 r14 0
rjmp L127
addi r0 r14 1
cmpi r0 0
breq L128
load r0 r14 2 [2]
subi r0 r0 1
store r13 r0 -14 [2]
rjmp L129
load r0 r13 -16 [2]
load r1 r14 4 [2]
cmp r0 r1
brge L130
addi r0 r14 0
rjmp L131
addi r0 r14 1
cmpi r0 0
breq L132
addi r0 r14 0
store r13 r0 -16 [2]
rjmp L133
load r0 r13 -14 [2]
load r1 r14 2 [2]
cmp r0 r1
brle L134
addi r0 r14 0
rjmp L135
addi r0 r14 1
cmpi r0 0
breq L136
load r0 r14 4 [2]
subi r0 r0 1
store r13 r0 -16 [2]
rjmp L137
subi r15 r15 2
load r0 r13 -14 [2]
load r1 r14 2 [2]
load r2 r13 -16 [2]
mul r1 r1 r2
add r0 r0 r1
load r3 r13 -8 [2]
addi r4 r14 28
store r13 r0 -18 [2]
add r0 r4 r0
load r0 r0 0 [1]
add r3 r3 r0
load r5 r13 -10 [2]
addi r5 r5 1
addi r15 r15 6
store r13 r3 -8 [2]
store r13 r5 -10 [2]
rjmp L118
load r0 r13 -12 [2]
addi r0 r0 1
store r13 r0 -12 [2]
rjmp L114
addi r0 r14 28
load r1 r13 -2 [2]
add r1 r0 r1
load r1 r1 0 [1]
cmpi r1 1
breq L138
addi r1 r14 0
rjmp L139
addi r1 r14 1
cmpi r1 0
breq L140
load r0 r13 -8 [2]
cmpi r0 2
brlt L142
addi r0 r14 0
rjmp L143
addi r0 r14 1
load r1 r13 -8 [2]
cmpi r1 3
brgt L144
addi r1 r14 0
rjmp L145
addi r1 r14 1
or r0 r0 r1
cmpi r0 0
breq L146
addi r15, r15, -2
store r15, r13, 0 [2]
subi r15 r15 2
load r0 r13 -2 [2]
addi r15, r15, -2
store r15, r0, 0 [2]
movlo r13 r13 1207
addi r15, r15, -2
store r15, r13, 0 [2]
rjmp add_changed
addi r15 r15 4
load r13, r15, 0 [2]
addi r15, r15, 2
rjmp L147
rjmp L141
load r0 r13 -8 [2]
cmpi r0 3
breq L148
addi r0 r14 0
rjmp L149
addi r0 r14 1
cmpi r0 0
breq L150
addi r15, r15, -2
store r15, r13, 0 [2]
subi r15 r15 2
load r0 r13 -2 [2]
addi r15, r15, -2
store r15, r0, 0 [2]
movlo r13 r13 1230
addi r15, r15, -2
store r15, r13, 0 [2]
rjmp add_changed
addi r15 r15 4
load r13, r15, 0 [2]
addi r15, r15, 2
rjmp L151
load r0 r13 -4 [2]
addi r0 r0 1
load r1 r13 -2 [2]
addi r1 r1 1
store r13 r0 -4 [2]
load r2 r14 2 [2]
cmp r0 r2
brge L152
addi r0 r14 0
rjmp L153
addi r0 r14 1
store r13 r1 -2 [2]
cmpi r0 0
breq L154
addi r0 r14 0
store r13 r0 -4 [2]
rjmp L155
addi r15 r15 6
rjmp L110
addi r15 r15 6
move r12 r14
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 1258
rjmprg r13
move r13 r15
subi r15 r15 2
addi r0 r14 0
store r13 r0 -2 [2]
load r0 r13 -2 [2]
load r1 r14 6 [2]
cmp r0 r1
brlt L158
addi r0 r14 0
rjmp L159
addi r0 r14 1
cmpi r0 0
breq L157
addi r2 r14 28
load r3 r13 -2 [2]
add r3 r2 r3
load r3 r3 0 [1]
cmpi r3 0
breq L160
addi r15, r15, -2
store r15, r13, 0 [2]
load r0 r13 -2 [2]
addi r15, r15, -2
store r15, r0, 0 [2]
addi r1 r14 43
addi r15, r15, -2
store r15, r1, 0 [2]
subi r15 r15 2
movlo r13 r13 1291
addi r15, r15, -2
store r15, r13, 0 [2]
rjmp vga_write
addi r15 r15 6
load r13, r15, 0 [2]
addi r15, r15, 2
rjmp L161
addi r15, r15, -2
store r15, r13, 0 [2]
load r0 r13 -2 [2]
addi r15, r15, -2
store r15, r0, 0 [2]
addi r1 r14 32
addi r15, r15, -2
store r15, r1, 0 [2]
subi r15 r15 2
movlo r13 r13 1308
addi r15, r15, -2
store r15, r13, 0 [2]
rjmp vga_write
addi r15 r15 6
load r13, r15, 0 [2]
addi r15, r15, 2
rjmp L156
addi r15 r15 2
move r12 r14
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 1317
rjmprg r13
move r13 r15
subi r15 r15 2
addi r0 r14 0
store r13 r0 -2 [2]
load r0 r13 -2 [2]
load r1 r14 29 [2]
cmp r0 r1
brlt L164
addi r0 r14 0
rjmp L165
addi r0 r14 1
cmpi r0 0
breq L163
subi r15 r15 2
addi r2 r14 31
load r3 r13 -2 [2]
addi r4 r14 2
mul r3 r3 r4
add r3 r2 r3
load r3 r3 0 [2]
addi r4 r14 28
store r13 r3 -4 [2]
add r3 r4 r3
load r3 r3 0 [1]
cmpi r3 0
breq L166
addi r0 r14 28
load r1 r13 -4 [2]
addi r2 r14 1
mul r1 r1 r2
add r0 r0 r1
addi r2 r14 0
store r0 r2 0 [1]
rjmp L167
addi r0 r14 28
load r1 r13 -4 [2]
addi r2 r14 1
mul r1 r1 r2
add r0 r0 r1
addi r2 r14 1
store r0 r2 0 [1]
addi r15 r15 2
rjmp L162
addi r0 r14 0
addi r15 r15 2
store r14 r0 29 [2]
move r12 r14
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 1368
rjmprg r13
move r13 r15
load r0 r13 4 [4]
subi r15 r15 4
load r1 r14 158 [4]
mul r0 r0 r1
subi r15 r15 4
addi r2 r14 0
store r13 r0 -4 [4]
store r13 r2 -8 [4]
load r0 r13 -8 [4]
load r1 r13 -4 [4]
cmp r0 r1
brlt L170
addi r0 r14 0
rjmp L171
addi r0 r14 1
cmpi r0 0
breq L169
load r2 r13 -8 [4]
addi r2 r2 1
store r13 r2 -8 [4]
rjmp L168
addi r15 r15 8
move r12 r14
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 1396
rjmprg r13
move r13 r15
addi r15, r15, -2
store r15, r13, 0 [2]
movlo r13 r13 1404
addi r15, r15, -2
store r15, r13, 0 [2]
rjmp calc_next_gen
load r13, r15, 0 [2]
addi r15, r15, 2
addi r15, r15, -2
store r15, r13, 0 [2]
movlo r13 r13 1412
addi r15, r15, -2
store r15, r13, 0 [2]
rjmp update_changed
load r13, r15, 0 [2]
addi r15, r15, 2
move r12 r14
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 1418
rjmprg r13
move r13 r15
addi r15, r15, -2
store r15, r13, 0 [2]
subi r15 r15 2
addi r0 r14 0
addi r15, r15, -1
store r15, r0, 0 [1]
load r0 r14 6 [2]
subi r15 r15 1
addi r15, r15, -2
store r15, r0, 0 [2]
addi r1 r14 28
addi r15, r15, -2
store r15, r1, 0 [2]
movlo r13 r13 1437
addi r15, r15, -2
store r15, r13, 0 [2]
rjmp memset
addi r15 r15 8
load r13, r15, 0 [2]
addi r15, r15, 2
addi r0 r14 28
addi r0 r0 41
addi r1 r14 1
store r0 r1 0 [1]
addi r0 r14 28
addi r0 r0 82
addi r1 r14 1
store r0 r1 0 [1]
addi r0 r14 28
addi r0 r0 121
addi r1 r14 1
store r0 r1 0 [1]
addi r0 r14 28
addi r0 r0 122
addi r1 r14 1
store r0 r1 0 [1]
addi r0 r14 28
addi r0 r0 123
addi r1 r14 1
store r0 r1 0 [1]
addi r15, r15, -2
store r15, r13, 0 [2]
movlo r13 r13 1466
addi r15, r15, -2
store r15, r13, 0 [2]
rjmp print_board
load r13, r15, 0 [2]
addi r15, r15, 2
addi r15, r15, -2
store r15, r13, 0 [2]
subi r15 r15 2
addi r0 r14 500
addi r15, r15, -4
store r15, r0, 0 [4]
subi r15 r15 2
movlo r13 r13 1479
addi r15, r15, -2
store r15, r13, 0 [2]
rjmp sleep_ms
addi r15 r15 8
load r13, r15, 0 [2]
addi r15, r15, 2
addi r15, r15, -2
store r15, r13, 0 [2]
movlo r13 r13 1488
addi r15, r15, -2
store r15, r13, 0 [2]
rjmp next_gen
load r13, r15, 0 [2]
addi r15, r15, 2
rjmp L172
move r12 r14
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 1495
rjmprg r13
(Pre handle_sizes)
(Code after 'handle_sizes')
 load r0 r14 2 [2]
load r1 r14 4 [2]
mul r0 r0 r1
store r14 r0 6 [2]
load r0 r14 6 [2]
store r14 r0 8 [2]
load r0 r14 6 [2]
load r2 r14 10 [2]
add r0 r0 r2
store r14 r0 12 [2]
subi r15 r15 1
movlo r13 r13 15
addi r15 r15 -2
store r15 r13 0 [2]
rjmp main
subi r15 r15 2
rjmp __halt
move r13 r15
load r0 r13 2 [2]
subi r15 r15 4
load r1 r13 -4 [4]
in r1 0
move r12 r1
addi r15 r15 4
load r13 r15 0 [2]
addi r15 r15 2
subi r13 r13 27
rjmprg r13
move r13 r15
load r0 r13 4 [4]
load r1 r13 10 [2]
out 0 r0
store r13 r0 4 [4]
move r12 r14
load r13 r15 0 [2]
addi r15 r15 2
subi r13 r13 37
rjmprg r13
move r13 r15
load r0 r13 4 [2]
load r1 r13 6 [2]
vgaw r1 r0 0
store r13 r1 6 [2]
move r12 r14
load r13 r15 0 [2]
addi r15 r15 2
subi r13 r13 47
rjmprg r13
move r13 r15
load r0 r13 2 [2]
load r1 r13 4 [2]
load r2 r13 6 [2]
cmp r0 r2
brge L0
addi r0 r14 0
rjmp L1
addi r0 r14 1
load r3 r13 2 [2]
cmp r3 r1
brlt L2
addi r3 r14 0
rjmp L3
addi r3 r14 1
or r0 r0 r3
move r12 r0
load r13 r15 0 [2]
addi r15 r15 2
subi r13 r13 68
rjmprg r13
move r13 r15
load r0 r13 4 [4]
load r1 r13 10 [2]
load r0 r13 10 [2]
cmpi r0 0
brgt L6
addi r0 r14 0
rjmp L7
addi r0 r14 1
cmpi r0 0
breq L5
load r1 r13 4 [4]
lsl r1 r1 [4]
load r2 r13 10 [2]
subi r2 r2 1
store r13 r1 4 [4]
store r13 r2 10 [2]
rjmp L4
load r0 r13 4 [4]
move r12 r0
load r13 r15 0 [2]
addi r15 r15 2
subi r13 r13 92
rjmprg r13
move r13 r15
load r0 r13 4 [4]
load r1 r13 10 [2]
load r0 r13 10 [2]
cmpi r0 0
brgt L10
addi r0 r14 0
rjmp L11
addi r0 r14 1
cmpi r0 0
breq L9
load r1 r13 4 [4]
lsr r1 r1 [4]
load r2 r13 10 [2]
subi r2 r2 1
store r13 r1 4 [4]
store r13 r2 10 [2]
rjmp L8
load r0 r13 4 [4]
move r12 r0
load r13 r15 0 [2]
addi r15 r15 2
subi r13 r13 116
rjmprg r13
move r13 r15
load r0 r13 4 [2]
load r1 r13 6 [2]
load r0 r13 6 [2]
cmpi r0 0
brgt L14
addi r0 r14 0
rjmp L15
addi r0 r14 1
cmpi r0 0
breq L13
load r1 r13 4 [2]
lsl r1 r1 [2]
load r2 r13 6 [2]
subi r2 r2 1
store r13 r1 4 [2]
store r13 r2 6 [2]
rjmp L12
load r0 r13 4 [2]
move r12 r0
load r13 r15 0 [2]
addi r15 r15 2
subi r13 r13 140
rjmprg r13
move r13 r15
load r0 r13 4 [2]
load r1 r13 6 [2]
load r0 r13 6 [2]
cmpi r0 0
brgt L18
addi r0 r14 0
rjmp L19
addi r0 r14 1
cmpi r0 0
breq L17
load r1 r13 4 [2]
lsr r1 r1 [2]
load r2 r13 6 [2]
subi r2 r2 1
store r13 r1 4 [2]
store r13 r2 6 [2]
rjmp L16
load r0 r13 4 [2]
move r12 r0
load r13 r15 0 [2]
addi r15 r15 2
subi r13 r13 164
rjmprg r13
move r13 r15
load r0 r13 5 [1]
load r1 r13 6 [2]
load r0 r13 6 [2]
cmpi r0 0
brgt L22
addi r0 r14 0
rjmp L23
addi r0 r14 1
cmpi r0 0
breq L21
load r1 r13 5 [1]
lsl r1 r1 [1]
load r2 r13 6 [2]
subi r2 r2 1
store r13 r1 5 [1]
store r13 r2 6 [2]
rjmp L20
load r0 r13 5 [1]
move r12 r0
load r13 r15 0 [2]
addi r15 r15 2
subi r13 r13 188
rjmprg r13
move r13 r15
load r0 r13 5 [1]
load r1 r13 6 [2]
load r0 r13 6 [2]
cmpi r0 0
brgt L26
addi r0 r14 0
rjmp L27
addi r0 r14 1
cmpi r0 0
breq L25
load r1 r13 5 [1]
lsr r1 r1 [1]
load r2 r13 6 [2]
subi r2 r2 1
store r13 r1 5 [1]
store r13 r2 6 [2]
rjmp L24
load r0 r13 5 [1]
move r12 r0
load r13 r15 0 [2]
addi r15 r15 2
subi r13 r13 212
rjmprg r13
move r13 r15
load r0 r13 4 [2]
load r1 r13 6 [2]
subi r15 r15 2
subi r15 r15 2
addi r2 r14 0
store r13 r0 -2 [2]
store r13 r2 -4 [2]
load r0 r13 -2 [2]
load r1 r13 6 [2]
cmp r0 r1
brgt L30
addi r0 r14 0
rjmp L31
addi r0 r14 1
cmpi r0 0
breq L29
load r2 r13 -2 [2]
sub r2 r2 r1
load r3 r13 -4 [2]
addi r3 r3 1
store r13 r2 -2 [2]
store r13 r3 -4 [2]
rjmp L28
subi r15 r15 4
load r0 r13 -4 [2]
addi r15 r15 -2
store r15 r13 0 [2]
subi r15 r15 2
addi r1 r14 16
addi r15 r15 -2
store r15 r1 0 [2]
subi r15 r15 2
addi r15 r15 -4
store r15 r0 0 [4]
store r13 r0 -8 [4]
subi r15 r15 2
movlo r13 r13 254
addi r15 r15 -2
store r15 r13 0 [2]
rjmp left_shift_l
addi r15 r15 12
load r13 r15 0 [2]
addi r15 r15 2
move r0 r12
store r13 r0 -8 [4]
load r1 r13 -2 [2]
add r0 r0 r1
move r12 r0
addi r15 r15 8
load r13 r15 0 [2]
addi r15 r15 2
subi r13 r13 266
rjmprg r13
move r13 r15
load r0 r13 4 [2]
load r3 r13 6 [2]
load r4 r14 6 [2]
cmp r3 r4
brge L32
addi r3 r14 0
rjmp L33
addi r3 r14 1
cmpi r3 0
breq L34
addi r12 r14 0
load r13 r15 0 [2]
addi r15 r15 2
subi r13 r13 282
rjmprg r13
rjmp L35
addi r15 r15 -2
store r15 r13 0 [2]
subi r15 r15 2
load r0 r13 6 [2]
addi r15 r15 -2
store r15 r0 0 [2]
load r1 r13 4 [2]
addi r15 r15 -2
store r15 r1 0 [2]
subi r15 r15 2
movlo r13 r13 298
addi r15 r15 -2
store r15 r13 0 [2]
rjmp vga_write
addi r15 r15 8
load r13 r15 0 [2]
addi r15 r15 2
addi r12 r14 1
load r13 r15 0 [2]
addi r15 r15 2
subi r13 r13 305
rjmprg r13
move r13 r15
load r0 r13 4 [4]
load r1 r13 8 [2]
load r2 r13 10 [2]
load r3 r14 14 [2]
cmp r1 r3
brge L36
addi r1 r14 0
rjmp L37
addi r1 r14 1
load r4 r14 16 [2]
cmp r2 r4
brge L38
addi r2 r14 0
rjmp L39
addi r2 r14 1
or r1 r1 r2
cmpi r1 0
breq L40
addi r12 r14 0
load r13 r15 0 [2]
addi r15 r15 2
subi r13 r13 329
rjmprg r13
rjmp L41
subi r15 r15 2
load r0 r13 8 [2]
load r1 r14 14 [2]
load r2 r13 10 [2]
mul r1 r1 r2
add r0 r0 r1
addi r15 r15 -2
store r15 r13 0 [2]
addi r15 r15 -2
store r15 r0 0 [2]
load r3 r13 4 [4]
addi r15 r15 -2
store r15 r3 0 [2]
store r13 r0 -2 [2]
subi r15 r15 2
movlo r13 r13 350
addi r15 r15 -2
store r15 r13 0 [2]
rjmp vga_write
addi r15 r15 6
load r13 r15 0 [2]
addi r15 r15 2
addi r12 r14 1
addi r15 r15 2
load r13 r15 0 [2]
addi r15 r15 2
subi r13 r13 358
rjmprg r13
move r13 r15
load r0 r13 2 [2]
load r1 r13 4 [2]
load r2 r13 6 [2]
load r3 r14 10 [2]
cmp r0 r3
brge L42
addi r0 r14 0
rjmp L43
addi r0 r14 1
cmpi r0 0
breq L44
addi r12 r14 0
load r13 r15 0 [2]
addi r15 r15 2
subi r13 r13 375
rjmprg r13
rjmp L45
subi r15 r15 2
load r0 r14 8 [2]
load r1 r13 2 [2]
add r0 r0 r1
subi r15 r15 2
load r2 r13 4 [2]
addi r15 r15 -2
store r15 r13 0 [2]
subi r15 r15 2
addi r3 r14 8
addi r15 r15 -2
store r15 r3 0 [2]
load r3 r13 4 [2]
addi r15 r15 -2
store r15 r3 0 [2]
store r13 r0 -2 [2]
store r13 r2 -4 [2]
subi r15 r15 2
movlo r13 r13 399
addi r15 r15 -2
store r15 r13 0 [2]
rjmp left_shift_i
addi r15 r15 8
load r13 r15 0 [2]
addi r15 r15 2
move r0 r12
store r13 r0 -4 [2]
load r1 r13 6 [2]
add r0 r0 r1
addi r15 r15 -2
store r15 r13 0 [2]
subi r15 r15 2
load r2 r13 -2 [2]
addi r15 r15 -2
store r15 r2 0 [2]
addi r15 r15 -2
store r15 r0 0 [2]
store r13 r0 -4 [2]
subi r15 r15 2
movlo r13 r13 420
addi r15 r15 -2
store r15 r13 0 [2]
rjmp vga_write
addi r15 r15 8
load r13 r15 0 [2]
addi r15 r15 2
addi r12 r14 1
addi r15 r15 4
load r13 r15 0 [2]
addi r15 r15 2
subi r13 r13 428
rjmprg r13
move r13 r15
load r0 r13 2 [1]
load r1 r13 3 [1]
load r2 r14 2 [2]
cmp r0 r2
brge L46
addi r0 r14 0
rjmp L47
addi r0 r14 1
load r3 r14 4 [2]
cmp r1 r3
brge L48
addi r1 r14 0
rjmp L49
addi r1 r14 1
or r0 r0 r1
cmpi r0 0
breq L50
addi r12 r14 0
load r13 r15 0 [2]
addi r15 r15 2
subi r13 r13 451
rjmprg r13
rjmp L51
load r0 r13 2 [1]
move r1 r0
load r2 r13 3 [1]
move r3 r2
add r0 r0 r2
load r4 r14 2 [2]
mul r0 r0 r4
store r14 r0 22 [2]
store r14 r1 24 [2]
store r14 r3 26 [2]
addi r12 r14 1
load r13 r15 0 [2]
addi r15 r15 2
subi r13 r13 467
rjmprg r13
move r13 r15
load r0 r14 22 [2]
addi r0 r0 1
store r14 r0 22 [2]
load r1 r14 6 [2]
cmp r0 r1
brlt L52
addi r0 r14 0
rjmp L53
addi r0 r14 1
cmpi r0 0
breq L54
load r0 r14 24 [2]
addi r0 r0 1
store r14 r0 24 [2]
load r1 r14 2 [2]
cmp r0 r1
brge L56
addi r0 r14 0
rjmp L57
addi r0 r14 1
cmpi r0 0
breq L58
addi r0 r14 0
load r1 r14 26 [2]
addi r1 r1 1
store r14 r0 24 [2]
store r14 r1 26 [2]
rjmp L59
rjmp L55
addi r0 r14 0
addi r1 r14 0
addi r2 r14 0
store r14 r0 22 [2]
store r14 r1 24 [2]
store r14 r2 26 [2]
move r12 r14
load r13 r15 0 [2]
addi r15 r15 2
subi r13 r13 508
rjmprg r13
move r13 r15
load r0 r14 22 [2]
cmpi r0 0
breq L60
addi r0 r14 0
rjmp L61
addi r0 r14 1
cmpi r0 0
breq L62
addi r12 r14 0
load r13 r15 0 [2]
addi r15 r15 2
subi r13 r13 522
rjmprg r13
rjmp L63
load r0 r14 22 [2]
subi r0 r0 1
store r14 r0 22 [2]
load r1 r14 6 [2]
cmp r0 r1
brlt L64
addi r0 r14 0
rjmp L65
addi r0 r14 1
cmpi r0 0
breq L66
load r0 r14 24 [2]
subi r0 r0 1
store r14 r0 24 [2]
cmpi r0 0
brlt L68
addi r0 r14 0
rjmp L69
addi r0 r14 1
cmpi r0 0
breq L70
addi r0 r14 0
load r1 r14 26 [2]
subi r1 r1 1
store r14 r0 24 [2]
store r14 r1 26 [2]
rjmp L71
rjmp L67
load r0 r14 6 [2]
subi r0 r0 1
load r1 r14 2 [2]
move r2 r1
load r3 r14 4 [2]
move r4 r3
store r14 r0 22 [2]
store r14 r2 24 [2]
store r14 r4 26 [2]
move r12 r14
load r13 r15 0 [2]
addi r15 r15 2
subi r13 r13 565
rjmprg r13
move r13 r15
load r0 r13 2 [2]
load r1 r14 6 [2]
cmp r0 r1
brge L72
addi r0 r14 0
rjmp L73
addi r0 r14 1
cmpi r0 0
breq L74
addi r12 r14 0
load r13 r15 0 [2]
addi r15 r15 2
subi r13 r13 580
rjmprg r13
rjmp L75
load r0 r14 22 [2]
load r1 r13 2 [2]
add r0 r0 r1
store r14 r0 22 [2]
load r2 r14 6 [2]
cmp r0 r2
brge L76
addi r0 r14 0
rjmp L77
addi r0 r14 1
cmpi r0 0
breq L78
load r0 r14 22 [2]
load r1 r14 6 [2]
sub r0 r0 r1
store r14 r0 22 [2]
rjmp L79
subi r15 r15 4
addi r15 r15 -2
store r15 r13 0 [2]
subi r15 r15 2
load r0 r14 2 [2]
addi r15 r15 -2
store r15 r0 0 [2]
load r1 r14 22 [2]
addi r15 r15 -2
store r15 r1 0 [2]
subi r15 r15 2
movlo r13 r13 614
addi r15 r15 -2
store r15 r13 0 [2]
rjmp divide
addi r15 r15 8
load r13 r15 0 [2]
addi r15 r15 2
move r0 r12
subi r15 r15 4
addi r15 r15 -2
store r15 r13 0 [2]
subi r15 r15 2
load r1 r14 4 [2]
addi r15 r15 -2
store r15 r1 0 [2]
load r2 r14 22 [2]
addi r15 r15 -2
store r15 r2 0 [2]
store r13 r0 -4 [4]
subi r15 r15 2
movlo r13 r13 634
addi r15 r15 -2
store r15 r13 0 [2]
rjmp divide
addi r15 r15 8
load r13 r15 0 [2]
addi r15 r15 2
move r0 r12
addi r15 r15 -2
store r15 r13 0 [2]
subi r15 r15 2
addi r1 r14 16
addi r15 r15 -2
store r15 r1 0 [2]
load r1 r13 -4 [4]
subi r15 r15 2
addi r15 r15 -4
store r15 r1 0 [4]
store r13 r0 -8 [4]
subi r15 r15 2
movlo r13 r13 654
addi r15 r15 -2
store r15 r13 0 [2]
rjmp right_shift_l
addi r15 r15 12
load r13 r15 0 [2]
addi r15 r15 2
move r0 r12
addi r15 r15 -2
store r15 r13 0 [2]
subi r15 r15 2
addi r1 r14 16
addi r15 r15 -2
store r15 r1 0 [2]
load r1 r13 -8 [4]
subi r15 r15 2
addi r15 r15 -4
store r15 r1 0 [4]
store r14 r0 24 [2]
subi r15 r15 2
movlo r13 r13 674
addi r15 r15 -2
store r15 r13 0 [2]
rjmp right_shift_l
addi r15 r15 12
load r13 r15 0 [2]
addi r15 r15 2
move r0 r12
store r14 r0 26 [2]
addi r12 r14 1
addi r15 r15 8
load r13 r15 0 [2]
addi r15 r15 2
subi r13 r13 684
rjmprg r13
move r13 r15
load r0 r14 26 [2]
addi r0 r0 1
store r14 r0 26 [2]
load r1 r14 4 [2]
cmp r0 r1
brlt L80
addi r0 r14 0
rjmp L81
addi r0 r14 1
cmpi r0 0
breq L82
load r0 r14 2 [2]
load r1 r14 26 [2]
mul r0 r0 r1
load r2 r14 24 [2]
add r0 r0 r2
store r14 r0 22 [2]
rjmp L83
load r0 r14 24 [2]
move r1 r0
addi r2 r14 0
store r14 r1 22 [2]
store r14 r2 26 [2]
move r12 r14
load r13 r15 0 [2]
addi r15 r15 2
subi r13 r13 713
rjmprg r13
move r13 r15
load r0 r14 26 [2]
subi r0 r0 1
store r14 r0 26 [2]
cmpi r0 0
brge L84
addi r0 r14 0
rjmp L85
addi r0 r14 1
cmpi r0 0
breq L86
load r0 r14 2 [2]
load r1 r14 26 [2]
mul r0 r0 r1
load r2 r14 24 [2]
add r0 r0 r2
store r14 r0 22 [2]
rjmp L87
load r0 r14 24 [2]
move r1 r0
load r2 r14 4 [2]
subi r2 r2 1
store r14 r1 22 [2]
store r14 r2 26 [2]
move r12 r14
load r13 r15 0 [2]
addi r15 r15 2
subi r13 r13 742
rjmprg r13
move r13 r15
load r0 r14 26 [2]
addi r0 r0 1
store r14 r0 26 [2]
load r1 r14 4 [2]
cmp r0 r1
brlt L88
addi r0 r14 0
rjmp L89
addi r0 r14 1
cmpi r0 0
breq L90
load r0 r14 2 [2]
load r1 r14 26 [2]
mul r0 r0 r1
store r14 r0 22 [2]
rjmp L91
addi r0 r14 0
addi r1 r14 0
store r14 r0 22 [2]
store r14 r1 26 [2]
addi r0 r14 0
store r14 r0 24 [2]
move r12 r14
load r13 r15 0 [2]
addi r15 r15 2
subi r13 r13 770
rjmprg r13
move r13 r15
load r0 r13 5 [1]
load r1 r13 6 [2]
load r2 r14 18 [2]
load r3 r14 10 [2]
cmp r2 r3
brge L92
addi r2 r14 0
rjmp L93
addi r2 r14 1
load r4 r14 20 [2]
cmp r4 r3
brge L94
addi r4 r14 0
rjmp L95
addi r4 r14 1
or r2 r2 r4
cmpi r2 0
breq L96
addi r12 r14 0
load r13 r15 0 [2]
addi r15 r15 2
subi r13 r13 794
rjmprg r13
rjmp L97
subi r15 r15 2
load r0 r14 18 [2]
addi r15 r15 -2
store r15 r13 0 [2]
addi r1 r14 4
addi r15 r15 -2
store r15 r1 0 [2]
addi r15 r15 -2
store r15 r0 0 [2]
store r13 r0 -2 [2]
subi r15 r15 2
movlo r13 r13 811
addi r15 r15 -2
store r15 r13 0 [2]
rjmp left_shift_i
addi r15 r15 6
load r13 r15 0 [2]
addi r15 r15 2
move r0 r12
store r13 r0 -2 [2]
load r1 r14 20 [2]
add r0 r0 r1
addi r15 r15 -2
store r15 r13 0 [2]
addi r2 r14 8
addi r15 r15 -2
store r15 r2 0 [2]
addi r15 r15 -2
store r15 r0 0 [2]
store r13 r0 -2 [2]
subi r15 r15 2
movlo r13 r13 831
addi r15 r15 -2
store r15 r13 0 [2]
rjmp left_shift_i
addi r15 r15 6
load r13 r15 0 [2]
addi r15 r15 2
move r0 r12
subi r15 r15 2
load r1 r13 5 [1]
store r13 r1 -4 [2]
add r1 r1 r0
addi r15 r15 -2
store r15 r13 0 [2]
subi r15 r15 2
load r2 r13 6 [2]
addi r15 r15 -2
store r15 r2 0 [2]
addi r15 r15 -2
store r15 r1 0 [2]
store r13 r0 -2 [2]
store r13 r1 -4 [2]
subi r15 r15 2
movlo r13 r13 854
addi r15 r15 -2
store r15 r13 0 [2]
rjmp tile_index_write
addi r15 r15 8
load r13 r15 0 [2]
addi r15 r15 2
addi r15 r15 4
load r13 r15 0 [2]
addi r15 r15 2
subi r13 r13 861
rjmprg r13
move r13 r15
load r0 r13 3 [1]
load r1 r13 4 [2]
load r2 r13 6 [2]
addi r15 r15 -2
store r15 r13 0 [2]
subi r15 r15 2
load r3 r14 2 [2]
mul r3 r3 r2
add r1 r1 r3
addi r15 r15 -2
store r15 r1 0 [2]
addi r15 r15 -1
store r15 r0 0 [1]
subi r15 r15 3
movlo r13 r13 881
addi r15 r15 -2
store r15 r13 0 [2]
rjmp print_c_at
addi r15 r15 8
load r13 r15 0 [2]
addi r15 r15 2
load r13 r15 0 [2]
addi r15 r15 2
subi r13 r13 887
rjmprg r13
move r13 r15
load r0 r13 3 [1]
addi r15 r15 -2
store r15 r13 0 [2]
subi r15 r15 2
load r1 r14 22 [2]
addi r15 r15 -2
store r15 r1 0 [2]
addi r15 r15 -1
store r15 r0 0 [1]
subi r15 r15 3
movlo r13 r13 903
addi r15 r15 -2
store r15 r13 0 [2]
rjmp print_c_at
addi r15 r15 8
load r13 r15 0 [2]
addi r15 r15 2
cmpi r12 0
breq L98
addi r15 r15 -2
store r15 r13 0 [2]
movlo r13 r13 914
addi r15 r15 -2
store r15 r13 0 [2]
rjmp advance_cursor
load r13 r15 0 [2]
addi r15 r15 2
addi r12 r14 1
load r13 r15 0 [2]
addi r15 r15 2
subi r13 r13 920
rjmprg r13
rjmp L99
addi r12 r14 0
load r13 r15 0 [2]
addi r15 r15 2
subi r13 r13 926
rjmprg r13
move r13 r15
load r0 r13 2 [2]
load r0 r13 2 [2]
load r0 r0 0 [1]
cmpi r0 0
breq L101
addi r15 r15 -2
store r15 r13 0 [2]
subi r15 r15 2
load r1 r13 2 [2]
load r1 r1 0 [1]
addi r15 r15 -1
store r15 r1 0 [1]
subi r15 r15 1
movlo r13 r13 945
addi r15 r15 -2
store r15 r13 0 [2]
rjmp print_c
addi r15 r15 4
load r13 r15 0 [2]
addi r15 r15 2
load r0 r13 2 [2]
addi r0 r0 1
store r13 r0 2 [2]
rjmp L100
move r12 r14
load r13 r15 0 [2]
addi r15 r15 2
subi r13 r13 956
rjmprg r13
move r13 r15
subi r15 r15 2
addi r0 r14 0
store r13 r0 -2 [2]
load r0 r13 -2 [2]
load r1 r14 6 [2]
cmp r0 r1
brlt L104
addi r0 r14 0
rjmp L105
addi r0 r14 1
cmpi r0 0
breq L103
addi r15 r15 -2
store r15 r13 0 [2]
load r2 r13 -2 [2]
addi r15 r15 -2
store r15 r2 0 [2]
addi r3 r14 0
addi r15 r15 -2
store r15 r3 0 [2]
subi r15 r15 2
movlo r13 r13 983
addi r15 r15 -2
store r15 r13 0 [2]
rjmp tile_index_write
addi r15 r15 6
load r13 r15 0 [2]
addi r15 r15 2
rjmp L102
addi r0 r14 0
addi r1 r14 0
addi r2 r14 0
addi r15 r15 2
store r14 r0 22 [2]
store r14 r1 24 [2]
store r14 r2 26 [2]
move r12 r14
load r13 r15 0 [2]
addi r15 r15 2
subi r13 r13 998
rjmprg r13
move r13 r15
load r0 r13 2 [2]
load r1 r13 4 [2]
load r2 r13 7 [1]
subi r15 r15 2
addi r3 r14 0
store r13 r3 -2 [2]
load r0 r13 -2 [2]
load r1 r13 4 [2]
cmp r0 r1
brlt L108
addi r0 r14 0
rjmp L109
addi r0 r14 1
cmpi r0 0
breq L107
load r2 r13 2 [2]
load r3 r13 -2 [2]
addi r4 r14 1
mul r3 r3 r4
add r2 r2 r3
load r4 r13 7 [1]
store r2 r4 0 [1]
addi r3 r3 1
store r13 r3 -2 [2]
rjmp L106
addi r15 r15 2
move r12 r14
load r13 r15 0 [2]
addi r15 r15 2
subi r13 r13 1030
rjmprg r13
move r13 r15
load r0 r13 2 [2]
addi r1 r14 31
load r2 r14 29 [2]
addi r3 r14 2
mul r2 r2 r3
add r1 r1 r2
store r1 r0 0 [2]
addi r2 r2 1
store r14 r2 29 [2]
move r12 r14
load r13 r15 0 [2]
addi r15 r15 2
subi r13 r13 1045
rjmprg r13
move r13 r15
subi r15 r15 2
addi r0 r14 0
subi r15 r15 2
addi r1 r14 0
subi r15 r15 2
addi r2 r14 0
store r13 r0 -2 [2]
store r13 r1 -4 [2]
store r13 r2 -6 [2]
load r0 r13 -2 [2]
load r1 r14 6 [2]
cmp r0 r1
brlt L112
addi r0 r14 0
rjmp L113
addi r0 r14 1
cmpi r0 0
breq L111
subi r15 r15 2
addi r2 r14 0
subi r15 r15 2
addi r3 r14 -1
subi r15 r15 2
addi r4 r14 -1
store r13 r2 -8 [2]
store r13 r3 -10 [2]
store r13 r4 -12 [2]
load r0 r13 -12 [2]
cmpi r0 2
brlt L116
addi r0 r14 0
rjmp L117
addi r0 r14 1
cmpi r0 0
breq L115
load r0 r13 -10 [2]
cmpi r0 2
brlt L120
addi r0 r14 0
rjmp L121
addi r0 r14 1
cmpi r0 0
breq L119
subi r15 r15 2
load r1 r13 -4 [2]
load r2 r13 -10 [2]
add r1 r1 r2
subi r15 r15 2
load r3 r13 -6 [2]
load r4 r13 -12 [2]
add r3 r3 r4
store r13 r1 -14 [2]
load r5 r14 2 [2]
cmp r1 r5
brge L122
addi r1 r14 0
rjmp L123
addi r1 r14 1
store r13 r3 -16 [2]
cmpi r1 0
breq L124
addi r0 r14 0
store r13 r0 -14 [2]
rjmp L125
load r0 r13 -14 [2]
load r1 r14 2 [2]
cmp r0 r1
brle L126
addi r0 r14 0
rjmp L127
addi r0 r14 1
cmpi r0 0
breq L128
load r0 r14 2 [2]
subi r0 r0 1
store r13 r0 -14 [2]
rjmp L129
load r0 r13 -16 [2]
load r1 r14 4 [2]
cmp r0 r1
brge L130
addi r0 r14 0
rjmp L131
addi r0 r14 1
cmpi r0 0
breq L132
addi r0 r14 0
store r13 r0 -16 [2]
rjmp L133
load r0 r13 -14 [2]
load r1 r14 2 [2]
cmp r0 r1
brle L134
addi r0 r14 0
rjmp L135
addi r0 r14 1
cmpi r0 0
breq L136
load r0 r14 4 [2]
subi r0 r0 1
store r13 r0 -16 [2]
rjmp L137
subi r15 r15 2
load r0 r13 -14 [2]
load r1 r14 2 [2]
load r2 r13 -16 [2]
mul r1 r1 r2
add r0 r0 r1
load r3 r13 -8 [2]
addi r4 r14 28
store r13 r0 -18 [2]
add r0 r4 r0
load r0 r0 0 [1]
add r3 r3 r0
load r5 r13 -10 [2]
addi r5 r5 1
addi r15 r15 6
store r13 r3 -8 [2]
store r13 r5 -10 [2]
rjmp L118
load r0 r13 -12 [2]
addi r0 r0 1
store r13 r0 -12 [2]
rjmp L114
addi r0 r14 28
load r1 r13 -2 [2]
add r1 r0 r1
load r1 r1 0 [1]
cmpi r1 1
breq L138
addi r1 r14 0
rjmp L139
addi r1 r14 1
cmpi r1 0
breq L140
load r0 r13 -8 [2]
cmpi r0 2
brlt L142
addi r0 r14 0
rjmp L143
addi r0 r14 1
load r1 r13 -8 [2]
cmpi r1 3
brgt L144
addi r1 r14 0
rjmp L145
addi r1 r14 1
or r0 r0 r1
cmpi r0 0
breq L146
addi r15 r15 -2
store r15 r13 0 [2]
subi r15 r15 2
load r0 r13 -2 [2]
addi r15 r15 -2
store r15 r0 0 [2]
movlo r13 r13 1207
addi r15 r15 -2
store r15 r13 0 [2]
rjmp add_changed
addi r15 r15 4
load r13 r15 0 [2]
addi r15 r15 2
rjmp L147
rjmp L141
load r0 r13 -8 [2]
cmpi r0 3
breq L148
addi r0 r14 0
rjmp L149
addi r0 r14 1
cmpi r0 0
breq L150
addi r15 r15 -2
store r15 r13 0 [2]
subi r15 r15 2
load r0 r13 -2 [2]
addi r15 r15 -2
store r15 r0 0 [2]
movlo r13 r13 1230
addi r15 r15 -2
store r15 r13 0 [2]
rjmp add_changed
addi r15 r15 4
load r13 r15 0 [2]
addi r15 r15 2
rjmp L151
load r0 r13 -4 [2]
addi r0 r0 1
load r1 r13 -2 [2]
addi r1 r1 1
store r13 r0 -4 [2]
load r2 r14 2 [2]
cmp r0 r2
brge L152
addi r0 r14 0
rjmp L153
addi r0 r14 1
store r13 r1 -2 [2]
cmpi r0 0
breq L154
addi r0 r14 0
store r13 r0 -4 [2]
rjmp L155
addi r15 r15 6
rjmp L110
addi r15 r15 6
move r12 r14
load r13 r15 0 [2]
addi r15 r15 2
subi r13 r13 1258
rjmprg r13
move r13 r15
subi r15 r15 2
addi r0 r14 0
store r13 r0 -2 [2]
load r0 r13 -2 [2]
load r1 r14 6 [2]
cmp r0 r1
brlt L158
addi r0 r14 0
rjmp L159
addi r0 r14 1
cmpi r0 0
breq L157
addi r2 r14 28
load r3 r13 -2 [2]
add r3 r2 r3
load r3 r3 0 [1]
cmpi r3 0
breq L160
addi r15 r15 -2
store r15 r13 0 [2]
load r0 r13 -2 [2]
addi r15 r15 -2
store r15 r0 0 [2]
addi r1 r14 43
addi r15 r15 -2
store r15 r1 0 [2]
subi r15 r15 2
movlo r13 r13 1291
addi r15 r15 -2
store r15 r13 0 [2]
rjmp vga_write
addi r15 r15 6
load r13 r15 0 [2]
addi r15 r15 2
rjmp L161
addi r15 r15 -2
store r15 r13 0 [2]
load r0 r13 -2 [2]
addi r15 r15 -2
store r15 r0 0 [2]
addi r1 r14 32
addi r15 r15 -2
store r15 r1 0 [2]
subi r15 r15 2
movlo r13 r13 1308
addi r15 r15 -2
store r15 r13 0 [2]
rjmp vga_write
addi r15 r15 6
load r13 r15 0 [2]
addi r15 r15 2
rjmp L156
addi r15 r15 2
move r12 r14
load r13 r15 0 [2]
addi r15 r15 2
subi r13 r13 1317
rjmprg r13
move r13 r15
subi r15 r15 2
addi r0 r14 0
store r13 r0 -2 [2]
load r0 r13 -2 [2]
load r1 r14 29 [2]
cmp r0 r1
brlt L164
addi r0 r14 0
rjmp L165
addi r0 r14 1
cmpi r0 0
breq L163
subi r15 r15 2
addi r2 r14 31
load r3 r13 -2 [2]
addi r4 r14 2
mul r3 r3 r4
add r3 r2 r3
load r3 r3 0 [2]
addi r4 r14 28
store r13 r3 -4 [2]
add r3 r4 r3
load r3 r3 0 [1]
cmpi r3 0
breq L166
addi r0 r14 28
load r1 r13 -4 [2]
addi r2 r14 1
mul r1 r1 r2
add r0 r0 r1
addi r2 r14 0
store r0 r2 0 [1]
rjmp L167
addi r0 r14 28
load r1 r13 -4 [2]
addi r2 r14 1
mul r1 r1 r2
add r0 r0 r1
addi r2 r14 1
store r0 r2 0 [1]
addi r15 r15 2
rjmp L162
addi r0 r14 0
addi r15 r15 2
store r14 r0 29 [2]
move r12 r14
load r13 r15 0 [2]
addi r15 r15 2
subi r13 r13 1368
rjmprg r13
move r13 r15
load r0 r13 4 [4]
subi r15 r15 4
load r1 r14 158 [4]
mul r0 r0 r1
subi r15 r15 4
addi r2 r14 0
store r13 r0 -4 [4]
store r13 r2 -8 [4]
load r0 r13 -8 [4]
load r1 r13 -4 [4]
cmp r0 r1
brlt L170
addi r0 r14 0
rjmp L171
addi r0 r14 1
cmpi r0 0
breq L169
load r2 r13 -8 [4]
addi r2 r2 1
store r13 r2 -8 [4]
rjmp L168
addi r15 r15 8
move r12 r14
load r13 r15 0 [2]
addi r15 r15 2
subi r13 r13 1396
rjmprg r13
move r13 r15
addi r15 r15 -2
store r15 r13 0 [2]
movlo r13 r13 1404
addi r15 r15 -2
store r15 r13 0 [2]
rjmp calc_next_gen
load r13 r15 0 [2]
addi r15 r15 2
addi r15 r15 -2
store r15 r13 0 [2]
movlo r13 r13 1412
addi r15 r15 -2
store r15 r13 0 [2]
rjmp update_changed
load r13 r15 0 [2]
addi r15 r15 2
move r12 r14
load r13 r15 0 [2]
addi r15 r15 2
subi r13 r13 1418
rjmprg r13
move r13 r15
addi r15 r15 -2
store r15 r13 0 [2]
subi r15 r15 2
addi r0 r14 0
addi r15 r15 -1
store r15 r0 0 [1]
load r0 r14 6 [2]
subi r15 r15 1
addi r15 r15 -2
store r15 r0 0 [2]
addi r1 r14 28
addi r15 r15 -2
store r15 r1 0 [2]
movlo r13 r13 1437
addi r15 r15 -2
store r15 r13 0 [2]
rjmp memset
addi r15 r15 8
load r13 r15 0 [2]
addi r15 r15 2
addi r0 r14 28
addi r0 r0 41
addi r1 r14 1
store r0 r1 0 [1]
addi r0 r14 28
addi r0 r0 82
addi r1 r14 1
store r0 r1 0 [1]
addi r0 r14 28
addi r0 r0 121
addi r1 r14 1
store r0 r1 0 [1]
addi r0 r14 28
addi r0 r0 122
addi r1 r14 1
store r0 r1 0 [1]
addi r0 r14 28
addi r0 r0 123
addi r1 r14 1
store r0 r1 0 [1]
addi r15 r15 -2
store r15 r13 0 [2]
movlo r13 r13 1466
addi r15 r15 -2
store r15 r13 0 [2]
rjmp print_board
load r13 r15 0 [2]
addi r15 r15 2
addi r15 r15 -2
store r15 r13 0 [2]
subi r15 r15 2
addi r0 r14 500
addi r15 r15 -4
store r15 r0 0 [4]
subi r15 r15 2
movlo r13 r13 1479
addi r15 r15 -2
store r15 r13 0 [2]
rjmp sleep_ms
addi r15 r15 8
load r13 r15 0 [2]
addi r15 r15 2
addi r15 r15 -2
store r15 r13 0 [2]
movlo r13 r13 1488
addi r15 r15 -2
store r15 r13 0 [2]
rjmp next_gen
load r13 r15 0 [2]
addi r15 r15 2
rjmp L172
move r12 r14
load r13 r15 0 [2]
addi r15 r15 2
subi r13 r13 1495
rjmprg r13
(Pre handle_instructions)
(Code after 'handle_instructions')
 load r0 r14 2 [2]
load r1 r14 4 [2]
mul r0 r0 r1
store r14 r0 6 [2]
load r0 r14 6 [2]
store r14 r0 8 [2]
load r0 r14 6 [2]
load r2 r14 10 [2]
add r0 r0 r2
store r14 r0 12 [2]
subi r15 r15 1
movlo r13 r13 15
addi r15 r15 -2
store r15 r13 0 [2]
rjmp main
subi r15 r15 2
rjmp __halt
move r13 r15
load r0 r13 2 [2]
subi r15 r15 4
load r1 r13 -4 [4]
in r1 0
move r12 r1
addi r15 r15 4
load r13 r15 0 [2]
addi r15 r15 2
subi r13 r13 27
rjmprg r13
move r13 r15
load r0 r13 4 [4]
load r1 r13 10 [2]
out 0 r0
store r13 r0 4 [4]
move r12 r14
load r13 r15 0 [2]
addi r15 r15 2
subi r13 r13 37
rjmprg r13
move r13 r15
load r0 r13 4 [2]
load r1 r13 6 [2]
vgaw r1 r0 0
store r13 r1 6 [2]
move r12 r14
load r13 r15 0 [2]
addi r15 r15 2
subi r13 r13 47
rjmprg r13
move r13 r15
load r0 r13 2 [2]
load r1 r13 4 [2]
load r2 r13 6 [2]
cmp r0 r2
brge L0
addi r0 r14 0
rjmp L1
addi r0 r14 1
load r3 r13 2 [2]
cmp r3 r1
brlt L2
addi r3 r14 0
rjmp L3
addi r3 r14 1
or r0 r0 r3
move r12 r0
load r13 r15 0 [2]
addi r15 r15 2
subi r13 r13 68
rjmprg r13
move r13 r15
load r0 r13 4 [4]
load r1 r13 10 [2]
load r0 r13 10 [2]
cmpi r0 0
brgt L6
addi r0 r14 0
rjmp L7
addi r0 r14 1
cmpi r0 0
breq L5
load r1 r13 4 [4]
lsl r1 r1 [4]
load r2 r13 10 [2]
subi r2 r2 1
store r13 r1 4 [4]
store r13 r2 10 [2]
rjmp L4
load r0 r13 4 [4]
move r12 r0
load r13 r15 0 [2]
addi r15 r15 2
subi r13 r13 92
rjmprg r13
move r13 r15
load r0 r13 4 [4]
load r1 r13 10 [2]
load r0 r13 10 [2]
cmpi r0 0
brgt L10
addi r0 r14 0
rjmp L11
addi r0 r14 1
cmpi r0 0
breq L9
load r1 r13 4 [4]
lsr r1 r1 [4]
load r2 r13 10 [2]
subi r2 r2 1
store r13 r1 4 [4]
store r13 r2 10 [2]
rjmp L8
load r0 r13 4 [4]
move r12 r0
load r13 r15 0 [2]
addi r15 r15 2
subi r13 r13 116
rjmprg r13
move r13 r15
load r0 r13 4 [2]
load r1 r13 6 [2]
load r0 r13 6 [2]
cmpi r0 0
brgt L14
addi r0 r14 0
rjmp L15
addi r0 r14 1
cmpi r0 0
breq L13
load r1 r13 4 [2]
lsl r1 r1 [2]
load r2 r13 6 [2]
subi r2 r2 1
store r13 r1 4 [2]
store r13 r2 6 [2]
rjmp L12
load r0 r13 4 [2]
move r12 r0
load r13 r15 0 [2]
addi r15 r15 2
subi r13 r13 140
rjmprg r13
move r13 r15
load r0 r13 4 [2]
load r1 r13 6 [2]
load r0 r13 6 [2]
cmpi r0 0
brgt L18
addi r0 r14 0
rjmp L19
addi r0 r14 1
cmpi r0 0
breq L17
load r1 r13 4 [2]
lsr r1 r1 [2]
load r2 r13 6 [2]
subi r2 r2 1
store r13 r1 4 [2]
store r13 r2 6 [2]
rjmp L16
load r0 r13 4 [2]
move r12 r0
load r13 r15 0 [2]
addi r15 r15 2
subi r13 r13 164
rjmprg r13
move r13 r15
load r0 r13 5 [1]
load r1 r13 6 [2]
load r0 r13 6 [2]
cmpi r0 0
brgt L22
addi r0 r14 0
rjmp L23
addi r0 r14 1
cmpi r0 0
breq L21
load r1 r13 5 [1]
lsl r1 r1 [1]
load r2 r13 6 [2]
subi r2 r2 1
store r13 r1 5 [1]
store r13 r2 6 [2]
rjmp L20
load r0 r13 5 [1]
move r12 r0
load r13 r15 0 [2]
addi r15 r15 2
subi r13 r13 188
rjmprg r13
move r13 r15
load r0 r13 5 [1]
load r1 r13 6 [2]
load r0 r13 6 [2]
cmpi r0 0
brgt L26
addi r0 r14 0
rjmp L27
addi r0 r14 1
cmpi r0 0
breq L25
load r1 r13 5 [1]
lsr r1 r1 [1]
load r2 r13 6 [2]
subi r2 r2 1
store r13 r1 5 [1]
store r13 r2 6 [2]
rjmp L24
load r0 r13 5 [1]
move r12 r0
load r13 r15 0 [2]
addi r15 r15 2
subi r13 r13 212
rjmprg r13
move r13 r15
load r0 r13 4 [2]
load r1 r13 6 [2]
subi r15 r15 2
subi r15 r15 2
addi r2 r14 0
store r13 r0 -2 [2]
store r13 r2 -4 [2]
load r0 r13 -2 [2]
load r1 r13 6 [2]
cmp r0 r1
brgt L30
addi r0 r14 0
rjmp L31
addi r0 r14 1
cmpi r0 0
breq L29
load r2 r13 -2 [2]
sub r2 r2 r1
load r3 r13 -4 [2]
addi r3 r3 1
store r13 r2 -2 [2]
store r13 r3 -4 [2]
rjmp L28
subi r15 r15 4
load r0 r13 -4 [2]
addi r15 r15 -2
store r15 r13 0 [2]
subi r15 r15 2
addi r1 r14 16
addi r15 r15 -2
store r15 r1 0 [2]
subi r15 r15 2
addi r15 r15 -4
store r15 r0 0 [4]
store r13 r0 -8 [4]
subi r15 r15 2
movlo r13 r13 254
addi r15 r15 -2
store r15 r13 0 [2]
rjmp left_shift_l
addi r15 r15 12
load r13 r15 0 [2]
addi r15 r15 2
move r0 r12
store r13 r0 -8 [4]
load r1 r13 -2 [2]
add r0 r0 r1
move r12 r0
addi r15 r15 8
load r13 r15 0 [2]
addi r15 r15 2
subi r13 r13 266
rjmprg r13
move r13 r15
load r0 r13 4 [2]
load r3 r13 6 [2]
load r4 r14 6 [2]
cmp r3 r4
brge L32
addi r3 r14 0
rjmp L33
addi r3 r14 1
cmpi r3 0
breq L34
addi r12 r14 0
load r13 r15 0 [2]
addi r15 r15 2
subi r13 r13 282
rjmprg r13
rjmp L35
addi r15 r15 -2
store r15 r13 0 [2]
subi r15 r15 2
load r0 r13 6 [2]
addi r15 r15 -2
store r15 r0 0 [2]
load r1 r13 4 [2]
addi r15 r15 -2
store r15 r1 0 [2]
subi r15 r15 2
movlo r13 r13 298
addi r15 r15 -2
store r15 r13 0 [2]
rjmp vga_write
addi r15 r15 8
load r13 r15 0 [2]
addi r15 r15 2
addi r12 r14 1
load r13 r15 0 [2]
addi r15 r15 2
subi r13 r13 305
rjmprg r13
move r13 r15
load r0 r13 4 [4]
load r1 r13 8 [2]
load r2 r13 10 [2]
load r3 r14 14 [2]
cmp r1 r3
brge L36
addi r1 r14 0
rjmp L37
addi r1 r14 1
load r4 r14 16 [2]
cmp r2 r4
brge L38
addi r2 r14 0
rjmp L39
addi r2 r14 1
or r1 r1 r2
cmpi r1 0
breq L40
addi r12 r14 0
load r13 r15 0 [2]
addi r15 r15 2
subi r13 r13 329
rjmprg r13
rjmp L41
subi r15 r15 2
load r0 r13 8 [2]
load r1 r14 14 [2]
load r2 r13 10 [2]
mul r1 r1 r2
add r0 r0 r1
addi r15 r15 -2
store r15 r13 0 [2]
addi r15 r15 -2
store r15 r0 0 [2]
load r3 r13 4 [4]
addi r15 r15 -2
store r15 r3 0 [2]
store r13 r0 -2 [2]
subi r15 r15 2
movlo r13 r13 350
addi r15 r15 -2
store r15 r13 0 [2]
rjmp vga_write
addi r15 r15 6
load r13 r15 0 [2]
addi r15 r15 2
addi r12 r14 1
addi r15 r15 2
load r13 r15 0 [2]
addi r15 r15 2
subi r13 r13 358
rjmprg r13
move r13 r15
load r0 r13 2 [2]
load r1 r13 4 [2]
load r2 r13 6 [2]
load r3 r14 10 [2]
cmp r0 r3
brge L42
addi r0 r14 0
rjmp L43
addi r0 r14 1
cmpi r0 0
breq L44
addi r12 r14 0
load r13 r15 0 [2]
addi r15 r15 2
subi r13 r13 375
rjmprg r13
rjmp L45
subi r15 r15 2
load r0 r14 8 [2]
load r1 r13 2 [2]
add r0 r0 r1
subi r15 r15 2
load r2 r13 4 [2]
addi r15 r15 -2
store r15 r13 0 [2]
subi r15 r15 2
addi r3 r14 8
addi r15 r15 -2
store r15 r3 0 [2]
load r3 r13 4 [2]
addi r15 r15 -2
store r15 r3 0 [2]
store r13 r0 -2 [2]
store r13 r2 -4 [2]
subi r15 r15 2
movlo r13 r13 399
addi r15 r15 -2
store r15 r13 0 [2]
rjmp left_shift_i
addi r15 r15 8
load r13 r15 0 [2]
addi r15 r15 2
move r0 r12
store r13 r0 -4 [2]
load r1 r13 6 [2]
add r0 r0 r1
addi r15 r15 -2
store r15 r13 0 [2]
subi r15 r15 2
load r2 r13 -2 [2]
addi r15 r15 -2
store r15 r2 0 [2]
addi r15 r15 -2
store r15 r0 0 [2]
store r13 r0 -4 [2]
subi r15 r15 2
movlo r13 r13 420
addi r15 r15 -2
store r15 r13 0 [2]
rjmp vga_write
addi r15 r15 8
load r13 r15 0 [2]
addi r15 r15 2
addi r12 r14 1
addi r15 r15 4
load r13 r15 0 [2]
addi r15 r15 2
subi r13 r13 428
rjmprg r13
move r13 r15
load r0 r13 2 [1]
load r1 r13 3 [1]
load r2 r14 2 [2]
cmp r0 r2
brge L46
addi r0 r14 0
rjmp L47
addi r0 r14 1
load r3 r14 4 [2]
cmp r1 r3
brge L48
addi r1 r14 0
rjmp L49
addi r1 r14 1
or r0 r0 r1
cmpi r0 0
breq L50
addi r12 r14 0
load r13 r15 0 [2]
addi r15 r15 2
subi r13 r13 451
rjmprg r13
rjmp L51
load r0 r13 2 [1]
move r1 r0
load r2 r13 3 [1]
move r3 r2
add r0 r0 r2
load r4 r14 2 [2]
mul r0 r0 r4
store r14 r0 22 [2]
store r14 r1 24 [2]
store r14 r3 26 [2]
addi r12 r14 1
load r13 r15 0 [2]
addi r15 r15 2
subi r13 r13 467
rjmprg r13
move r13 r15
load r0 r14 22 [2]
addi r0 r0 1
store r14 r0 22 [2]
load r1 r14 6 [2]
cmp r0 r1
brlt L52
addi r0 r14 0
rjmp L53
addi r0 r14 1
cmpi r0 0
breq L54
load r0 r14 24 [2]
addi r0 r0 1
store r14 r0 24 [2]
load r1 r14 2 [2]
cmp r0 r1
brge L56
addi r0 r14 0
rjmp L57
addi r0 r14 1
cmpi r0 0
breq L58
addi r0 r14 0
load r1 r14 26 [2]
addi r1 r1 1
store r14 r0 24 [2]
store r14 r1 26 [2]
rjmp L59
rjmp L55
addi r0 r14 0
addi r1 r14 0
addi r2 r14 0
store r14 r0 22 [2]
store r14 r1 24 [2]
store r14 r2 26 [2]
move r12 r14
load r13 r15 0 [2]
addi r15 r15 2
subi r13 r13 508
rjmprg r13
move r13 r15
load r0 r14 22 [2]
cmpi r0 0
breq L60
addi r0 r14 0
rjmp L61
addi r0 r14 1
cmpi r0 0
breq L62
addi r12 r14 0
load r13 r15 0 [2]
addi r15 r15 2
subi r13 r13 522
rjmprg r13
rjmp L63
load r0 r14 22 [2]
subi r0 r0 1
store r14 r0 22 [2]
load r1 r14 6 [2]
cmp r0 r1
brlt L64
addi r0 r14 0
rjmp L65
addi r0 r14 1
cmpi r0 0
breq L66
load r0 r14 24 [2]
subi r0 r0 1
store r14 r0 24 [2]
cmpi r0 0
brlt L68
addi r0 r14 0
rjmp L69
addi r0 r14 1
cmpi r0 0
breq L70
addi r0 r14 0
load r1 r14 26 [2]
subi r1 r1 1
store r14 r0 24 [2]
store r14 r1 26 [2]
rjmp L71
rjmp L67
load r0 r14 6 [2]
subi r0 r0 1
load r1 r14 2 [2]
move r2 r1
load r3 r14 4 [2]
move r4 r3
store r14 r0 22 [2]
store r14 r2 24 [2]
store r14 r4 26 [2]
move r12 r14
load r13 r15 0 [2]
addi r15 r15 2
subi r13 r13 565
rjmprg r13
move r13 r15
load r0 r13 2 [2]
load r1 r14 6 [2]
cmp r0 r1
brge L72
addi r0 r14 0
rjmp L73
addi r0 r14 1
cmpi r0 0
breq L74
addi r12 r14 0
load r13 r15 0 [2]
addi r15 r15 2
subi r13 r13 580
rjmprg r13
rjmp L75
load r0 r14 22 [2]
load r1 r13 2 [2]
add r0 r0 r1
store r14 r0 22 [2]
load r2 r14 6 [2]
cmp r0 r2
brge L76
addi r0 r14 0
rjmp L77
addi r0 r14 1
cmpi r0 0
breq L78
load r0 r14 22 [2]
load r1 r14 6 [2]
sub r0 r0 r1
store r14 r0 22 [2]
rjmp L79
subi r15 r15 4
addi r15 r15 -2
store r15 r13 0 [2]
subi r15 r15 2
load r0 r14 2 [2]
addi r15 r15 -2
store r15 r0 0 [2]
load r1 r14 22 [2]
addi r15 r15 -2
store r15 r1 0 [2]
subi r15 r15 2
movlo r13 r13 614
addi r15 r15 -2
store r15 r13 0 [2]
rjmp divide
addi r15 r15 8
load r13 r15 0 [2]
addi r15 r15 2
move r0 r12
subi r15 r15 4
addi r15 r15 -2
store r15 r13 0 [2]
subi r15 r15 2
load r1 r14 4 [2]
addi r15 r15 -2
store r15 r1 0 [2]
load r2 r14 22 [2]
addi r15 r15 -2
store r15 r2 0 [2]
store r13 r0 -4 [4]
subi r15 r15 2
movlo r13 r13 634
addi r15 r15 -2
store r15 r13 0 [2]
rjmp divide
addi r15 r15 8
load r13 r15 0 [2]
addi r15 r15 2
move r0 r12
addi r15 r15 -2
store r15 r13 0 [2]
subi r15 r15 2
addi r1 r14 16
addi r15 r15 -2
store r15 r1 0 [2]
load r1 r13 -4 [4]
subi r15 r15 2
addi r15 r15 -4
store r15 r1 0 [4]
store r13 r0 -8 [4]
subi r15 r15 2
movlo r13 r13 654
addi r15 r15 -2
store r15 r13 0 [2]
rjmp right_shift_l
addi r15 r15 12
load r13 r15 0 [2]
addi r15 r15 2
move r0 r12
addi r15 r15 -2
store r15 r13 0 [2]
subi r15 r15 2
addi r1 r14 16
addi r15 r15 -2
store r15 r1 0 [2]
load r1 r13 -8 [4]
subi r15 r15 2
addi r15 r15 -4
store r15 r1 0 [4]
store r14 r0 24 [2]
subi r15 r15 2
movlo r13 r13 674
addi r15 r15 -2
store r15 r13 0 [2]
rjmp right_shift_l
addi r15 r15 12
load r13 r15 0 [2]
addi r15 r15 2
move r0 r12
store r14 r0 26 [2]
addi r12 r14 1
addi r15 r15 8
load r13 r15 0 [2]
addi r15 r15 2
subi r13 r13 684
rjmprg r13
move r13 r15
load r0 r14 26 [2]
addi r0 r0 1
store r14 r0 26 [2]
load r1 r14 4 [2]
cmp r0 r1
brlt L80
addi r0 r14 0
rjmp L81
addi r0 r14 1
cmpi r0 0
breq L82
load r0 r14 2 [2]
load r1 r14 26 [2]
mul r0 r0 r1
load r2 r14 24 [2]
add r0 r0 r2
store r14 r0 22 [2]
rjmp L83
load r0 r14 24 [2]
move r1 r0
addi r2 r14 0
store r14 r1 22 [2]
store r14 r2 26 [2]
move r12 r14
load r13 r15 0 [2]
addi r15 r15 2
subi r13 r13 713
rjmprg r13
move r13 r15
load r0 r14 26 [2]
subi r0 r0 1
store r14 r0 26 [2]
cmpi r0 0
brge L84
addi r0 r14 0
rjmp L85
addi r0 r14 1
cmpi r0 0
breq L86
load r0 r14 2 [2]
load r1 r14 26 [2]
mul r0 r0 r1
load r2 r14 24 [2]
add r0 r0 r2
store r14 r0 22 [2]
rjmp L87
load r0 r14 24 [2]
move r1 r0
load r2 r14 4 [2]
subi r2 r2 1
store r14 r1 22 [2]
store r14 r2 26 [2]
move r12 r14
load r13 r15 0 [2]
addi r15 r15 2
subi r13 r13 742
rjmprg r13
move r13 r15
load r0 r14 26 [2]
addi r0 r0 1
store r14 r0 26 [2]
load r1 r14 4 [2]
cmp r0 r1
brlt L88
addi r0 r14 0
rjmp L89
addi r0 r14 1
cmpi r0 0
breq L90
load r0 r14 2 [2]
load r1 r14 26 [2]
mul r0 r0 r1
store r14 r0 22 [2]
rjmp L91
addi r0 r14 0
addi r1 r14 0
store r14 r0 22 [2]
store r14 r1 26 [2]
addi r0 r14 0
store r14 r0 24 [2]
move r12 r14
load r13 r15 0 [2]
addi r15 r15 2
subi r13 r13 770
rjmprg r13
move r13 r15
load r0 r13 5 [1]
load r1 r13 6 [2]
load r2 r14 18 [2]
load r3 r14 10 [2]
cmp r2 r3
brge L92
addi r2 r14 0
rjmp L93
addi r2 r14 1
load r4 r14 20 [2]
cmp r4 r3
brge L94
addi r4 r14 0
rjmp L95
addi r4 r14 1
or r2 r2 r4
cmpi r2 0
breq L96
addi r12 r14 0
load r13 r15 0 [2]
addi r15 r15 2
subi r13 r13 794
rjmprg r13
rjmp L97
subi r15 r15 2
load r0 r14 18 [2]
addi r15 r15 -2
store r15 r13 0 [2]
addi r1 r14 4
addi r15 r15 -2
store r15 r1 0 [2]
addi r15 r15 -2
store r15 r0 0 [2]
store r13 r0 -2 [2]
subi r15 r15 2
movlo r13 r13 811
addi r15 r15 -2
store r15 r13 0 [2]
rjmp left_shift_i
addi r15 r15 6
load r13 r15 0 [2]
addi r15 r15 2
move r0 r12
store r13 r0 -2 [2]
load r1 r14 20 [2]
add r0 r0 r1
addi r15 r15 -2
store r15 r13 0 [2]
addi r2 r14 8
addi r15 r15 -2
store r15 r2 0 [2]
addi r15 r15 -2
store r15 r0 0 [2]
store r13 r0 -2 [2]
subi r15 r15 2
movlo r13 r13 831
addi r15 r15 -2
store r15 r13 0 [2]
rjmp left_shift_i
addi r15 r15 6
load r13 r15 0 [2]
addi r15 r15 2
move r0 r12
subi r15 r15 2
load r1 r13 5 [1]
store r13 r1 -4 [2]
add r1 r1 r0
addi r15 r15 -2
store r15 r13 0 [2]
subi r15 r15 2
load r2 r13 6 [2]
addi r15 r15 -2
store r15 r2 0 [2]
addi r15 r15 -2
store r15 r1 0 [2]
store r13 r0 -2 [2]
store r13 r1 -4 [2]
subi r15 r15 2
movlo r13 r13 854
addi r15 r15 -2
store r15 r13 0 [2]
rjmp tile_index_write
addi r15 r15 8
load r13 r15 0 [2]
addi r15 r15 2
addi r15 r15 4
load r13 r15 0 [2]
addi r15 r15 2
subi r13 r13 861
rjmprg r13
move r13 r15
load r0 r13 3 [1]
load r1 r13 4 [2]
load r2 r13 6 [2]
addi r15 r15 -2
store r15 r13 0 [2]
subi r15 r15 2
load r3 r14 2 [2]
mul r3 r3 r2
add r1 r1 r3
addi r15 r15 -2
store r15 r1 0 [2]
addi r15 r15 -1
store r15 r0 0 [1]
subi r15 r15 3
movlo r13 r13 881
addi r15 r15 -2
store r15 r13 0 [2]
rjmp print_c_at
addi r15 r15 8
load r13 r15 0 [2]
addi r15 r15 2
load r13 r15 0 [2]
addi r15 r15 2
subi r13 r13 887
rjmprg r13
move r13 r15
load r0 r13 3 [1]
addi r15 r15 -2
store r15 r13 0 [2]
subi r15 r15 2
load r1 r14 22 [2]
addi r15 r15 -2
store r15 r1 0 [2]
addi r15 r15 -1
store r15 r0 0 [1]
subi r15 r15 3
movlo r13 r13 903
addi r15 r15 -2
store r15 r13 0 [2]
rjmp print_c_at
addi r15 r15 8
load r13 r15 0 [2]
addi r15 r15 2
cmpi r12 0
breq L98
addi r15 r15 -2
store r15 r13 0 [2]
movlo r13 r13 914
addi r15 r15 -2
store r15 r13 0 [2]
rjmp advance_cursor
load r13 r15 0 [2]
addi r15 r15 2
addi r12 r14 1
load r13 r15 0 [2]
addi r15 r15 2
subi r13 r13 920
rjmprg r13
rjmp L99
addi r12 r14 0
load r13 r15 0 [2]
addi r15 r15 2
subi r13 r13 926
rjmprg r13
move r13 r15
load r0 r13 2 [2]
load r0 r13 2 [2]
load r0 r0 0 [1]
cmpi r0 0
breq L101
addi r15 r15 -2
store r15 r13 0 [2]
subi r15 r15 2
load r1 r13 2 [2]
load r1 r1 0 [1]
addi r15 r15 -1
store r15 r1 0 [1]
subi r15 r15 1
movlo r13 r13 945
addi r15 r15 -2
store r15 r13 0 [2]
rjmp print_c
addi r15 r15 4
load r13 r15 0 [2]
addi r15 r15 2
load r0 r13 2 [2]
addi r0 r0 1
store r13 r0 2 [2]
rjmp L100
move r12 r14
load r13 r15 0 [2]
addi r15 r15 2
subi r13 r13 956
rjmprg r13
move r13 r15
subi r15 r15 2
addi r0 r14 0
store r13 r0 -2 [2]
load r0 r13 -2 [2]
load r1 r14 6 [2]
cmp r0 r1
brlt L104
addi r0 r14 0
rjmp L105
addi r0 r14 1
cmpi r0 0
breq L103
addi r15 r15 -2
store r15 r13 0 [2]
load r2 r13 -2 [2]
addi r15 r15 -2
store r15 r2 0 [2]
addi r3 r14 0
addi r15 r15 -2
store r15 r3 0 [2]
subi r15 r15 2
movlo r13 r13 983
addi r15 r15 -2
store r15 r13 0 [2]
rjmp tile_index_write
addi r15 r15 6
load r13 r15 0 [2]
addi r15 r15 2
rjmp L102
addi r0 r14 0
addi r1 r14 0
addi r2 r14 0
addi r15 r15 2
store r14 r0 22 [2]
store r14 r1 24 [2]
store r14 r2 26 [2]
move r12 r14
load r13 r15 0 [2]
addi r15 r15 2
subi r13 r13 998
rjmprg r13
move r13 r15
load r0 r13 2 [2]
load r1 r13 4 [2]
load r2 r13 7 [1]
subi r15 r15 2
addi r3 r14 0
store r13 r3 -2 [2]
load r0 r13 -2 [2]
load r1 r13 4 [2]
cmp r0 r1
brlt L108
addi r0 r14 0
rjmp L109
addi r0 r14 1
cmpi r0 0
breq L107
load r2 r13 2 [2]
load r3 r13 -2 [2]
addi r4 r14 1
mul r3 r3 r4
add r2 r2 r3
load r4 r13 7 [1]
store r2 r4 0 [1]
addi r3 r3 1
store r13 r3 -2 [2]
rjmp L106
addi r15 r15 2
move r12 r14
load r13 r15 0 [2]
addi r15 r15 2
subi r13 r13 1030
rjmprg r13
move r13 r15
load r0 r13 2 [2]
addi r1 r14 31
load r2 r14 29 [2]
addi r3 r14 2
mul r2 r2 r3
add r1 r1 r2
store r1 r0 0 [2]
addi r2 r2 1
store r14 r2 29 [2]
move r12 r14
load r13 r15 0 [2]
addi r15 r15 2
subi r13 r13 1045
rjmprg r13
move r13 r15
subi r15 r15 2
addi r0 r14 0
subi r15 r15 2
addi r1 r14 0
subi r15 r15 2
addi r2 r14 0
store r13 r0 -2 [2]
store r13 r1 -4 [2]
store r13 r2 -6 [2]
load r0 r13 -2 [2]
load r1 r14 6 [2]
cmp r0 r1
brlt L112
addi r0 r14 0
rjmp L113
addi r0 r14 1
cmpi r0 0
breq L111
subi r15 r15 2
addi r2 r14 0
subi r15 r15 2
addi r3 r14 -1
subi r15 r15 2
addi r4 r14 -1
store r13 r2 -8 [2]
store r13 r3 -10 [2]
store r13 r4 -12 [2]
load r0 r13 -12 [2]
cmpi r0 2
brlt L116
addi r0 r14 0
rjmp L117
addi r0 r14 1
cmpi r0 0
breq L115
load r0 r13 -10 [2]
cmpi r0 2
brlt L120
addi r0 r14 0
rjmp L121
addi r0 r14 1
cmpi r0 0
breq L119
subi r15 r15 2
load r1 r13 -4 [2]
load r2 r13 -10 [2]
add r1 r1 r2
subi r15 r15 2
load r3 r13 -6 [2]
load r4 r13 -12 [2]
add r3 r3 r4
store r13 r1 -14 [2]
load r5 r14 2 [2]
cmp r1 r5
brge L122
addi r1 r14 0
rjmp L123
addi r1 r14 1
store r13 r3 -16 [2]
cmpi r1 0
breq L124
addi r0 r14 0
store r13 r0 -14 [2]
rjmp L125
load r0 r13 -14 [2]
load r1 r14 2 [2]
cmp r0 r1
brle L126
addi r0 r14 0
rjmp L127
addi r0 r14 1
cmpi r0 0
breq L128
load r0 r14 2 [2]
subi r0 r0 1
store r13 r0 -14 [2]
rjmp L129
load r0 r13 -16 [2]
load r1 r14 4 [2]
cmp r0 r1
brge L130
addi r0 r14 0
rjmp L131
addi r0 r14 1
cmpi r0 0
breq L132
addi r0 r14 0
store r13 r0 -16 [2]
rjmp L133
load r0 r13 -14 [2]
load r1 r14 2 [2]
cmp r0 r1
brle L134
addi r0 r14 0
rjmp L135
addi r0 r14 1
cmpi r0 0
breq L136
load r0 r14 4 [2]
subi r0 r0 1
store r13 r0 -16 [2]
rjmp L137
subi r15 r15 2
load r0 r13 -14 [2]
load r1 r14 2 [2]
load r2 r13 -16 [2]
mul r1 r1 r2
add r0 r0 r1
load r3 r13 -8 [2]
addi r4 r14 28
store r13 r0 -18 [2]
add r0 r4 r0
load r0 r0 0 [1]
add r3 r3 r0
load r5 r13 -10 [2]
addi r5 r5 1
addi r15 r15 6
store r13 r3 -8 [2]
store r13 r5 -10 [2]
rjmp L118
load r0 r13 -12 [2]
addi r0 r0 1
store r13 r0 -12 [2]
rjmp L114
addi r0 r14 28
load r1 r13 -2 [2]
add r1 r0 r1
load r1 r1 0 [1]
cmpi r1 1
breq L138
addi r1 r14 0
rjmp L139
addi r1 r14 1
cmpi r1 0
breq L140
load r0 r13 -8 [2]
cmpi r0 2
brlt L142
addi r0 r14 0
rjmp L143
addi r0 r14 1
load r1 r13 -8 [2]
cmpi r1 3
brgt L144
addi r1 r14 0
rjmp L145
addi r1 r14 1
or r0 r0 r1
cmpi r0 0
breq L146
addi r15 r15 -2
store r15 r13 0 [2]
subi r15 r15 2
load r0 r13 -2 [2]
addi r15 r15 -2
store r15 r0 0 [2]
movlo r13 r13 1207
addi r15 r15 -2
store r15 r13 0 [2]
rjmp add_changed
addi r15 r15 4
load r13 r15 0 [2]
addi r15 r15 2
rjmp L147
rjmp L141
load r0 r13 -8 [2]
cmpi r0 3
breq L148
addi r0 r14 0
rjmp L149
addi r0 r14 1
cmpi r0 0
breq L150
addi r15 r15 -2
store r15 r13 0 [2]
subi r15 r15 2
load r0 r13 -2 [2]
addi r15 r15 -2
store r15 r0 0 [2]
movlo r13 r13 1230
addi r15 r15 -2
store r15 r13 0 [2]
rjmp add_changed
addi r15 r15 4
load r13 r15 0 [2]
addi r15 r15 2
rjmp L151
load r0 r13 -4 [2]
addi r0 r0 1
load r1 r13 -2 [2]
addi r1 r1 1
store r13 r0 -4 [2]
load r2 r14 2 [2]
cmp r0 r2
brge L152
addi r0 r14 0
rjmp L153
addi r0 r14 1
store r13 r1 -2 [2]
cmpi r0 0
breq L154
addi r0 r14 0
store r13 r0 -4 [2]
rjmp L155
addi r15 r15 6
rjmp L110
addi r15 r15 6
move r12 r14
load r13 r15 0 [2]
addi r15 r15 2
subi r13 r13 1258
rjmprg r13
move r13 r15
subi r15 r15 2
addi r0 r14 0
store r13 r0 -2 [2]
load r0 r13 -2 [2]
load r1 r14 6 [2]
cmp r0 r1
brlt L158
addi r0 r14 0
rjmp L159
addi r0 r14 1
cmpi r0 0
breq L157
addi r2 r14 28
load r3 r13 -2 [2]
add r3 r2 r3
load r3 r3 0 [1]
cmpi r3 0
breq L160
addi r15 r15 -2
store r15 r13 0 [2]
load r0 r13 -2 [2]
addi r15 r15 -2
store r15 r0 0 [2]
addi r1 r14 43
addi r15 r15 -2
store r15 r1 0 [2]
subi r15 r15 2
movlo r13 r13 1291
addi r15 r15 -2
store r15 r13 0 [2]
rjmp vga_write
addi r15 r15 6
load r13 r15 0 [2]
addi r15 r15 2
rjmp L161
addi r15 r15 -2
store r15 r13 0 [2]
load r0 r13 -2 [2]
addi r15 r15 -2
store r15 r0 0 [2]
addi r1 r14 32
addi r15 r15 -2
store r15 r1 0 [2]
subi r15 r15 2
movlo r13 r13 1308
addi r15 r15 -2
store r15 r13 0 [2]
rjmp vga_write
addi r15 r15 6
load r13 r15 0 [2]
addi r15 r15 2
rjmp L156
addi r15 r15 2
move r12 r14
load r13 r15 0 [2]
addi r15 r15 2
subi r13 r13 1317
rjmprg r13
move r13 r15
subi r15 r15 2
addi r0 r14 0
store r13 r0 -2 [2]
load r0 r13 -2 [2]
load r1 r14 29 [2]
cmp r0 r1
brlt L164
addi r0 r14 0
rjmp L165
addi r0 r14 1
cmpi r0 0
breq L163
subi r15 r15 2
addi r2 r14 31
load r3 r13 -2 [2]
addi r4 r14 2
mul r3 r3 r4
add r3 r2 r3
load r3 r3 0 [2]
addi r4 r14 28
store r13 r3 -4 [2]
add r3 r4 r3
load r3 r3 0 [1]
cmpi r3 0
breq L166
addi r0 r14 28
load r1 r13 -4 [2]
addi r2 r14 1
mul r1 r1 r2
add r0 r0 r1
addi r2 r14 0
store r0 r2 0 [1]
rjmp L167
addi r0 r14 28
load r1 r13 -4 [2]
addi r2 r14 1
mul r1 r1 r2
add r0 r0 r1
addi r2 r14 1
store r0 r2 0 [1]
addi r15 r15 2
rjmp L162
addi r0 r14 0
addi r15 r15 2
store r14 r0 29 [2]
move r12 r14
load r13 r15 0 [2]
addi r15 r15 2
subi r13 r13 1368
rjmprg r13
move r13 r15
load r0 r13 4 [4]
subi r15 r15 4
load r1 r14 158 [4]
mul r0 r0 r1
subi r15 r15 4
addi r2 r14 0
store r13 r0 -4 [4]
store r13 r2 -8 [4]
load r0 r13 -8 [4]
load r1 r13 -4 [4]
cmp r0 r1
brlt L170
addi r0 r14 0
rjmp L171
addi r0 r14 1
cmpi r0 0
breq L169
load r2 r13 -8 [4]
addi r2 r2 1
store r13 r2 -8 [4]
rjmp L168
addi r15 r15 8
move r12 r14
load r13 r15 0 [2]
addi r15 r15 2
subi r13 r13 1396
rjmprg r13
move r13 r15
addi r15 r15 -2
store r15 r13 0 [2]
movlo r13 r13 1404
addi r15 r15 -2
store r15 r13 0 [2]
rjmp calc_next_gen
load r13 r15 0 [2]
addi r15 r15 2
addi r15 r15 -2
store r15 r13 0 [2]
movlo r13 r13 1412
addi r15 r15 -2
store r15 r13 0 [2]
rjmp update_changed
load r13 r15 0 [2]
addi r15 r15 2
move r12 r14
load r13 r15 0 [2]
addi r15 r15 2
subi r13 r13 1418
rjmprg r13
move r13 r15
addi r15 r15 -2
store r15 r13 0 [2]
subi r15 r15 2
addi r0 r14 0
addi r15 r15 -1
store r15 r0 0 [1]
load r0 r14 6 [2]
subi r15 r15 1
addi r15 r15 -2
store r15 r0 0 [2]
addi r1 r14 28
addi r15 r15 -2
store r15 r1 0 [2]
movlo r13 r13 1437
addi r15 r15 -2
store r15 r13 0 [2]
rjmp memset
addi r15 r15 8
load r13 r15 0 [2]
addi r15 r15 2
addi r0 r14 28
addi r0 r0 41
addi r1 r14 1
store r0 r1 0 [1]
addi r0 r14 28
addi r0 r0 82
addi r1 r14 1
store r0 r1 0 [1]
addi r0 r14 28
addi r0 r0 121
addi r1 r14 1
store r0 r1 0 [1]
addi r0 r14 28
addi r0 r0 122
addi r1 r14 1
store r0 r1 0 [1]
addi r0 r14 28
addi r0 r0 123
addi r1 r14 1
store r0 r1 0 [1]
addi r15 r15 -2
store r15 r13 0 [2]
movlo r13 r13 1466
addi r15 r15 -2
store r15 r13 0 [2]
rjmp print_board
load r13 r15 0 [2]
addi r15 r15 2
addi r15 r15 -2
store r15 r13 0 [2]
subi r15 r15 2
addi r0 r14 500
addi r15 r15 -4
store r15 r0 0 [4]
subi r15 r15 2
movlo r13 r13 1479
addi r15 r15 -2
store r15 r13 0 [2]
rjmp sleep_ms
addi r15 r15 8
load r13 r15 0 [2]
addi r15 r15 2
addi r15 r15 -2
store r15 r13 0 [2]
movlo r13 r13 1488
addi r15 r15 -2
store r15 r13 0 [2]
rjmp next_gen
load r13 r15 0 [2]
addi r15 r15 2
rjmp L172
move r12 r14
load r13 r15 0 [2]
addi r15 r15 2
subi r13 r13 1495
rjmprg r13
