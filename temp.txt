(Pre remove_comments_and_whitespace)
(Code after 'remove_comments_and_whitespace')
 const SP r15
const NULL r14
const BP r13
const RR r12
.data NEW_UART_MASK
.dh 256
subi SP, SP, 1
call main
subi SP, SP, 2
__halt:
rjmp __halt
get_uart:
move BP, SP
subi SP, SP, 2
load[2] r0, BP, -2
in r0, 1
move RR, r0
addi SP, SP, 2
ret
store_pm:
move BP, SP
load[2] r0, BP, 2
load[4] r1, BP, 4
store_pm r0, r1, _program_end_
store[2] BP, r0, 2
move RR, NULL
ret
store_dm:
move BP, SP
load[2] r0, BP, 4
load[2] r1, BP, 6
store[1] r0, r1, 0
store[2] BP, r0, 4
move RR, NULL
ret
is_uart_new:
move BP, SP
subi SP, SP, 2
addi r0, NULL, 0
subi SP, SP, 2
push[2] BP
store[2] BP, r0, -2
call get_uart
pop[2] BP
move r0, RR
subi SP, SP, 2
load[2] r1, NULL, NEW_UART_MASK
and r1, r1, r0
move RR, r1
addi SP, SP, 6
ret
get_uart_byte:
move BP, SP
subi SP, SP, 2
push[2] BP
subi SP, SP, 2
call get_uart
addi SP, SP, 2
pop[2] BP
move r0, RR
subi SP, SP, 2
store[2] BP, r0, -2
load[2] r1, NULL, NEW_UART_MASK
subi r1, r1, 1
and r0, r0, r1
move RR, r0
addi SP, SP, 4
ret
get_num_lines:
move BP, SP
subi SP, SP, 2
addi r0, NULL, 0
subi SP, SP, 2
addi r1, NULL, 1
store[2] BP, r0, -2
store[2] BP, r1, -4
L0:
load[2] r0, BP, -4
cmpi r0, 0
breq L1
subi SP, SP, 2
push[2] BP
subi SP, SP, 2
call get_uart
addi SP, SP, 2
pop[2] BP
move r0, RR
subi SP, SP, 2
store[2] BP, r0, -6
load[2] r1, NULL, NEW_UART_MASK
and r0, r0, r1
subi SP, SP, 2
load[2] r2, BP, -6
subi r1, r1, 1
and r2, r2, r1
store[2] BP, r0, -8
cmpi r0, 0
brne L2
addi r0, NULL, 0
rjmp L3
L2:
addi r0, NULL, 1
L3:
store[2] BP, r2, -10
cmpi r2, 10
brlt L4
addi r2, NULL, 0
rjmp L5
L4:
addi r2, NULL, 1
L5:
and r0, r0, r2
cmpi r0, 0
breq L6
load[2] r0, BP, -2
addi r1, NULL, 10
mul r0, r0, r1
load[2] r1, BP, -10
add r0, r0, r1
store[2] BP, r0, -2
rjmp L7
L6:
L7:
load[2] r0, BP, -8
cmpi r0, 0
brne L8
addi r0, NULL, 0
rjmp L9
L8:
addi r0, NULL, 1
L9:
load[2] r1, BP, -10
cmpi r1, 9
brgt L10
addi r1, NULL, 0
rjmp L11
L10:
addi r1, NULL, 1
L11:
and r0, r0, r1
cmpi r0, 0
breq L12
addi r0, NULL, 0
store[2] BP, r0, -4
rjmp L13
L12:
L13:
addi SP, SP, 6
rjmp L0
L1:
load[2] r0, BP, -2
move RR, r0
addi SP, SP, 4
ret
load_uart:
move BP, SP
subi SP, SP, 2
push[2] BP
subi SP, SP, 2
call get_num_lines
addi SP, SP, 2
pop[2] BP
move r0, RR
subi SP, SP, 6
addi r1, NULL, 0
subi SP, SP, 2
addi r2, NULL, 0
subi SP, SP, 2
addi r3, NULL, 0
store[2] BP, r0, -2
store[4] BP, r1, -8
store[2] BP, r2, -10
store[2] BP, r3, -12
L14:
load[2] r0, BP, -2
cmpi r0, 0
breq L15
L16:
load[2] r0, BP, -10
cmpi r0, 4
brlt L18
addi r0, NULL, 0
rjmp L19
L18:
addi r0, NULL, 1
L19:
cmpi r0, 0
breq L17
push[2] BP
call is_uart_new
pop[2] BP
cmpi RR, 0
breq L20
load[4] r0, BP, -8
addi r1, NULL, 256
mul r0, r0, r1
push[2] r0
push[2] BP
subi SP, SP, 2
call get_uart_byte
addi SP, SP, 2
pop[2] BP
pop[2] r0
add r0, r0, RR
load[2] r1, BP, -10
addi r1, r1, 1
store[4] BP, r0, -8
store[2] BP, r1, -10
rjmp L21
L20:
L21:
rjmp L16
L17:
addi r0, NULL, 0
load[2] r1, BP, -2
subi r1, r1, 1
push[2] BP
subi SP, SP, 2
load[4] r2, BP, -8
push[4] r2
load[2] r3, BP, -12
push[2] r3
store[2] BP, r0, -10
store[2] BP, r1, -2
call store_pm
addi SP, SP, 8
pop[2] BP
addi r0, NULL, 0
load[2] r1, BP, -12
addi r1, r1, 1
store[4] BP, r0, -8
store[2] BP, r1, -12
rjmp L14
L15:
addi r0, NULL, 0
subi SP, SP, 2
push[2] BP
store[2] BP, r0, -12
subi SP, SP, 2
call get_num_lines
addi SP, SP, 2
pop[2] BP
move r0, RR
subi SP, SP, 2
addi r1, NULL, 0
store[2] BP, r0, -14
store[2] BP, r1, -16
L22:
load[2] r0, BP, -14
cmpi r0, 0
breq L23
push[2] BP
call is_uart_new
pop[2] BP
cmpi RR, 0
breq L24
push[2] BP
call get_uart_byte
pop[2] BP
move r0, RR
load[2] r1, BP, -14
subi r1, r1, 1
push[2] BP
subi SP, SP, 2
push[2] r0
load[2] r2, BP, -12
push[2] r2
store[2] BP, r0, -16
store[2] BP, r1, -14
subi SP, SP, 2
call store_dm
addi SP, SP, 8
pop[2] BP
load[2] r0, BP, -12
addi r0, r0, 1
store[2] BP, r0, -12
rjmp L25
L24:
L25:
rjmp L22
L23:
addi SP, SP, 16
move RR, NULL
ret
main:
move BP, SP
L26:
push[2] BP
call is_uart_new
pop[2] BP
cmpi RR, 0
breq L28
push[2] BP
call load_uart
pop[2] BP
rjmp _program_end_
rjmp L29
L28:
L29:
rjmp L26
L27:
move RR, NULL
ret
_program_end_:
(Pre register_macros)
(Code after 'register_macros')
 const SP r15
const NULL r14
const BP r13
const RR r12
.data NEW_UART_MASK
.dh 256
subi SP, SP, 1
call main
subi SP, SP, 2
__halt:
rjmp __halt
get_uart:
move BP, SP
subi SP, SP, 2
load[2] r0, BP, -2
in r0, 1
move RR, r0
addi SP, SP, 2
ret
store_pm:
move BP, SP
load[2] r0, BP, 2
load[4] r1, BP, 4
store_pm r0, r1, _program_end_
store[2] BP, r0, 2
move RR, NULL
ret
store_dm:
move BP, SP
load[2] r0, BP, 4
load[2] r1, BP, 6
store[1] r0, r1, 0
store[2] BP, r0, 4
move RR, NULL
ret
is_uart_new:
move BP, SP
subi SP, SP, 2
addi r0, NULL, 0
subi SP, SP, 2
push[2] BP
store[2] BP, r0, -2
call get_uart
pop[2] BP
move r0, RR
subi SP, SP, 2
load[2] r1, NULL, NEW_UART_MASK
and r1, r1, r0
move RR, r1
addi SP, SP, 6
ret
get_uart_byte:
move BP, SP
subi SP, SP, 2
push[2] BP
subi SP, SP, 2
call get_uart
addi SP, SP, 2
pop[2] BP
move r0, RR
subi SP, SP, 2
store[2] BP, r0, -2
load[2] r1, NULL, NEW_UART_MASK
subi r1, r1, 1
and r0, r0, r1
move RR, r0
addi SP, SP, 4
ret
get_num_lines:
move BP, SP
subi SP, SP, 2
addi r0, NULL, 0
subi SP, SP, 2
addi r1, NULL, 1
store[2] BP, r0, -2
store[2] BP, r1, -4
L0:
load[2] r0, BP, -4
cmpi r0, 0
breq L1
subi SP, SP, 2
push[2] BP
subi SP, SP, 2
call get_uart
addi SP, SP, 2
pop[2] BP
move r0, RR
subi SP, SP, 2
store[2] BP, r0, -6
load[2] r1, NULL, NEW_UART_MASK
and r0, r0, r1
subi SP, SP, 2
load[2] r2, BP, -6
subi r1, r1, 1
and r2, r2, r1
store[2] BP, r0, -8
cmpi r0, 0
brne L2
addi r0, NULL, 0
rjmp L3
L2:
addi r0, NULL, 1
L3:
store[2] BP, r2, -10
cmpi r2, 10
brlt L4
addi r2, NULL, 0
rjmp L5
L4:
addi r2, NULL, 1
L5:
and r0, r0, r2
cmpi r0, 0
breq L6
load[2] r0, BP, -2
addi r1, NULL, 10
mul r0, r0, r1
load[2] r1, BP, -10
add r0, r0, r1
store[2] BP, r0, -2
rjmp L7
L6:
L7:
load[2] r0, BP, -8
cmpi r0, 0
brne L8
addi r0, NULL, 0
rjmp L9
L8:
addi r0, NULL, 1
L9:
load[2] r1, BP, -10
cmpi r1, 9
brgt L10
addi r1, NULL, 0
rjmp L11
L10:
addi r1, NULL, 1
L11:
and r0, r0, r1
cmpi r0, 0
breq L12
addi r0, NULL, 0
store[2] BP, r0, -4
rjmp L13
L12:
L13:
addi SP, SP, 6
rjmp L0
L1:
load[2] r0, BP, -2
move RR, r0
addi SP, SP, 4
ret
load_uart:
move BP, SP
subi SP, SP, 2
push[2] BP
subi SP, SP, 2
call get_num_lines
addi SP, SP, 2
pop[2] BP
move r0, RR
subi SP, SP, 6
addi r1, NULL, 0
subi SP, SP, 2
addi r2, NULL, 0
subi SP, SP, 2
addi r3, NULL, 0
store[2] BP, r0, -2
store[4] BP, r1, -8
store[2] BP, r2, -10
store[2] BP, r3, -12
L14:
load[2] r0, BP, -2
cmpi r0, 0
breq L15
L16:
load[2] r0, BP, -10
cmpi r0, 4
brlt L18
addi r0, NULL, 0
rjmp L19
L18:
addi r0, NULL, 1
L19:
cmpi r0, 0
breq L17
push[2] BP
call is_uart_new
pop[2] BP
cmpi RR, 0
breq L20
load[4] r0, BP, -8
addi r1, NULL, 256
mul r0, r0, r1
push[2] r0
push[2] BP
subi SP, SP, 2
call get_uart_byte
addi SP, SP, 2
pop[2] BP
pop[2] r0
add r0, r0, RR
load[2] r1, BP, -10
addi r1, r1, 1
store[4] BP, r0, -8
store[2] BP, r1, -10
rjmp L21
L20:
L21:
rjmp L16
L17:
addi r0, NULL, 0
load[2] r1, BP, -2
subi r1, r1, 1
push[2] BP
subi SP, SP, 2
load[4] r2, BP, -8
push[4] r2
load[2] r3, BP, -12
push[2] r3
store[2] BP, r0, -10
store[2] BP, r1, -2
call store_pm
addi SP, SP, 8
pop[2] BP
addi r0, NULL, 0
load[2] r1, BP, -12
addi r1, r1, 1
store[4] BP, r0, -8
store[2] BP, r1, -12
rjmp L14
L15:
addi r0, NULL, 0
subi SP, SP, 2
push[2] BP
store[2] BP, r0, -12
subi SP, SP, 2
call get_num_lines
addi SP, SP, 2
pop[2] BP
move r0, RR
subi SP, SP, 2
addi r1, NULL, 0
store[2] BP, r0, -14
store[2] BP, r1, -16
L22:
load[2] r0, BP, -14
cmpi r0, 0
breq L23
push[2] BP
call is_uart_new
pop[2] BP
cmpi RR, 0
breq L24
push[2] BP
call get_uart_byte
pop[2] BP
move r0, RR
load[2] r1, BP, -14
subi r1, r1, 1
push[2] BP
subi SP, SP, 2
push[2] r0
load[2] r2, BP, -12
push[2] r2
store[2] BP, r0, -16
store[2] BP, r1, -14
subi SP, SP, 2
call store_dm
addi SP, SP, 8
pop[2] BP
load[2] r0, BP, -12
addi r0, r0, 1
store[2] BP, r0, -12
rjmp L25
L24:
L25:
rjmp L22
L23:
addi SP, SP, 16
move RR, NULL
ret
main:
move BP, SP
L26:
push[2] BP
call is_uart_new
pop[2] BP
cmpi RR, 0
breq L28
push[2] BP
call load_uart
pop[2] BP
rjmp _program_end_
rjmp L29
L28:
L29:
rjmp L26
L27:
move RR, NULL
ret
_program_end_:
(Pre handle_macros)
(Code after 'handle_macros')
 const SP r15
const NULL r14
const BP r13
const RR r12
.data NEW_UART_MASK
.dh 256
subi SP, SP, 1
call main
subi SP, SP, 2
__halt:
rjmp __halt
get_uart:
move BP, SP
subi SP, SP, 2
load[2] r0, BP, -2
in r0, 1
move RR, r0
addi SP, SP, 2
ret
store_pm:
move BP, SP
load[2] r0, BP, 2
load[4] r1, BP, 4
store_pm r0, r1, _program_end_
store[2] BP, r0, 2
move RR, NULL
ret
store_dm:
move BP, SP
load[2] r0, BP, 4
load[2] r1, BP, 6
store[1] r0, r1, 0
store[2] BP, r0, 4
move RR, NULL
ret
is_uart_new:
move BP, SP
subi SP, SP, 2
addi r0, NULL, 0
subi SP, SP, 2
push[2] BP
store[2] BP, r0, -2
call get_uart
pop[2] BP
move r0, RR
subi SP, SP, 2
load[2] r1, NULL, NEW_UART_MASK
and r1, r1, r0
move RR, r1
addi SP, SP, 6
ret
get_uart_byte:
move BP, SP
subi SP, SP, 2
push[2] BP
subi SP, SP, 2
call get_uart
addi SP, SP, 2
pop[2] BP
move r0, RR
subi SP, SP, 2
store[2] BP, r0, -2
load[2] r1, NULL, NEW_UART_MASK
subi r1, r1, 1
and r0, r0, r1
move RR, r0
addi SP, SP, 4
ret
get_num_lines:
move BP, SP
subi SP, SP, 2
addi r0, NULL, 0
subi SP, SP, 2
addi r1, NULL, 1
store[2] BP, r0, -2
store[2] BP, r1, -4
L0:
load[2] r0, BP, -4
cmpi r0, 0
breq L1
subi SP, SP, 2
push[2] BP
subi SP, SP, 2
call get_uart
addi SP, SP, 2
pop[2] BP
move r0, RR
subi SP, SP, 2
store[2] BP, r0, -6
load[2] r1, NULL, NEW_UART_MASK
and r0, r0, r1
subi SP, SP, 2
load[2] r2, BP, -6
subi r1, r1, 1
and r2, r2, r1
store[2] BP, r0, -8
cmpi r0, 0
brne L2
addi r0, NULL, 0
rjmp L3
L2:
addi r0, NULL, 1
L3:
store[2] BP, r2, -10
cmpi r2, 10
brlt L4
addi r2, NULL, 0
rjmp L5
L4:
addi r2, NULL, 1
L5:
and r0, r0, r2
cmpi r0, 0
breq L6
load[2] r0, BP, -2
addi r1, NULL, 10
mul r0, r0, r1
load[2] r1, BP, -10
add r0, r0, r1
store[2] BP, r0, -2
rjmp L7
L6:
L7:
load[2] r0, BP, -8
cmpi r0, 0
brne L8
addi r0, NULL, 0
rjmp L9
L8:
addi r0, NULL, 1
L9:
load[2] r1, BP, -10
cmpi r1, 9
brgt L10
addi r1, NULL, 0
rjmp L11
L10:
addi r1, NULL, 1
L11:
and r0, r0, r1
cmpi r0, 0
breq L12
addi r0, NULL, 0
store[2] BP, r0, -4
rjmp L13
L12:
L13:
addi SP, SP, 6
rjmp L0
L1:
load[2] r0, BP, -2
move RR, r0
addi SP, SP, 4
ret
load_uart:
move BP, SP
subi SP, SP, 2
push[2] BP
subi SP, SP, 2
call get_num_lines
addi SP, SP, 2
pop[2] BP
move r0, RR
subi SP, SP, 6
addi r1, NULL, 0
subi SP, SP, 2
addi r2, NULL, 0
subi SP, SP, 2
addi r3, NULL, 0
store[2] BP, r0, -2
store[4] BP, r1, -8
store[2] BP, r2, -10
store[2] BP, r3, -12
L14:
load[2] r0, BP, -2
cmpi r0, 0
breq L15
L16:
load[2] r0, BP, -10
cmpi r0, 4
brlt L18
addi r0, NULL, 0
rjmp L19
L18:
addi r0, NULL, 1
L19:
cmpi r0, 0
breq L17
push[2] BP
call is_uart_new
pop[2] BP
cmpi RR, 0
breq L20
load[4] r0, BP, -8
addi r1, NULL, 256
mul r0, r0, r1
push[2] r0
push[2] BP
subi SP, SP, 2
call get_uart_byte
addi SP, SP, 2
pop[2] BP
pop[2] r0
add r0, r0, RR
load[2] r1, BP, -10
addi r1, r1, 1
store[4] BP, r0, -8
store[2] BP, r1, -10
rjmp L21
L20:
L21:
rjmp L16
L17:
addi r0, NULL, 0
load[2] r1, BP, -2
subi r1, r1, 1
push[2] BP
subi SP, SP, 2
load[4] r2, BP, -8
push[4] r2
load[2] r3, BP, -12
push[2] r3
store[2] BP, r0, -10
store[2] BP, r1, -2
call store_pm
addi SP, SP, 8
pop[2] BP
addi r0, NULL, 0
load[2] r1, BP, -12
addi r1, r1, 1
store[4] BP, r0, -8
store[2] BP, r1, -12
rjmp L14
L15:
addi r0, NULL, 0
subi SP, SP, 2
push[2] BP
store[2] BP, r0, -12
subi SP, SP, 2
call get_num_lines
addi SP, SP, 2
pop[2] BP
move r0, RR
subi SP, SP, 2
addi r1, NULL, 0
store[2] BP, r0, -14
store[2] BP, r1, -16
L22:
load[2] r0, BP, -14
cmpi r0, 0
breq L23
push[2] BP
call is_uart_new
pop[2] BP
cmpi RR, 0
breq L24
push[2] BP
call get_uart_byte
pop[2] BP
move r0, RR
load[2] r1, BP, -14
subi r1, r1, 1
push[2] BP
subi SP, SP, 2
push[2] r0
load[2] r2, BP, -12
push[2] r2
store[2] BP, r0, -16
store[2] BP, r1, -14
subi SP, SP, 2
call store_dm
addi SP, SP, 8
pop[2] BP
load[2] r0, BP, -12
addi r0, r0, 1
store[2] BP, r0, -12
rjmp L25
L24:
L25:
rjmp L22
L23:
addi SP, SP, 16
move RR, NULL
ret
main:
move BP, SP
L26:
push[2] BP
call is_uart_new
pop[2] BP
cmpi RR, 0
breq L28
push[2] BP
call load_uart
pop[2] BP
rjmp _program_end_
rjmp L29
L28:
L29:
rjmp L26
L27:
move RR, NULL
ret
_program_end_:
(Pre handle_macros)
(Code after 'handle_macros')
 const SP r15
const NULL r14
const BP r13
const RR r12
.data NEW_UART_MASK
.dh 256
subi SP, SP, 1
call main
subi SP, SP, 2
__halt:
rjmp __halt
get_uart:
move BP, SP
subi SP, SP, 2
load[2] r0, BP, -2
in r0, 1
move RR, r0
addi SP, SP, 2
ret
store_pm:
move BP, SP
load[2] r0, BP, 2
load[4] r1, BP, 4
store_pm r0, r1, _program_end_
store[2] BP, r0, 2
move RR, NULL
ret
store_dm:
move BP, SP
load[2] r0, BP, 4
load[2] r1, BP, 6
store[1] r0, r1, 0
store[2] BP, r0, 4
move RR, NULL
ret
is_uart_new:
move BP, SP
subi SP, SP, 2
addi r0, NULL, 0
subi SP, SP, 2
push[2] BP
store[2] BP, r0, -2
call get_uart
pop[2] BP
move r0, RR
subi SP, SP, 2
load[2] r1, NULL, NEW_UART_MASK
and r1, r1, r0
move RR, r1
addi SP, SP, 6
ret
get_uart_byte:
move BP, SP
subi SP, SP, 2
push[2] BP
subi SP, SP, 2
call get_uart
addi SP, SP, 2
pop[2] BP
move r0, RR
subi SP, SP, 2
store[2] BP, r0, -2
load[2] r1, NULL, NEW_UART_MASK
subi r1, r1, 1
and r0, r0, r1
move RR, r0
addi SP, SP, 4
ret
get_num_lines:
move BP, SP
subi SP, SP, 2
addi r0, NULL, 0
subi SP, SP, 2
addi r1, NULL, 1
store[2] BP, r0, -2
store[2] BP, r1, -4
L0:
load[2] r0, BP, -4
cmpi r0, 0
breq L1
subi SP, SP, 2
push[2] BP
subi SP, SP, 2
call get_uart
addi SP, SP, 2
pop[2] BP
move r0, RR
subi SP, SP, 2
store[2] BP, r0, -6
load[2] r1, NULL, NEW_UART_MASK
and r0, r0, r1
subi SP, SP, 2
load[2] r2, BP, -6
subi r1, r1, 1
and r2, r2, r1
store[2] BP, r0, -8
cmpi r0, 0
brne L2
addi r0, NULL, 0
rjmp L3
L2:
addi r0, NULL, 1
L3:
store[2] BP, r2, -10
cmpi r2, 10
brlt L4
addi r2, NULL, 0
rjmp L5
L4:
addi r2, NULL, 1
L5:
and r0, r0, r2
cmpi r0, 0
breq L6
load[2] r0, BP, -2
addi r1, NULL, 10
mul r0, r0, r1
load[2] r1, BP, -10
add r0, r0, r1
store[2] BP, r0, -2
rjmp L7
L6:
L7:
load[2] r0, BP, -8
cmpi r0, 0
brne L8
addi r0, NULL, 0
rjmp L9
L8:
addi r0, NULL, 1
L9:
load[2] r1, BP, -10
cmpi r1, 9
brgt L10
addi r1, NULL, 0
rjmp L11
L10:
addi r1, NULL, 1
L11:
and r0, r0, r1
cmpi r0, 0
breq L12
addi r0, NULL, 0
store[2] BP, r0, -4
rjmp L13
L12:
L13:
addi SP, SP, 6
rjmp L0
L1:
load[2] r0, BP, -2
move RR, r0
addi SP, SP, 4
ret
load_uart:
move BP, SP
subi SP, SP, 2
push[2] BP
subi SP, SP, 2
call get_num_lines
addi SP, SP, 2
pop[2] BP
move r0, RR
subi SP, SP, 6
addi r1, NULL, 0
subi SP, SP, 2
addi r2, NULL, 0
subi SP, SP, 2
addi r3, NULL, 0
store[2] BP, r0, -2
store[4] BP, r1, -8
store[2] BP, r2, -10
store[2] BP, r3, -12
L14:
load[2] r0, BP, -2
cmpi r0, 0
breq L15
L16:
load[2] r0, BP, -10
cmpi r0, 4
brlt L18
addi r0, NULL, 0
rjmp L19
L18:
addi r0, NULL, 1
L19:
cmpi r0, 0
breq L17
push[2] BP
call is_uart_new
pop[2] BP
cmpi RR, 0
breq L20
load[4] r0, BP, -8
addi r1, NULL, 256
mul r0, r0, r1
push[2] r0
push[2] BP
subi SP, SP, 2
call get_uart_byte
addi SP, SP, 2
pop[2] BP
pop[2] r0
add r0, r0, RR
load[2] r1, BP, -10
addi r1, r1, 1
store[4] BP, r0, -8
store[2] BP, r1, -10
rjmp L21
L20:
L21:
rjmp L16
L17:
addi r0, NULL, 0
load[2] r1, BP, -2
subi r1, r1, 1
push[2] BP
subi SP, SP, 2
load[4] r2, BP, -8
push[4] r2
load[2] r3, BP, -12
push[2] r3
store[2] BP, r0, -10
store[2] BP, r1, -2
call store_pm
addi SP, SP, 8
pop[2] BP
addi r0, NULL, 0
load[2] r1, BP, -12
addi r1, r1, 1
store[4] BP, r0, -8
store[2] BP, r1, -12
rjmp L14
L15:
addi r0, NULL, 0
subi SP, SP, 2
push[2] BP
store[2] BP, r0, -12
subi SP, SP, 2
call get_num_lines
addi SP, SP, 2
pop[2] BP
move r0, RR
subi SP, SP, 2
addi r1, NULL, 0
store[2] BP, r0, -14
store[2] BP, r1, -16
L22:
load[2] r0, BP, -14
cmpi r0, 0
breq L23
push[2] BP
call is_uart_new
pop[2] BP
cmpi RR, 0
breq L24
push[2] BP
call get_uart_byte
pop[2] BP
move r0, RR
load[2] r1, BP, -14
subi r1, r1, 1
push[2] BP
subi SP, SP, 2
push[2] r0
load[2] r2, BP, -12
push[2] r2
store[2] BP, r0, -16
store[2] BP, r1, -14
subi SP, SP, 2
call store_dm
addi SP, SP, 8
pop[2] BP
load[2] r0, BP, -12
addi r0, r0, 1
store[2] BP, r0, -12
rjmp L25
L24:
L25:
rjmp L22
L23:
addi SP, SP, 16
move RR, NULL
ret
main:
move BP, SP
L26:
push[2] BP
call is_uart_new
pop[2] BP
cmpi RR, 0
breq L28
push[2] BP
call load_uart
pop[2] BP
rjmp _program_end_
rjmp L29
L28:
L29:
rjmp L26
L27:
move RR, NULL
ret
_program_end_:
(Pre register_constants)
(Code after 'register_constants')
 .data NEW_UART_MASK
.dh 256
subi SP, SP, 1
call main
subi SP, SP, 2
__halt:
rjmp __halt
get_uart:
move BP, SP
subi SP, SP, 2
load[2] r0, BP, -2
in r0, 1
move RR, r0
addi SP, SP, 2
ret
store_pm:
move BP, SP
load[2] r0, BP, 2
load[4] r1, BP, 4
store_pm r0, r1, _program_end_
store[2] BP, r0, 2
move RR, NULL
ret
store_dm:
move BP, SP
load[2] r0, BP, 4
load[2] r1, BP, 6
store[1] r0, r1, 0
store[2] BP, r0, 4
move RR, NULL
ret
is_uart_new:
move BP, SP
subi SP, SP, 2
addi r0, NULL, 0
subi SP, SP, 2
push[2] BP
store[2] BP, r0, -2
call get_uart
pop[2] BP
move r0, RR
subi SP, SP, 2
load[2] r1, NULL, NEW_UART_MASK
and r1, r1, r0
move RR, r1
addi SP, SP, 6
ret
get_uart_byte:
move BP, SP
subi SP, SP, 2
push[2] BP
subi SP, SP, 2
call get_uart
addi SP, SP, 2
pop[2] BP
move r0, RR
subi SP, SP, 2
store[2] BP, r0, -2
load[2] r1, NULL, NEW_UART_MASK
subi r1, r1, 1
and r0, r0, r1
move RR, r0
addi SP, SP, 4
ret
get_num_lines:
move BP, SP
subi SP, SP, 2
addi r0, NULL, 0
subi SP, SP, 2
addi r1, NULL, 1
store[2] BP, r0, -2
store[2] BP, r1, -4
L0:
load[2] r0, BP, -4
cmpi r0, 0
breq L1
subi SP, SP, 2
push[2] BP
subi SP, SP, 2
call get_uart
addi SP, SP, 2
pop[2] BP
move r0, RR
subi SP, SP, 2
store[2] BP, r0, -6
load[2] r1, NULL, NEW_UART_MASK
and r0, r0, r1
subi SP, SP, 2
load[2] r2, BP, -6
subi r1, r1, 1
and r2, r2, r1
store[2] BP, r0, -8
cmpi r0, 0
brne L2
addi r0, NULL, 0
rjmp L3
L2:
addi r0, NULL, 1
L3:
store[2] BP, r2, -10
cmpi r2, 10
brlt L4
addi r2, NULL, 0
rjmp L5
L4:
addi r2, NULL, 1
L5:
and r0, r0, r2
cmpi r0, 0
breq L6
load[2] r0, BP, -2
addi r1, NULL, 10
mul r0, r0, r1
load[2] r1, BP, -10
add r0, r0, r1
store[2] BP, r0, -2
rjmp L7
L6:
L7:
load[2] r0, BP, -8
cmpi r0, 0
brne L8
addi r0, NULL, 0
rjmp L9
L8:
addi r0, NULL, 1
L9:
load[2] r1, BP, -10
cmpi r1, 9
brgt L10
addi r1, NULL, 0
rjmp L11
L10:
addi r1, NULL, 1
L11:
and r0, r0, r1
cmpi r0, 0
breq L12
addi r0, NULL, 0
store[2] BP, r0, -4
rjmp L13
L12:
L13:
addi SP, SP, 6
rjmp L0
L1:
load[2] r0, BP, -2
move RR, r0
addi SP, SP, 4
ret
load_uart:
move BP, SP
subi SP, SP, 2
push[2] BP
subi SP, SP, 2
call get_num_lines
addi SP, SP, 2
pop[2] BP
move r0, RR
subi SP, SP, 6
addi r1, NULL, 0
subi SP, SP, 2
addi r2, NULL, 0
subi SP, SP, 2
addi r3, NULL, 0
store[2] BP, r0, -2
store[4] BP, r1, -8
store[2] BP, r2, -10
store[2] BP, r3, -12
L14:
load[2] r0, BP, -2
cmpi r0, 0
breq L15
L16:
load[2] r0, BP, -10
cmpi r0, 4
brlt L18
addi r0, NULL, 0
rjmp L19
L18:
addi r0, NULL, 1
L19:
cmpi r0, 0
breq L17
push[2] BP
call is_uart_new
pop[2] BP
cmpi RR, 0
breq L20
load[4] r0, BP, -8
addi r1, NULL, 256
mul r0, r0, r1
push[2] r0
push[2] BP
subi SP, SP, 2
call get_uart_byte
addi SP, SP, 2
pop[2] BP
pop[2] r0
add r0, r0, RR
load[2] r1, BP, -10
addi r1, r1, 1
store[4] BP, r0, -8
store[2] BP, r1, -10
rjmp L21
L20:
L21:
rjmp L16
L17:
addi r0, NULL, 0
load[2] r1, BP, -2
subi r1, r1, 1
push[2] BP
subi SP, SP, 2
load[4] r2, BP, -8
push[4] r2
load[2] r3, BP, -12
push[2] r3
store[2] BP, r0, -10
store[2] BP, r1, -2
call store_pm
addi SP, SP, 8
pop[2] BP
addi r0, NULL, 0
load[2] r1, BP, -12
addi r1, r1, 1
store[4] BP, r0, -8
store[2] BP, r1, -12
rjmp L14
L15:
addi r0, NULL, 0
subi SP, SP, 2
push[2] BP
store[2] BP, r0, -12
subi SP, SP, 2
call get_num_lines
addi SP, SP, 2
pop[2] BP
move r0, RR
subi SP, SP, 2
addi r1, NULL, 0
store[2] BP, r0, -14
store[2] BP, r1, -16
L22:
load[2] r0, BP, -14
cmpi r0, 0
breq L23
push[2] BP
call is_uart_new
pop[2] BP
cmpi RR, 0
breq L24
push[2] BP
call get_uart_byte
pop[2] BP
move r0, RR
load[2] r1, BP, -14
subi r1, r1, 1
push[2] BP
subi SP, SP, 2
push[2] r0
load[2] r2, BP, -12
push[2] r2
store[2] BP, r0, -16
store[2] BP, r1, -14
subi SP, SP, 2
call store_dm
addi SP, SP, 8
pop[2] BP
load[2] r0, BP, -12
addi r0, r0, 1
store[2] BP, r0, -12
rjmp L25
L24:
L25:
rjmp L22
L23:
addi SP, SP, 16
move RR, NULL
ret
main:
move BP, SP
L26:
push[2] BP
call is_uart_new
pop[2] BP
cmpi RR, 0
breq L28
push[2] BP
call load_uart
pop[2] BP
rjmp _program_end_
rjmp L29
L28:
L29:
rjmp L26
L27:
move RR, NULL
ret
_program_end_:
(Pre store_data_memory)
(Code after 'store_data_memory')
 subi SP, SP, 1
call main
subi SP, SP, 2
__halt:
rjmp __halt
get_uart:
move BP, SP
subi SP, SP, 2
load[2] r0, BP, -2
in r0, 1
move RR, r0
addi SP, SP, 2
ret
store_pm:
move BP, SP
load[2] r0, BP, 2
load[4] r1, BP, 4
store_pm r0, r1, _program_end_
store[2] BP, r0, 2
move RR, NULL
ret
store_dm:
move BP, SP
load[2] r0, BP, 4
load[2] r1, BP, 6
store[1] r0, r1, 0
store[2] BP, r0, 4
move RR, NULL
ret
is_uart_new:
move BP, SP
subi SP, SP, 2
addi r0, NULL, 0
subi SP, SP, 2
push[2] BP
store[2] BP, r0, -2
call get_uart
pop[2] BP
move r0, RR
subi SP, SP, 2
load[2] r1, NULL, NEW_UART_MASK
and r1, r1, r0
move RR, r1
addi SP, SP, 6
ret
get_uart_byte:
move BP, SP
subi SP, SP, 2
push[2] BP
subi SP, SP, 2
call get_uart
addi SP, SP, 2
pop[2] BP
move r0, RR
subi SP, SP, 2
store[2] BP, r0, -2
load[2] r1, NULL, NEW_UART_MASK
subi r1, r1, 1
and r0, r0, r1
move RR, r0
addi SP, SP, 4
ret
get_num_lines:
move BP, SP
subi SP, SP, 2
addi r0, NULL, 0
subi SP, SP, 2
addi r1, NULL, 1
store[2] BP, r0, -2
store[2] BP, r1, -4
L0:
load[2] r0, BP, -4
cmpi r0, 0
breq L1
subi SP, SP, 2
push[2] BP
subi SP, SP, 2
call get_uart
addi SP, SP, 2
pop[2] BP
move r0, RR
subi SP, SP, 2
store[2] BP, r0, -6
load[2] r1, NULL, NEW_UART_MASK
and r0, r0, r1
subi SP, SP, 2
load[2] r2, BP, -6
subi r1, r1, 1
and r2, r2, r1
store[2] BP, r0, -8
cmpi r0, 0
brne L2
addi r0, NULL, 0
rjmp L3
L2:
addi r0, NULL, 1
L3:
store[2] BP, r2, -10
cmpi r2, 10
brlt L4
addi r2, NULL, 0
rjmp L5
L4:
addi r2, NULL, 1
L5:
and r0, r0, r2
cmpi r0, 0
breq L6
load[2] r0, BP, -2
addi r1, NULL, 10
mul r0, r0, r1
load[2] r1, BP, -10
add r0, r0, r1
store[2] BP, r0, -2
rjmp L7
L6:
L7:
load[2] r0, BP, -8
cmpi r0, 0
brne L8
addi r0, NULL, 0
rjmp L9
L8:
addi r0, NULL, 1
L9:
load[2] r1, BP, -10
cmpi r1, 9
brgt L10
addi r1, NULL, 0
rjmp L11
L10:
addi r1, NULL, 1
L11:
and r0, r0, r1
cmpi r0, 0
breq L12
addi r0, NULL, 0
store[2] BP, r0, -4
rjmp L13
L12:
L13:
addi SP, SP, 6
rjmp L0
L1:
load[2] r0, BP, -2
move RR, r0
addi SP, SP, 4
ret
load_uart:
move BP, SP
subi SP, SP, 2
push[2] BP
subi SP, SP, 2
call get_num_lines
addi SP, SP, 2
pop[2] BP
move r0, RR
subi SP, SP, 6
addi r1, NULL, 0
subi SP, SP, 2
addi r2, NULL, 0
subi SP, SP, 2
addi r3, NULL, 0
store[2] BP, r0, -2
store[4] BP, r1, -8
store[2] BP, r2, -10
store[2] BP, r3, -12
L14:
load[2] r0, BP, -2
cmpi r0, 0
breq L15
L16:
load[2] r0, BP, -10
cmpi r0, 4
brlt L18
addi r0, NULL, 0
rjmp L19
L18:
addi r0, NULL, 1
L19:
cmpi r0, 0
breq L17
push[2] BP
call is_uart_new
pop[2] BP
cmpi RR, 0
breq L20
load[4] r0, BP, -8
addi r1, NULL, 256
mul r0, r0, r1
push[2] r0
push[2] BP
subi SP, SP, 2
call get_uart_byte
addi SP, SP, 2
pop[2] BP
pop[2] r0
add r0, r0, RR
load[2] r1, BP, -10
addi r1, r1, 1
store[4] BP, r0, -8
store[2] BP, r1, -10
rjmp L21
L20:
L21:
rjmp L16
L17:
addi r0, NULL, 0
load[2] r1, BP, -2
subi r1, r1, 1
push[2] BP
subi SP, SP, 2
load[4] r2, BP, -8
push[4] r2
load[2] r3, BP, -12
push[2] r3
store[2] BP, r0, -10
store[2] BP, r1, -2
call store_pm
addi SP, SP, 8
pop[2] BP
addi r0, NULL, 0
load[2] r1, BP, -12
addi r1, r1, 1
store[4] BP, r0, -8
store[2] BP, r1, -12
rjmp L14
L15:
addi r0, NULL, 0
subi SP, SP, 2
push[2] BP
store[2] BP, r0, -12
subi SP, SP, 2
call get_num_lines
addi SP, SP, 2
pop[2] BP
move r0, RR
subi SP, SP, 2
addi r1, NULL, 0
store[2] BP, r0, -14
store[2] BP, r1, -16
L22:
load[2] r0, BP, -14
cmpi r0, 0
breq L23
push[2] BP
call is_uart_new
pop[2] BP
cmpi RR, 0
breq L24
push[2] BP
call get_uart_byte
pop[2] BP
move r0, RR
load[2] r1, BP, -14
subi r1, r1, 1
push[2] BP
subi SP, SP, 2
push[2] r0
load[2] r2, BP, -12
push[2] r2
store[2] BP, r0, -16
store[2] BP, r1, -14
subi SP, SP, 2
call store_dm
addi SP, SP, 8
pop[2] BP
load[2] r0, BP, -12
addi r0, r0, 1
store[2] BP, r0, -12
rjmp L25
L24:
L25:
rjmp L22
L23:
addi SP, SP, 16
move RR, NULL
ret
main:
move BP, SP
L26:
push[2] BP
call is_uart_new
pop[2] BP
cmpi RR, 0
breq L28
push[2] BP
call load_uart
pop[2] BP
rjmp _program_end_
rjmp L29
L28:
L29:
rjmp L26
L27:
move RR, NULL
ret
_program_end_:
(Pre replace_halts)
(Code after 'replace_halts')
 subi SP, SP, 1
call main
subi SP, SP, 2
__halt:
rjmp __halt
get_uart:
move BP, SP
subi SP, SP, 2
load[2] r0, BP, -2
in r0, 1
move RR, r0
addi SP, SP, 2
ret
store_pm:
move BP, SP
load[2] r0, BP, 2
load[4] r1, BP, 4
store_pm r0, r1, _program_end_
store[2] BP, r0, 2
move RR, NULL
ret
store_dm:
move BP, SP
load[2] r0, BP, 4
load[2] r1, BP, 6
store[1] r0, r1, 0
store[2] BP, r0, 4
move RR, NULL
ret
is_uart_new:
move BP, SP
subi SP, SP, 2
addi r0, NULL, 0
subi SP, SP, 2
push[2] BP
store[2] BP, r0, -2
call get_uart
pop[2] BP
move r0, RR
subi SP, SP, 2
load[2] r1, NULL, NEW_UART_MASK
and r1, r1, r0
move RR, r1
addi SP, SP, 6
ret
get_uart_byte:
move BP, SP
subi SP, SP, 2
push[2] BP
subi SP, SP, 2
call get_uart
addi SP, SP, 2
pop[2] BP
move r0, RR
subi SP, SP, 2
store[2] BP, r0, -2
load[2] r1, NULL, NEW_UART_MASK
subi r1, r1, 1
and r0, r0, r1
move RR, r0
addi SP, SP, 4
ret
get_num_lines:
move BP, SP
subi SP, SP, 2
addi r0, NULL, 0
subi SP, SP, 2
addi r1, NULL, 1
store[2] BP, r0, -2
store[2] BP, r1, -4
L0:
load[2] r0, BP, -4
cmpi r0, 0
breq L1
subi SP, SP, 2
push[2] BP
subi SP, SP, 2
call get_uart
addi SP, SP, 2
pop[2] BP
move r0, RR
subi SP, SP, 2
store[2] BP, r0, -6
load[2] r1, NULL, NEW_UART_MASK
and r0, r0, r1
subi SP, SP, 2
load[2] r2, BP, -6
subi r1, r1, 1
and r2, r2, r1
store[2] BP, r0, -8
cmpi r0, 0
brne L2
addi r0, NULL, 0
rjmp L3
L2:
addi r0, NULL, 1
L3:
store[2] BP, r2, -10
cmpi r2, 10
brlt L4
addi r2, NULL, 0
rjmp L5
L4:
addi r2, NULL, 1
L5:
and r0, r0, r2
cmpi r0, 0
breq L6
load[2] r0, BP, -2
addi r1, NULL, 10
mul r0, r0, r1
load[2] r1, BP, -10
add r0, r0, r1
store[2] BP, r0, -2
rjmp L7
L6:
L7:
load[2] r0, BP, -8
cmpi r0, 0
brne L8
addi r0, NULL, 0
rjmp L9
L8:
addi r0, NULL, 1
L9:
load[2] r1, BP, -10
cmpi r1, 9
brgt L10
addi r1, NULL, 0
rjmp L11
L10:
addi r1, NULL, 1
L11:
and r0, r0, r1
cmpi r0, 0
breq L12
addi r0, NULL, 0
store[2] BP, r0, -4
rjmp L13
L12:
L13:
addi SP, SP, 6
rjmp L0
L1:
load[2] r0, BP, -2
move RR, r0
addi SP, SP, 4
ret
load_uart:
move BP, SP
subi SP, SP, 2
push[2] BP
subi SP, SP, 2
call get_num_lines
addi SP, SP, 2
pop[2] BP
move r0, RR
subi SP, SP, 6
addi r1, NULL, 0
subi SP, SP, 2
addi r2, NULL, 0
subi SP, SP, 2
addi r3, NULL, 0
store[2] BP, r0, -2
store[4] BP, r1, -8
store[2] BP, r2, -10
store[2] BP, r3, -12
L14:
load[2] r0, BP, -2
cmpi r0, 0
breq L15
L16:
load[2] r0, BP, -10
cmpi r0, 4
brlt L18
addi r0, NULL, 0
rjmp L19
L18:
addi r0, NULL, 1
L19:
cmpi r0, 0
breq L17
push[2] BP
call is_uart_new
pop[2] BP
cmpi RR, 0
breq L20
load[4] r0, BP, -8
addi r1, NULL, 256
mul r0, r0, r1
push[2] r0
push[2] BP
subi SP, SP, 2
call get_uart_byte
addi SP, SP, 2
pop[2] BP
pop[2] r0
add r0, r0, RR
load[2] r1, BP, -10
addi r1, r1, 1
store[4] BP, r0, -8
store[2] BP, r1, -10
rjmp L21
L20:
L21:
rjmp L16
L17:
addi r0, NULL, 0
load[2] r1, BP, -2
subi r1, r1, 1
push[2] BP
subi SP, SP, 2
load[4] r2, BP, -8
push[4] r2
load[2] r3, BP, -12
push[2] r3
store[2] BP, r0, -10
store[2] BP, r1, -2
call store_pm
addi SP, SP, 8
pop[2] BP
addi r0, NULL, 0
load[2] r1, BP, -12
addi r1, r1, 1
store[4] BP, r0, -8
store[2] BP, r1, -12
rjmp L14
L15:
addi r0, NULL, 0
subi SP, SP, 2
push[2] BP
store[2] BP, r0, -12
subi SP, SP, 2
call get_num_lines
addi SP, SP, 2
pop[2] BP
move r0, RR
subi SP, SP, 2
addi r1, NULL, 0
store[2] BP, r0, -14
store[2] BP, r1, -16
L22:
load[2] r0, BP, -14
cmpi r0, 0
breq L23
push[2] BP
call is_uart_new
pop[2] BP
cmpi RR, 0
breq L24
push[2] BP
call get_uart_byte
pop[2] BP
move r0, RR
load[2] r1, BP, -14
subi r1, r1, 1
push[2] BP
subi SP, SP, 2
push[2] r0
load[2] r2, BP, -12
push[2] r2
store[2] BP, r0, -16
store[2] BP, r1, -14
subi SP, SP, 2
call store_dm
addi SP, SP, 8
pop[2] BP
load[2] r0, BP, -12
addi r0, r0, 1
store[2] BP, r0, -12
rjmp L25
L24:
L25:
rjmp L22
L23:
addi SP, SP, 16
move RR, NULL
ret
main:
move BP, SP
L26:
push[2] BP
call is_uart_new
pop[2] BP
cmpi RR, 0
breq L28
push[2] BP
call load_uart
pop[2] BP
rjmp _program_end_
rjmp L29
L28:
L29:
rjmp L26
L27:
move RR, NULL
ret
_program_end_:
(Pre handle_constants)
(Code after 'handle_constants')
 subi r15 r15 1
call main
subi r15 r15 2
__halt:
rjmp __halt
get_uart:
move r13 r15
subi r15 r15 2
load[2] r0 r13 -2
in r0 1
move r12 r0
addi r15 r15 2
ret
store_pm:
move r13 r15
load[2] r0 r13 2
load[4] r1 r13 4
store_pm r0 r1 _program_end_
store[2] r13 r0 2
move r12 r14
ret
store_dm:
move r13 r15
load[2] r0 r13 4
load[2] r1 r13 6
store[1] r0 r1 0
store[2] r13 r0 4
move r12 r14
ret
is_uart_new:
move r13 r15
subi r15 r15 2
addi r0 r14 0
subi r15 r15 2
push[2] r13
store[2] r13 r0 -2
call get_uart
pop[2] r13
move r0 r12
subi r15 r15 2
load[2] r1 r14 0
and r1 r1 r0
move r12 r1
addi r15 r15 6
ret
get_uart_byte:
move r13 r15
subi r15 r15 2
push[2] r13
subi r15 r15 2
call get_uart
addi r15 r15 2
pop[2] r13
move r0 r12
subi r15 r15 2
store[2] r13 r0 -2
load[2] r1 r14 0
subi r1 r1 1
and r0 r0 r1
move r12 r0
addi r15 r15 4
ret
get_num_lines:
move r13 r15
subi r15 r15 2
addi r0 r14 0
subi r15 r15 2
addi r1 r14 1
store[2] r13 r0 -2
store[2] r13 r1 -4
L0:
load[2] r0 r13 -4
cmpi r0 0
breq L1
subi r15 r15 2
push[2] r13
subi r15 r15 2
call get_uart
addi r15 r15 2
pop[2] r13
move r0 r12
subi r15 r15 2
store[2] r13 r0 -6
load[2] r1 r14 0
and r0 r0 r1
subi r15 r15 2
load[2] r2 r13 -6
subi r1 r1 1
and r2 r2 r1
store[2] r13 r0 -8
cmpi r0 0
brne L2
addi r0 r14 0
rjmp L3
L2:
addi r0 r14 1
L3:
store[2] r13 r2 -10
cmpi r2 10
brlt L4
addi r2 r14 0
rjmp L5
L4:
addi r2 r14 1
L5:
and r0 r0 r2
cmpi r0 0
breq L6
load[2] r0 r13 -2
addi r1 r14 10
mul r0 r0 r1
load[2] r1 r13 -10
add r0 r0 r1
store[2] r13 r0 -2
rjmp L7
L6:
L7:
load[2] r0 r13 -8
cmpi r0 0
brne L8
addi r0 r14 0
rjmp L9
L8:
addi r0 r14 1
L9:
load[2] r1 r13 -10
cmpi r1 9
brgt L10
addi r1 r14 0
rjmp L11
L10:
addi r1 r14 1
L11:
and r0 r0 r1
cmpi r0 0
breq L12
addi r0 r14 0
store[2] r13 r0 -4
rjmp L13
L12:
L13:
addi r15 r15 6
rjmp L0
L1:
load[2] r0 r13 -2
move r12 r0
addi r15 r15 4
ret
load_uart:
move r13 r15
subi r15 r15 2
push[2] r13
subi r15 r15 2
call get_num_lines
addi r15 r15 2
pop[2] r13
move r0 r12
subi r15 r15 6
addi r1 r14 0
subi r15 r15 2
addi r2 r14 0
subi r15 r15 2
addi r3 r14 0
store[2] r13 r0 -2
store[4] r13 r1 -8
store[2] r13 r2 -10
store[2] r13 r3 -12
L14:
load[2] r0 r13 -2
cmpi r0 0
breq L15
L16:
load[2] r0 r13 -10
cmpi r0 4
brlt L18
addi r0 r14 0
rjmp L19
L18:
addi r0 r14 1
L19:
cmpi r0 0
breq L17
push[2] r13
call is_uart_new
pop[2] r13
cmpi r12 0
breq L20
load[4] r0 r13 -8
addi r1 r14 256
mul r0 r0 r1
push[2] r0
push[2] r13
subi r15 r15 2
call get_uart_byte
addi r15 r15 2
pop[2] r13
pop[2] r0
add r0 r0 r12
load[2] r1 r13 -10
addi r1 r1 1
store[4] r13 r0 -8
store[2] r13 r1 -10
rjmp L21
L20:
L21:
rjmp L16
L17:
addi r0 r14 0
load[2] r1 r13 -2
subi r1 r1 1
push[2] r13
subi r15 r15 2
load[4] r2 r13 -8
push[4] r2
load[2] r3 r13 -12
push[2] r3
store[2] r13 r0 -10
store[2] r13 r1 -2
call store_pm
addi r15 r15 8
pop[2] r13
addi r0 r14 0
load[2] r1 r13 -12
addi r1 r1 1
store[4] r13 r0 -8
store[2] r13 r1 -12
rjmp L14
L15:
addi r0 r14 0
subi r15 r15 2
push[2] r13
store[2] r13 r0 -12
subi r15 r15 2
call get_num_lines
addi r15 r15 2
pop[2] r13
move r0 r12
subi r15 r15 2
addi r1 r14 0
store[2] r13 r0 -14
store[2] r13 r1 -16
L22:
load[2] r0 r13 -14
cmpi r0 0
breq L23
push[2] r13
call is_uart_new
pop[2] r13
cmpi r12 0
breq L24
push[2] r13
call get_uart_byte
pop[2] r13
move r0 r12
load[2] r1 r13 -14
subi r1 r1 1
push[2] r13
subi r15 r15 2
push[2] r0
load[2] r2 r13 -12
push[2] r2
store[2] r13 r0 -16
store[2] r13 r1 -14
subi r15 r15 2
call store_dm
addi r15 r15 8
pop[2] r13
load[2] r0 r13 -12
addi r0 r0 1
store[2] r13 r0 -12
rjmp L25
L24:
L25:
rjmp L22
L23:
addi r15 r15 16
move r12 r14
ret
main:
move r13 r15
L26:
push[2] r13
call is_uart_new
pop[2] r13
cmpi r12 0
breq L28
push[2] r13
call load_uart
pop[2] r13
rjmp _program_end_
rjmp L29
L28:
L29:
rjmp L26
L27:
move r12 r14
ret
_program_end_:
(Pre handle_sizes)
(Code after 'handle_sizes')
 subi r15 r15 1
call main
subi r15 r15 2
__halt:
rjmp __halt
get_uart:
move r13 r15
subi r15 r15 2
load r0 r13 -2 [2]
in r0 1
move r12 r0
addi r15 r15 2
ret
store_pm:
move r13 r15
load r0 r13 2 [2]
load r1 r13 4 [4]
store_pm r0 r1 _program_end_
store r13 r0 2 [2]
move r12 r14
ret
store_dm:
move r13 r15
load r0 r13 4 [2]
load r1 r13 6 [2]
store r0 r1 0 [1]
store r13 r0 4 [2]
move r12 r14
ret
is_uart_new:
move r13 r15
subi r15 r15 2
addi r0 r14 0
subi r15 r15 2
push r13 [2]
store r13 r0 -2 [2]
call get_uart
pop r13 [2]
move r0 r12
subi r15 r15 2
load r1 r14 0 [2]
and r1 r1 r0
move r12 r1
addi r15 r15 6
ret
get_uart_byte:
move r13 r15
subi r15 r15 2
push r13 [2]
subi r15 r15 2
call get_uart
addi r15 r15 2
pop r13 [2]
move r0 r12
subi r15 r15 2
store r13 r0 -2 [2]
load r1 r14 0 [2]
subi r1 r1 1
and r0 r0 r1
move r12 r0
addi r15 r15 4
ret
get_num_lines:
move r13 r15
subi r15 r15 2
addi r0 r14 0
subi r15 r15 2
addi r1 r14 1
store r13 r0 -2 [2]
store r13 r1 -4 [2]
L0:
load r0 r13 -4 [2]
cmpi r0 0
breq L1
subi r15 r15 2
push r13 [2]
subi r15 r15 2
call get_uart
addi r15 r15 2
pop r13 [2]
move r0 r12
subi r15 r15 2
store r13 r0 -6 [2]
load r1 r14 0 [2]
and r0 r0 r1
subi r15 r15 2
load r2 r13 -6 [2]
subi r1 r1 1
and r2 r2 r1
store r13 r0 -8 [2]
cmpi r0 0
brne L2
addi r0 r14 0
rjmp L3
L2:
addi r0 r14 1
L3:
store r13 r2 -10 [2]
cmpi r2 10
brlt L4
addi r2 r14 0
rjmp L5
L4:
addi r2 r14 1
L5:
and r0 r0 r2
cmpi r0 0
breq L6
load r0 r13 -2 [2]
addi r1 r14 10
mul r0 r0 r1
load r1 r13 -10 [2]
add r0 r0 r1
store r13 r0 -2 [2]
rjmp L7
L6:
L7:
load r0 r13 -8 [2]
cmpi r0 0
brne L8
addi r0 r14 0
rjmp L9
L8:
addi r0 r14 1
L9:
load r1 r13 -10 [2]
cmpi r1 9
brgt L10
addi r1 r14 0
rjmp L11
L10:
addi r1 r14 1
L11:
and r0 r0 r1
cmpi r0 0
breq L12
addi r0 r14 0
store r13 r0 -4 [2]
rjmp L13
L12:
L13:
addi r15 r15 6
rjmp L0
L1:
load r0 r13 -2 [2]
move r12 r0
addi r15 r15 4
ret
load_uart:
move r13 r15
subi r15 r15 2
push r13 [2]
subi r15 r15 2
call get_num_lines
addi r15 r15 2
pop r13 [2]
move r0 r12
subi r15 r15 6
addi r1 r14 0
subi r15 r15 2
addi r2 r14 0
subi r15 r15 2
addi r3 r14 0
store r13 r0 -2 [2]
store r13 r1 -8 [4]
store r13 r2 -10 [2]
store r13 r3 -12 [2]
L14:
load r0 r13 -2 [2]
cmpi r0 0
breq L15
L16:
load r0 r13 -10 [2]
cmpi r0 4
brlt L18
addi r0 r14 0
rjmp L19
L18:
addi r0 r14 1
L19:
cmpi r0 0
breq L17
push r13 [2]
call is_uart_new
pop r13 [2]
cmpi r12 0
breq L20
load r0 r13 -8 [4]
addi r1 r14 256
mul r0 r0 r1
push r0 [2]
push r13 [2]
subi r15 r15 2
call get_uart_byte
addi r15 r15 2
pop r13 [2]
pop r0 [2]
add r0 r0 r12
load r1 r13 -10 [2]
addi r1 r1 1
store r13 r0 -8 [4]
store r13 r1 -10 [2]
rjmp L21
L20:
L21:
rjmp L16
L17:
addi r0 r14 0
load r1 r13 -2 [2]
subi r1 r1 1
push r13 [2]
subi r15 r15 2
load r2 r13 -8 [4]
push r2 [4]
load r3 r13 -12 [2]
push r3 [2]
store r13 r0 -10 [2]
store r13 r1 -2 [2]
call store_pm
addi r15 r15 8
pop r13 [2]
addi r0 r14 0
load r1 r13 -12 [2]
addi r1 r1 1
store r13 r0 -8 [4]
store r13 r1 -12 [2]
rjmp L14
L15:
addi r0 r14 0
subi r15 r15 2
push r13 [2]
store r13 r0 -12 [2]
subi r15 r15 2
call get_num_lines
addi r15 r15 2
pop r13 [2]
move r0 r12
subi r15 r15 2
addi r1 r14 0
store r13 r0 -14 [2]
store r13 r1 -16 [2]
L22:
load r0 r13 -14 [2]
cmpi r0 0
breq L23
push r13 [2]
call is_uart_new
pop r13 [2]
cmpi r12 0
breq L24
push r13 [2]
call get_uart_byte
pop r13 [2]
move r0 r12
load r1 r13 -14 [2]
subi r1 r1 1
push r13 [2]
subi r15 r15 2
push r0 [2]
load r2 r13 -12 [2]
push r2 [2]
store r13 r0 -16 [2]
store r13 r1 -14 [2]
subi r15 r15 2
call store_dm
addi r15 r15 8
pop r13 [2]
load r0 r13 -12 [2]
addi r0 r0 1
store r13 r0 -12 [2]
rjmp L25
L24:
L25:
rjmp L22
L23:
addi r15 r15 16
move r12 r14
ret
main:
move r13 r15
L26:
push r13 [2]
call is_uart_new
pop r13 [2]
cmpi r12 0
breq L28
push r13 [2]
call load_uart
pop r13 [2]
rjmp _program_end_
rjmp L29
L28:
L29:
rjmp L26
L27:
move r12 r14
ret
_program_end_:
(Pre replace_pop_push)
(Code after 'replace_pop_push')
 subi r15 r15 1
call main
subi r15 r15 2
__halt:
rjmp __halt
get_uart:
move r13 r15
subi r15 r15 2
load r0 r13 -2 [2]
in r0 1
move r12 r0
addi r15 r15 2
ret
store_pm:
move r13 r15
load r0 r13 2 [2]
load r1 r13 4 [4]
store_pm r0 r1 _program_end_
store r13 r0 2 [2]
move r12 r14
ret
store_dm:
move r13 r15
load r0 r13 4 [2]
load r1 r13 6 [2]
store r0 r1 0 [1]
store r13 r0 4 [2]
move r12 r14
ret
is_uart_new:
move r13 r15
subi r15 r15 2
addi r0 r14 0
subi r15 r15 2
addi r15, r15, -2
store r15, r13, 0 [2]
store r13 r0 -2 [2]
call get_uart
load r13, r15, 0 [2]
addi r15, r15, 2
move r0 r12
subi r15 r15 2
load r1 r14 0 [2]
and r1 r1 r0
move r12 r1
addi r15 r15 6
ret
get_uart_byte:
move r13 r15
subi r15 r15 2
addi r15, r15, -2
store r15, r13, 0 [2]
subi r15 r15 2
call get_uart
addi r15 r15 2
load r13, r15, 0 [2]
addi r15, r15, 2
move r0 r12
subi r15 r15 2
store r13 r0 -2 [2]
load r1 r14 0 [2]
subi r1 r1 1
and r0 r0 r1
move r12 r0
addi r15 r15 4
ret
get_num_lines:
move r13 r15
subi r15 r15 2
addi r0 r14 0
subi r15 r15 2
addi r1 r14 1
store r13 r0 -2 [2]
store r13 r1 -4 [2]
L0:
load r0 r13 -4 [2]
cmpi r0 0
breq L1
subi r15 r15 2
addi r15, r15, -2
store r15, r13, 0 [2]
subi r15 r15 2
call get_uart
addi r15 r15 2
load r13, r15, 0 [2]
addi r15, r15, 2
move r0 r12
subi r15 r15 2
store r13 r0 -6 [2]
load r1 r14 0 [2]
and r0 r0 r1
subi r15 r15 2
load r2 r13 -6 [2]
subi r1 r1 1
and r2 r2 r1
store r13 r0 -8 [2]
cmpi r0 0
brne L2
addi r0 r14 0
rjmp L3
L2:
addi r0 r14 1
L3:
store r13 r2 -10 [2]
cmpi r2 10
brlt L4
addi r2 r14 0
rjmp L5
L4:
addi r2 r14 1
L5:
and r0 r0 r2
cmpi r0 0
breq L6
load r0 r13 -2 [2]
addi r1 r14 10
mul r0 r0 r1
load r1 r13 -10 [2]
add r0 r0 r1
store r13 r0 -2 [2]
rjmp L7
L6:
L7:
load r0 r13 -8 [2]
cmpi r0 0
brne L8
addi r0 r14 0
rjmp L9
L8:
addi r0 r14 1
L9:
load r1 r13 -10 [2]
cmpi r1 9
brgt L10
addi r1 r14 0
rjmp L11
L10:
addi r1 r14 1
L11:
and r0 r0 r1
cmpi r0 0
breq L12
addi r0 r14 0
store r13 r0 -4 [2]
rjmp L13
L12:
L13:
addi r15 r15 6
rjmp L0
L1:
load r0 r13 -2 [2]
move r12 r0
addi r15 r15 4
ret
load_uart:
move r13 r15
subi r15 r15 2
addi r15, r15, -2
store r15, r13, 0 [2]
subi r15 r15 2
call get_num_lines
addi r15 r15 2
load r13, r15, 0 [2]
addi r15, r15, 2
move r0 r12
subi r15 r15 6
addi r1 r14 0
subi r15 r15 2
addi r2 r14 0
subi r15 r15 2
addi r3 r14 0
store r13 r0 -2 [2]
store r13 r1 -8 [4]
store r13 r2 -10 [2]
store r13 r3 -12 [2]
L14:
load r0 r13 -2 [2]
cmpi r0 0
breq L15
L16:
load r0 r13 -10 [2]
cmpi r0 4
brlt L18
addi r0 r14 0
rjmp L19
L18:
addi r0 r14 1
L19:
cmpi r0 0
breq L17
addi r15, r15, -2
store r15, r13, 0 [2]
call is_uart_new
load r13, r15, 0 [2]
addi r15, r15, 2
cmpi r12 0
breq L20
load r0 r13 -8 [4]
addi r1 r14 256
mul r0 r0 r1
addi r15, r15, -2
store r15, r0, 0 [2]
addi r15, r15, -2
store r15, r13, 0 [2]
subi r15 r15 2
call get_uart_byte
addi r15 r15 2
load r13, r15, 0 [2]
addi r15, r15, 2
load r0, r15, 0 [2]
addi r15, r15, 2
add r0 r0 r12
load r1 r13 -10 [2]
addi r1 r1 1
store r13 r0 -8 [4]
store r13 r1 -10 [2]
rjmp L21
L20:
L21:
rjmp L16
L17:
addi r0 r14 0
load r1 r13 -2 [2]
subi r1 r1 1
addi r15, r15, -2
store r15, r13, 0 [2]
subi r15 r15 2
load r2 r13 -8 [4]
addi r15, r15, -4
store r15, r2, 0 [4]
load r3 r13 -12 [2]
addi r15, r15, -2
store r15, r3, 0 [2]
store r13 r0 -10 [2]
store r13 r1 -2 [2]
call store_pm
addi r15 r15 8
load r13, r15, 0 [2]
addi r15, r15, 2
addi r0 r14 0
load r1 r13 -12 [2]
addi r1 r1 1
store r13 r0 -8 [4]
store r13 r1 -12 [2]
rjmp L14
L15:
addi r0 r14 0
subi r15 r15 2
addi r15, r15, -2
store r15, r13, 0 [2]
store r13 r0 -12 [2]
subi r15 r15 2
call get_num_lines
addi r15 r15 2
load r13, r15, 0 [2]
addi r15, r15, 2
move r0 r12
subi r15 r15 2
addi r1 r14 0
store r13 r0 -14 [2]
store r13 r1 -16 [2]
L22:
load r0 r13 -14 [2]
cmpi r0 0
breq L23
addi r15, r15, -2
store r15, r13, 0 [2]
call is_uart_new
load r13, r15, 0 [2]
addi r15, r15, 2
cmpi r12 0
breq L24
addi r15, r15, -2
store r15, r13, 0 [2]
call get_uart_byte
load r13, r15, 0 [2]
addi r15, r15, 2
move r0 r12
load r1 r13 -14 [2]
subi r1 r1 1
addi r15, r15, -2
store r15, r13, 0 [2]
subi r15 r15 2
addi r15, r15, -2
store r15, r0, 0 [2]
load r2 r13 -12 [2]
addi r15, r15, -2
store r15, r2, 0 [2]
store r13 r0 -16 [2]
store r13 r1 -14 [2]
subi r15 r15 2
call store_dm
addi r15 r15 8
load r13, r15, 0 [2]
addi r15, r15, 2
load r0 r13 -12 [2]
addi r0 r0 1
store r13 r0 -12 [2]
rjmp L25
L24:
L25:
rjmp L22
L23:
addi r15 r15 16
move r12 r14
ret
main:
move r13 r15
L26:
addi r15, r15, -2
store r15, r13, 0 [2]
call is_uart_new
load r13, r15, 0 [2]
addi r15, r15, 2
cmpi r12 0
breq L28
addi r15, r15, -2
store r15, r13, 0 [2]
call load_uart
load r13, r15, 0 [2]
addi r15, r15, 2
rjmp _program_end_
rjmp L29
L28:
L29:
rjmp L26
L27:
move r12 r14
ret
_program_end_:
(Pre subroutine_lap)
(Code after 'subroutine_lap')
 subi r15 r15 1
movlo r13 r13 $$CALL_IDX$$
push r13 [2]
rjmp main
subi r15 r15 2
__halt:
rjmp __halt
get_uart:
move r13 r15
subi r15 r15 2
load r0 r13 -2 [2]
in r0 1
move r12 r0
addi r15 r15 2
pop r13 [2]
subi r13 r13 $$RET_IDX$$
rjmprg r13
store_pm:
move r13 r15
load r0 r13 2 [2]
load r1 r13 4 [4]
store_pm r0 r1 _program_end_
store r13 r0 2 [2]
move r12 r14
pop r13 [2]
subi r13 r13 $$RET_IDX$$
rjmprg r13
store_dm:
move r13 r15
load r0 r13 4 [2]
load r1 r13 6 [2]
store r0 r1 0 [1]
store r13 r0 4 [2]
move r12 r14
pop r13 [2]
subi r13 r13 $$RET_IDX$$
rjmprg r13
is_uart_new:
move r13 r15
subi r15 r15 2
addi r0 r14 0
subi r15 r15 2
addi r15, r15, -2
store r15, r13, 0 [2]
store r13 r0 -2 [2]
movlo r13 r13 $$CALL_IDX$$
push r13 [2]
rjmp get_uart
load r13, r15, 0 [2]
addi r15, r15, 2
move r0 r12
subi r15 r15 2
load r1 r14 0 [2]
and r1 r1 r0
move r12 r1
addi r15 r15 6
pop r13 [2]
subi r13 r13 $$RET_IDX$$
rjmprg r13
get_uart_byte:
move r13 r15
subi r15 r15 2
addi r15, r15, -2
store r15, r13, 0 [2]
subi r15 r15 2
movlo r13 r13 $$CALL_IDX$$
push r13 [2]
rjmp get_uart
addi r15 r15 2
load r13, r15, 0 [2]
addi r15, r15, 2
move r0 r12
subi r15 r15 2
store r13 r0 -2 [2]
load r1 r14 0 [2]
subi r1 r1 1
and r0 r0 r1
move r12 r0
addi r15 r15 4
pop r13 [2]
subi r13 r13 $$RET_IDX$$
rjmprg r13
get_num_lines:
move r13 r15
subi r15 r15 2
addi r0 r14 0
subi r15 r15 2
addi r1 r14 1
store r13 r0 -2 [2]
store r13 r1 -4 [2]
L0:
load r0 r13 -4 [2]
cmpi r0 0
breq L1
subi r15 r15 2
addi r15, r15, -2
store r15, r13, 0 [2]
subi r15 r15 2
movlo r13 r13 $$CALL_IDX$$
push r13 [2]
rjmp get_uart
addi r15 r15 2
load r13, r15, 0 [2]
addi r15, r15, 2
move r0 r12
subi r15 r15 2
store r13 r0 -6 [2]
load r1 r14 0 [2]
and r0 r0 r1
subi r15 r15 2
load r2 r13 -6 [2]
subi r1 r1 1
and r2 r2 r1
store r13 r0 -8 [2]
cmpi r0 0
brne L2
addi r0 r14 0
rjmp L3
L2:
addi r0 r14 1
L3:
store r13 r2 -10 [2]
cmpi r2 10
brlt L4
addi r2 r14 0
rjmp L5
L4:
addi r2 r14 1
L5:
and r0 r0 r2
cmpi r0 0
breq L6
load r0 r13 -2 [2]
addi r1 r14 10
mul r0 r0 r1
load r1 r13 -10 [2]
add r0 r0 r1
store r13 r0 -2 [2]
rjmp L7
L6:
L7:
load r0 r13 -8 [2]
cmpi r0 0
brne L8
addi r0 r14 0
rjmp L9
L8:
addi r0 r14 1
L9:
load r1 r13 -10 [2]
cmpi r1 9
brgt L10
addi r1 r14 0
rjmp L11
L10:
addi r1 r14 1
L11:
and r0 r0 r1
cmpi r0 0
breq L12
addi r0 r14 0
store r13 r0 -4 [2]
rjmp L13
L12:
L13:
addi r15 r15 6
rjmp L0
L1:
load r0 r13 -2 [2]
move r12 r0
addi r15 r15 4
pop r13 [2]
subi r13 r13 $$RET_IDX$$
rjmprg r13
load_uart:
move r13 r15
subi r15 r15 2
addi r15, r15, -2
store r15, r13, 0 [2]
subi r15 r15 2
movlo r13 r13 $$CALL_IDX$$
push r13 [2]
rjmp get_num_lines
addi r15 r15 2
load r13, r15, 0 [2]
addi r15, r15, 2
move r0 r12
subi r15 r15 6
addi r1 r14 0
subi r15 r15 2
addi r2 r14 0
subi r15 r15 2
addi r3 r14 0
store r13 r0 -2 [2]
store r13 r1 -8 [4]
store r13 r2 -10 [2]
store r13 r3 -12 [2]
L14:
load r0 r13 -2 [2]
cmpi r0 0
breq L15
L16:
load r0 r13 -10 [2]
cmpi r0 4
brlt L18
addi r0 r14 0
rjmp L19
L18:
addi r0 r14 1
L19:
cmpi r0 0
breq L17
addi r15, r15, -2
store r15, r13, 0 [2]
movlo r13 r13 $$CALL_IDX$$
push r13 [2]
rjmp is_uart_new
load r13, r15, 0 [2]
addi r15, r15, 2
cmpi r12 0
breq L20
load r0 r13 -8 [4]
addi r1 r14 256
mul r0 r0 r1
addi r15, r15, -2
store r15, r0, 0 [2]
addi r15, r15, -2
store r15, r13, 0 [2]
subi r15 r15 2
movlo r13 r13 $$CALL_IDX$$
push r13 [2]
rjmp get_uart_byte
addi r15 r15 2
load r13, r15, 0 [2]
addi r15, r15, 2
load r0, r15, 0 [2]
addi r15, r15, 2
add r0 r0 r12
load r1 r13 -10 [2]
addi r1 r1 1
store r13 r0 -8 [4]
store r13 r1 -10 [2]
rjmp L21
L20:
L21:
rjmp L16
L17:
addi r0 r14 0
load r1 r13 -2 [2]
subi r1 r1 1
addi r15, r15, -2
store r15, r13, 0 [2]
subi r15 r15 2
load r2 r13 -8 [4]
addi r15, r15, -4
store r15, r2, 0 [4]
load r3 r13 -12 [2]
addi r15, r15, -2
store r15, r3, 0 [2]
store r13 r0 -10 [2]
store r13 r1 -2 [2]
movlo r13 r13 $$CALL_IDX$$
push r13 [2]
rjmp store_pm
addi r15 r15 8
load r13, r15, 0 [2]
addi r15, r15, 2
addi r0 r14 0
load r1 r13 -12 [2]
addi r1 r1 1
store r13 r0 -8 [4]
store r13 r1 -12 [2]
rjmp L14
L15:
addi r0 r14 0
subi r15 r15 2
addi r15, r15, -2
store r15, r13, 0 [2]
store r13 r0 -12 [2]
subi r15 r15 2
movlo r13 r13 $$CALL_IDX$$
push r13 [2]
rjmp get_num_lines
addi r15 r15 2
load r13, r15, 0 [2]
addi r15, r15, 2
move r0 r12
subi r15 r15 2
addi r1 r14 0
store r13 r0 -14 [2]
store r13 r1 -16 [2]
L22:
load r0 r13 -14 [2]
cmpi r0 0
breq L23
addi r15, r15, -2
store r15, r13, 0 [2]
movlo r13 r13 $$CALL_IDX$$
push r13 [2]
rjmp is_uart_new
load r13, r15, 0 [2]
addi r15, r15, 2
cmpi r12 0
breq L24
addi r15, r15, -2
store r15, r13, 0 [2]
movlo r13 r13 $$CALL_IDX$$
push r13 [2]
rjmp get_uart_byte
load r13, r15, 0 [2]
addi r15, r15, 2
move r0 r12
load r1 r13 -14 [2]
subi r1 r1 1
addi r15, r15, -2
store r15, r13, 0 [2]
subi r15 r15 2
addi r15, r15, -2
store r15, r0, 0 [2]
load r2 r13 -12 [2]
addi r15, r15, -2
store r15, r2, 0 [2]
store r13 r0 -16 [2]
store r13 r1 -14 [2]
subi r15 r15 2
movlo r13 r13 $$CALL_IDX$$
push r13 [2]
rjmp store_dm
addi r15 r15 8
load r13, r15, 0 [2]
addi r15, r15, 2
load r0 r13 -12 [2]
addi r0 r0 1
store r13 r0 -12 [2]
rjmp L25
L24:
L25:
rjmp L22
L23:
addi r15 r15 16
move r12 r14
pop r13 [2]
subi r13 r13 $$RET_IDX$$
rjmprg r13
main:
move r13 r15
L26:
addi r15, r15, -2
store r15, r13, 0 [2]
movlo r13 r13 $$CALL_IDX$$
push r13 [2]
rjmp is_uart_new
load r13, r15, 0 [2]
addi r15, r15, 2
cmpi r12 0
breq L28
addi r15, r15, -2
store r15, r13, 0 [2]
movlo r13 r13 $$CALL_IDX$$
push r13 [2]
rjmp load_uart
load r13, r15, 0 [2]
addi r15, r15, 2
rjmp _program_end_
rjmp L29
L28:
L29:
rjmp L26
L27:
move r12 r14
pop r13 [2]
subi r13 r13 $$RET_IDX$$
rjmprg r13
_program_end_:
(Pre replace_pop_push)
(Code after 'replace_pop_push')
 subi r15 r15 1
movlo r13 r13 $$CALL_IDX$$
addi r15, r15, -2
store r15, r13, 0 [2]
rjmp main
subi r15 r15 2
__halt:
rjmp __halt
get_uart:
move r13 r15
subi r15 r15 2
load r0 r13 -2 [2]
in r0 1
move r12 r0
addi r15 r15 2
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 $$RET_IDX$$
rjmprg r13
store_pm:
move r13 r15
load r0 r13 2 [2]
load r1 r13 4 [4]
store_pm r0 r1 _program_end_
store r13 r0 2 [2]
move r12 r14
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 $$RET_IDX$$
rjmprg r13
store_dm:
move r13 r15
load r0 r13 4 [2]
load r1 r13 6 [2]
store r0 r1 0 [1]
store r13 r0 4 [2]
move r12 r14
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 $$RET_IDX$$
rjmprg r13
is_uart_new:
move r13 r15
subi r15 r15 2
addi r0 r14 0
subi r15 r15 2
addi r15, r15, -2
store r15, r13, 0 [2]
store r13 r0 -2 [2]
movlo r13 r13 $$CALL_IDX$$
addi r15, r15, -2
store r15, r13, 0 [2]
rjmp get_uart
load r13, r15, 0 [2]
addi r15, r15, 2
move r0 r12
subi r15 r15 2
load r1 r14 0 [2]
and r1 r1 r0
move r12 r1
addi r15 r15 6
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 $$RET_IDX$$
rjmprg r13
get_uart_byte:
move r13 r15
subi r15 r15 2
addi r15, r15, -2
store r15, r13, 0 [2]
subi r15 r15 2
movlo r13 r13 $$CALL_IDX$$
addi r15, r15, -2
store r15, r13, 0 [2]
rjmp get_uart
addi r15 r15 2
load r13, r15, 0 [2]
addi r15, r15, 2
move r0 r12
subi r15 r15 2
store r13 r0 -2 [2]
load r1 r14 0 [2]
subi r1 r1 1
and r0 r0 r1
move r12 r0
addi r15 r15 4
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 $$RET_IDX$$
rjmprg r13
get_num_lines:
move r13 r15
subi r15 r15 2
addi r0 r14 0
subi r15 r15 2
addi r1 r14 1
store r13 r0 -2 [2]
store r13 r1 -4 [2]
L0:
load r0 r13 -4 [2]
cmpi r0 0
breq L1
subi r15 r15 2
addi r15, r15, -2
store r15, r13, 0 [2]
subi r15 r15 2
movlo r13 r13 $$CALL_IDX$$
addi r15, r15, -2
store r15, r13, 0 [2]
rjmp get_uart
addi r15 r15 2
load r13, r15, 0 [2]
addi r15, r15, 2
move r0 r12
subi r15 r15 2
store r13 r0 -6 [2]
load r1 r14 0 [2]
and r0 r0 r1
subi r15 r15 2
load r2 r13 -6 [2]
subi r1 r1 1
and r2 r2 r1
store r13 r0 -8 [2]
cmpi r0 0
brne L2
addi r0 r14 0
rjmp L3
L2:
addi r0 r14 1
L3:
store r13 r2 -10 [2]
cmpi r2 10
brlt L4
addi r2 r14 0
rjmp L5
L4:
addi r2 r14 1
L5:
and r0 r0 r2
cmpi r0 0
breq L6
load r0 r13 -2 [2]
addi r1 r14 10
mul r0 r0 r1
load r1 r13 -10 [2]
add r0 r0 r1
store r13 r0 -2 [2]
rjmp L7
L6:
L7:
load r0 r13 -8 [2]
cmpi r0 0
brne L8
addi r0 r14 0
rjmp L9
L8:
addi r0 r14 1
L9:
load r1 r13 -10 [2]
cmpi r1 9
brgt L10
addi r1 r14 0
rjmp L11
L10:
addi r1 r14 1
L11:
and r0 r0 r1
cmpi r0 0
breq L12
addi r0 r14 0
store r13 r0 -4 [2]
rjmp L13
L12:
L13:
addi r15 r15 6
rjmp L0
L1:
load r0 r13 -2 [2]
move r12 r0
addi r15 r15 4
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 $$RET_IDX$$
rjmprg r13
load_uart:
move r13 r15
subi r15 r15 2
addi r15, r15, -2
store r15, r13, 0 [2]
subi r15 r15 2
movlo r13 r13 $$CALL_IDX$$
addi r15, r15, -2
store r15, r13, 0 [2]
rjmp get_num_lines
addi r15 r15 2
load r13, r15, 0 [2]
addi r15, r15, 2
move r0 r12
subi r15 r15 6
addi r1 r14 0
subi r15 r15 2
addi r2 r14 0
subi r15 r15 2
addi r3 r14 0
store r13 r0 -2 [2]
store r13 r1 -8 [4]
store r13 r2 -10 [2]
store r13 r3 -12 [2]
L14:
load r0 r13 -2 [2]
cmpi r0 0
breq L15
L16:
load r0 r13 -10 [2]
cmpi r0 4
brlt L18
addi r0 r14 0
rjmp L19
L18:
addi r0 r14 1
L19:
cmpi r0 0
breq L17
addi r15, r15, -2
store r15, r13, 0 [2]
movlo r13 r13 $$CALL_IDX$$
addi r15, r15, -2
store r15, r13, 0 [2]
rjmp is_uart_new
load r13, r15, 0 [2]
addi r15, r15, 2
cmpi r12 0
breq L20
load r0 r13 -8 [4]
addi r1 r14 256
mul r0 r0 r1
addi r15, r15, -2
store r15, r0, 0 [2]
addi r15, r15, -2
store r15, r13, 0 [2]
subi r15 r15 2
movlo r13 r13 $$CALL_IDX$$
addi r15, r15, -2
store r15, r13, 0 [2]
rjmp get_uart_byte
addi r15 r15 2
load r13, r15, 0 [2]
addi r15, r15, 2
load r0, r15, 0 [2]
addi r15, r15, 2
add r0 r0 r12
load r1 r13 -10 [2]
addi r1 r1 1
store r13 r0 -8 [4]
store r13 r1 -10 [2]
rjmp L21
L20:
L21:
rjmp L16
L17:
addi r0 r14 0
load r1 r13 -2 [2]
subi r1 r1 1
addi r15, r15, -2
store r15, r13, 0 [2]
subi r15 r15 2
load r2 r13 -8 [4]
addi r15, r15, -4
store r15, r2, 0 [4]
load r3 r13 -12 [2]
addi r15, r15, -2
store r15, r3, 0 [2]
store r13 r0 -10 [2]
store r13 r1 -2 [2]
movlo r13 r13 $$CALL_IDX$$
addi r15, r15, -2
store r15, r13, 0 [2]
rjmp store_pm
addi r15 r15 8
load r13, r15, 0 [2]
addi r15, r15, 2
addi r0 r14 0
load r1 r13 -12 [2]
addi r1 r1 1
store r13 r0 -8 [4]
store r13 r1 -12 [2]
rjmp L14
L15:
addi r0 r14 0
subi r15 r15 2
addi r15, r15, -2
store r15, r13, 0 [2]
store r13 r0 -12 [2]
subi r15 r15 2
movlo r13 r13 $$CALL_IDX$$
addi r15, r15, -2
store r15, r13, 0 [2]
rjmp get_num_lines
addi r15 r15 2
load r13, r15, 0 [2]
addi r15, r15, 2
move r0 r12
subi r15 r15 2
addi r1 r14 0
store r13 r0 -14 [2]
store r13 r1 -16 [2]
L22:
load r0 r13 -14 [2]
cmpi r0 0
breq L23
addi r15, r15, -2
store r15, r13, 0 [2]
movlo r13 r13 $$CALL_IDX$$
addi r15, r15, -2
store r15, r13, 0 [2]
rjmp is_uart_new
load r13, r15, 0 [2]
addi r15, r15, 2
cmpi r12 0
breq L24
addi r15, r15, -2
store r15, r13, 0 [2]
movlo r13 r13 $$CALL_IDX$$
addi r15, r15, -2
store r15, r13, 0 [2]
rjmp get_uart_byte
load r13, r15, 0 [2]
addi r15, r15, 2
move r0 r12
load r1 r13 -14 [2]
subi r1 r1 1
addi r15, r15, -2
store r15, r13, 0 [2]
subi r15 r15 2
addi r15, r15, -2
store r15, r0, 0 [2]
load r2 r13 -12 [2]
addi r15, r15, -2
store r15, r2, 0 [2]
store r13 r0 -16 [2]
store r13 r1 -14 [2]
subi r15 r15 2
movlo r13 r13 $$CALL_IDX$$
addi r15, r15, -2
store r15, r13, 0 [2]
rjmp store_dm
addi r15 r15 8
load r13, r15, 0 [2]
addi r15, r15, 2
load r0 r13 -12 [2]
addi r0 r0 1
store r13 r0 -12 [2]
rjmp L25
L24:
L25:
rjmp L22
L23:
addi r15 r15 16
move r12 r14
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 $$RET_IDX$$
rjmprg r13
main:
move r13 r15
L26:
addi r15, r15, -2
store r15, r13, 0 [2]
movlo r13 r13 $$CALL_IDX$$
addi r15, r15, -2
store r15, r13, 0 [2]
rjmp is_uart_new
load r13, r15, 0 [2]
addi r15, r15, 2
cmpi r12 0
breq L28
addi r15, r15, -2
store r15, r13, 0 [2]
movlo r13 r13 $$CALL_IDX$$
addi r15, r15, -2
store r15, r13, 0 [2]
rjmp load_uart
load r13, r15, 0 [2]
addi r15, r15, 2
rjmp _program_end_
rjmp L29
L28:
L29:
rjmp L26
L27:
move r12 r14
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 $$RET_IDX$$
rjmprg r13
_program_end_:
(Pre handle_labels)
(Code after 'handle_labels')
 subi r15 r15 1
movlo r13 r13 $$CALL_IDX$$
addi r15, r15, -2
store r15, r13, 0 [2]
rjmp main
subi r15 r15 2
rjmp __halt
move r13 r15
subi r15 r15 2
load r0 r13 -2 [2]
in r0 1
move r12 r0
addi r15 r15 2
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 $$RET_IDX$$
rjmprg r13
move r13 r15
load r0 r13 2 [2]
load r1 r13 4 [4]
store_pm r0 r1 _program_end_
store r13 r0 2 [2]
move r12 r14
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 $$RET_IDX$$
rjmprg r13
move r13 r15
load r0 r13 4 [2]
load r1 r13 6 [2]
store r0 r1 0 [1]
store r13 r0 4 [2]
move r12 r14
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 $$RET_IDX$$
rjmprg r13
move r13 r15
subi r15 r15 2
addi r0 r14 0
subi r15 r15 2
addi r15, r15, -2
store r15, r13, 0 [2]
store r13 r0 -2 [2]
movlo r13 r13 $$CALL_IDX$$
addi r15, r15, -2
store r15, r13, 0 [2]
rjmp get_uart
load r13, r15, 0 [2]
addi r15, r15, 2
move r0 r12
subi r15 r15 2
load r1 r14 0 [2]
and r1 r1 r0
move r12 r1
addi r15 r15 6
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 $$RET_IDX$$
rjmprg r13
move r13 r15
subi r15 r15 2
addi r15, r15, -2
store r15, r13, 0 [2]
subi r15 r15 2
movlo r13 r13 $$CALL_IDX$$
addi r15, r15, -2
store r15, r13, 0 [2]
rjmp get_uart
addi r15 r15 2
load r13, r15, 0 [2]
addi r15, r15, 2
move r0 r12
subi r15 r15 2
store r13 r0 -2 [2]
load r1 r14 0 [2]
subi r1 r1 1
and r0 r0 r1
move r12 r0
addi r15 r15 4
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 $$RET_IDX$$
rjmprg r13
move r13 r15
subi r15 r15 2
addi r0 r14 0
subi r15 r15 2
addi r1 r14 1
store r13 r0 -2 [2]
store r13 r1 -4 [2]
load r0 r13 -4 [2]
cmpi r0 0
breq L1
subi r15 r15 2
addi r15, r15, -2
store r15, r13, 0 [2]
subi r15 r15 2
movlo r13 r13 $$CALL_IDX$$
addi r15, r15, -2
store r15, r13, 0 [2]
rjmp get_uart
addi r15 r15 2
load r13, r15, 0 [2]
addi r15, r15, 2
move r0 r12
subi r15 r15 2
store r13 r0 -6 [2]
load r1 r14 0 [2]
and r0 r0 r1
subi r15 r15 2
load r2 r13 -6 [2]
subi r1 r1 1
and r2 r2 r1
store r13 r0 -8 [2]
cmpi r0 0
brne L2
addi r0 r14 0
rjmp L3
addi r0 r14 1
store r13 r2 -10 [2]
cmpi r2 10
brlt L4
addi r2 r14 0
rjmp L5
addi r2 r14 1
and r0 r0 r2
cmpi r0 0
breq L6
load r0 r13 -2 [2]
addi r1 r14 10
mul r0 r0 r1
load r1 r13 -10 [2]
add r0 r0 r1
store r13 r0 -2 [2]
rjmp L7
load r0 r13 -8 [2]
cmpi r0 0
brne L8
addi r0 r14 0
rjmp L9
addi r0 r14 1
load r1 r13 -10 [2]
cmpi r1 9
brgt L10
addi r1 r14 0
rjmp L11
addi r1 r14 1
and r0 r0 r1
cmpi r0 0
breq L12
addi r0 r14 0
store r13 r0 -4 [2]
rjmp L13
addi r15 r15 6
rjmp L0
load r0 r13 -2 [2]
move r12 r0
addi r15 r15 4
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 $$RET_IDX$$
rjmprg r13
move r13 r15
subi r15 r15 2
addi r15, r15, -2
store r15, r13, 0 [2]
subi r15 r15 2
movlo r13 r13 $$CALL_IDX$$
addi r15, r15, -2
store r15, r13, 0 [2]
rjmp get_num_lines
addi r15 r15 2
load r13, r15, 0 [2]
addi r15, r15, 2
move r0 r12
subi r15 r15 6
addi r1 r14 0
subi r15 r15 2
addi r2 r14 0
subi r15 r15 2
addi r3 r14 0
store r13 r0 -2 [2]
store r13 r1 -8 [4]
store r13 r2 -10 [2]
store r13 r3 -12 [2]
load r0 r13 -2 [2]
cmpi r0 0
breq L15
load r0 r13 -10 [2]
cmpi r0 4
brlt L18
addi r0 r14 0
rjmp L19
addi r0 r14 1
cmpi r0 0
breq L17
addi r15, r15, -2
store r15, r13, 0 [2]
movlo r13 r13 $$CALL_IDX$$
addi r15, r15, -2
store r15, r13, 0 [2]
rjmp is_uart_new
load r13, r15, 0 [2]
addi r15, r15, 2
cmpi r12 0
breq L20
load r0 r13 -8 [4]
addi r1 r14 256
mul r0 r0 r1
addi r15, r15, -2
store r15, r0, 0 [2]
addi r15, r15, -2
store r15, r13, 0 [2]
subi r15 r15 2
movlo r13 r13 $$CALL_IDX$$
addi r15, r15, -2
store r15, r13, 0 [2]
rjmp get_uart_byte
addi r15 r15 2
load r13, r15, 0 [2]
addi r15, r15, 2
load r0, r15, 0 [2]
addi r15, r15, 2
add r0 r0 r12
load r1 r13 -10 [2]
addi r1 r1 1
store r13 r0 -8 [4]
store r13 r1 -10 [2]
rjmp L21
rjmp L16
addi r0 r14 0
load r1 r13 -2 [2]
subi r1 r1 1
addi r15, r15, -2
store r15, r13, 0 [2]
subi r15 r15 2
load r2 r13 -8 [4]
addi r15, r15, -4
store r15, r2, 0 [4]
load r3 r13 -12 [2]
addi r15, r15, -2
store r15, r3, 0 [2]
store r13 r0 -10 [2]
store r13 r1 -2 [2]
movlo r13 r13 $$CALL_IDX$$
addi r15, r15, -2
store r15, r13, 0 [2]
rjmp store_pm
addi r15 r15 8
load r13, r15, 0 [2]
addi r15, r15, 2
addi r0 r14 0
load r1 r13 -12 [2]
addi r1 r1 1
store r13 r0 -8 [4]
store r13 r1 -12 [2]
rjmp L14
addi r0 r14 0
subi r15 r15 2
addi r15, r15, -2
store r15, r13, 0 [2]
store r13 r0 -12 [2]
subi r15 r15 2
movlo r13 r13 $$CALL_IDX$$
addi r15, r15, -2
store r15, r13, 0 [2]
rjmp get_num_lines
addi r15 r15 2
load r13, r15, 0 [2]
addi r15, r15, 2
move r0 r12
subi r15 r15 2
addi r1 r14 0
store r13 r0 -14 [2]
store r13 r1 -16 [2]
load r0 r13 -14 [2]
cmpi r0 0
breq L23
addi r15, r15, -2
store r15, r13, 0 [2]
movlo r13 r13 $$CALL_IDX$$
addi r15, r15, -2
store r15, r13, 0 [2]
rjmp is_uart_new
load r13, r15, 0 [2]
addi r15, r15, 2
cmpi r12 0
breq L24
addi r15, r15, -2
store r15, r13, 0 [2]
movlo r13 r13 $$CALL_IDX$$
addi r15, r15, -2
store r15, r13, 0 [2]
rjmp get_uart_byte
load r13, r15, 0 [2]
addi r15, r15, 2
move r0 r12
load r1 r13 -14 [2]
subi r1 r1 1
addi r15, r15, -2
store r15, r13, 0 [2]
subi r15 r15 2
addi r15, r15, -2
store r15, r0, 0 [2]
load r2 r13 -12 [2]
addi r15, r15, -2
store r15, r2, 0 [2]
store r13 r0 -16 [2]
store r13 r1 -14 [2]
subi r15 r15 2
movlo r13 r13 $$CALL_IDX$$
addi r15, r15, -2
store r15, r13, 0 [2]
rjmp store_dm
addi r15 r15 8
load r13, r15, 0 [2]
addi r15, r15, 2
load r0 r13 -12 [2]
addi r0 r0 1
store r13 r0 -12 [2]
rjmp L25
rjmp L22
addi r15 r15 16
move r12 r14
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 $$RET_IDX$$
rjmprg r13
move r13 r15
addi r15, r15, -2
store r15, r13, 0 [2]
movlo r13 r13 $$CALL_IDX$$
addi r15, r15, -2
store r15, r13, 0 [2]
rjmp is_uart_new
load r13, r15, 0 [2]
addi r15, r15, 2
cmpi r12 0
breq L28
addi r15, r15, -2
store r15, r13, 0 [2]
movlo r13 r13 $$CALL_IDX$$
addi r15, r15, -2
store r15, r13, 0 [2]
rjmp load_uart
load r13, r15, 0 [2]
addi r15, r15, 2
rjmp _program_end_
rjmp L29
rjmp L26
move r12 r14
load r13, r15, 0 [2]
addi r15, r15, 2
subi r13 r13 $$RET_IDX$$
rjmprg r13
(Pre handle_constants)
(Code after 'handle_constants')
 subi r15 r15 1
movlo r13 r13 $$CALL_IDX$$
addi r15 r15 -2
store r15 r13 0 [2]
rjmp 329
subi r15 r15 2
rjmp 6
move r13 r15
subi r15 r15 2
load r0 r13 -2 [2]
in r0 1
move r12 r0
addi r15 r15 2
load r13 r15 0 [2]
addi r15 r15 2
subi r13 r13 $$RET_IDX$$
rjmprg r13
move r13 r15
load r0 r13 2 [2]
load r1 r13 4 [4]
store_pm r0 r1 356
store r13 r0 2 [2]
move r12 r14
load r13 r15 0 [2]
addi r15 r15 2
subi r13 r13 $$RET_IDX$$
rjmprg r13
move r13 r15
load r0 r13 4 [2]
load r1 r13 6 [2]
store r0 r1 0 [1]
store r13 r0 4 [2]
move r12 r14
load r13 r15 0 [2]
addi r15 r15 2
subi r13 r13 $$RET_IDX$$
rjmprg r13
move r13 r15
subi r15 r15 2
addi r0 r14 0
subi r15 r15 2
addi r15 r15 -2
store r15 r13 0 [2]
store r13 r0 -2 [2]
movlo r13 r13 $$CALL_IDX$$
addi r15 r15 -2
store r15 r13 0 [2]
rjmp 7
load r13 r15 0 [2]
addi r15 r15 2
move r0 r12
subi r15 r15 2
load r1 r14 0 [2]
and r1 r1 r0
move r12 r1
addi r15 r15 6
load r13 r15 0 [2]
addi r15 r15 2
subi r13 r13 $$RET_IDX$$
rjmprg r13
move r13 r15
subi r15 r15 2
addi r15 r15 -2
store r15 r13 0 [2]
subi r15 r15 2
movlo r13 r13 $$CALL_IDX$$
addi r15 r15 -2
store r15 r13 0 [2]
rjmp 7
addi r15 r15 2
load r13 r15 0 [2]
addi r15 r15 2
move r0 r12
subi r15 r15 2
store r13 r0 -2 [2]
load r1 r14 0 [2]
subi r1 r1 1
and r0 r0 r1
move r12 r0
addi r15 r15 4
load r13 r15 0 [2]
addi r15 r15 2
subi r13 r13 $$RET_IDX$$
rjmprg r13
move r13 r15
subi r15 r15 2
addi r0 r14 0
subi r15 r15 2
addi r1 r14 1
store r13 r0 -2 [2]
store r13 r1 -4 [2]
load r0 r13 -4 [2]
cmpi r0 0
breq 156
subi r15 r15 2
addi r15 r15 -2
store r15 r13 0 [2]
subi r15 r15 2
movlo r13 r13 $$CALL_IDX$$
addi r15 r15 -2
store r15 r13 0 [2]
rjmp 7
addi r15 r15 2
load r13 r15 0 [2]
addi r15 r15 2
move r0 r12
subi r15 r15 2
store r13 r0 -6 [2]
load r1 r14 0 [2]
and r0 r0 r1
subi r15 r15 2
load r2 r13 -6 [2]
subi r1 r1 1
and r2 r2 r1
store r13 r0 -8 [2]
cmpi r0 0
brne 119
addi r0 r14 0
rjmp 120
addi r0 r14 1
store r13 r2 -10 [2]
cmpi r2 10
brlt 125
addi r2 r14 0
rjmp 126
addi r2 r14 1
and r0 r0 r2
cmpi r0 0
breq 136
load r0 r13 -2 [2]
addi r1 r14 10
mul r0 r0 r1
load r1 r13 -10 [2]
add r0 r0 r1
store r13 r0 -2 [2]
rjmp 136
load r0 r13 -8 [2]
cmpi r0 0
brne 141
addi r0 r14 0
rjmp 142
addi r0 r14 1
load r1 r13 -10 [2]
cmpi r1 9
brgt 147
addi r1 r14 0
rjmp 148
addi r1 r14 1
and r0 r0 r1
cmpi r0 0
breq 154
addi r0 r14 0
store r13 r0 -4 [2]
rjmp 154
addi r15 r15 6
rjmp 91
load r0 r13 -2 [2]
move r12 r0
addi r15 r15 4
load r13 r15 0 [2]
addi r15 r15 2
subi r13 r13 $$RET_IDX$$
rjmprg r13
move r13 r15
subi r15 r15 2
addi r15 r15 -2
store r15 r13 0 [2]
subi r15 r15 2
movlo r13 r13 $$CALL_IDX$$
addi r15 r15 -2
store r15 r13 0 [2]
rjmp 84
addi r15 r15 2
load r13 r15 0 [2]
addi r15 r15 2
move r0 r12
subi r15 r15 6
addi r1 r14 0
subi r15 r15 2
addi r2 r14 0
subi r15 r15 2
addi r3 r14 0
store r13 r0 -2 [2]
store r13 r1 -8 [4]
store r13 r2 -10 [2]
store r13 r3 -12 [2]
load r0 r13 -2 [2]
cmpi r0 0
breq 258
load r0 r13 -10 [2]
cmpi r0 4
brlt 194
addi r0 r14 0
rjmp 195
addi r0 r14 1
cmpi r0 0
breq 231
addi r15 r15 -2
store r15 r13 0 [2]
movlo r13 r13 $$CALL_IDX$$
addi r15 r15 -2
store r15 r13 0 [2]
rjmp 37
load r13 r15 0 [2]
addi r15 r15 2
cmpi r12 0
breq 230
load r0 r13 -8 [4]
addi r1 r14 256
mul r0 r0 r1
addi r15 r15 -2
store r15 r0 0 [2]
addi r15 r15 -2
store r15 r13 0 [2]
subi r15 r15 2
movlo r13 r13 $$CALL_IDX$$
addi r15 r15 -2
store r15 r13 0 [2]
rjmp 60
addi r15 r15 2
load r13 r15 0 [2]
addi r15 r15 2
load r0 r15 0 [2]
addi r15 r15 2
add r0 r0 r12
load r1 r13 -10 [2]
addi r1 r1 1
store r13 r0 -8 [4]
store r13 r1 -10 [2]
rjmp 230
rjmp 189
addi r0 r14 0
load r1 r13 -2 [2]
subi r1 r1 1
addi r15 r15 -2
store r15 r13 0 [2]
subi r15 r15 2
load r2 r13 -8 [4]
addi r15 r15 -4
store r15 r2 0 [4]
load r3 r13 -12 [2]
addi r15 r15 -2
store r15 r3 0 [2]
store r13 r0 -10 [2]
store r13 r1 -2 [2]
movlo r13 r13 $$CALL_IDX$$
addi r15 r15 -2
store r15 r13 0 [2]
rjmp 17
addi r15 r15 8
load r13 r15 0 [2]
addi r15 r15 2
addi r0 r14 0
load r1 r13 -12 [2]
addi r1 r1 1
store r13 r0 -8 [4]
store r13 r1 -12 [2]
rjmp 186
addi r0 r14 0
subi r15 r15 2
addi r15 r15 -2
store r15 r13 0 [2]
store r13 r0 -12 [2]
subi r15 r15 2
movlo r13 r13 $$CALL_IDX$$
addi r15 r15 -2
store r15 r13 0 [2]
rjmp 84
addi r15 r15 2
load r13 r15 0 [2]
addi r15 r15 2
move r0 r12
subi r15 r15 2
addi r1 r14 0
store r13 r0 -14 [2]
store r13 r1 -16 [2]
load r0 r13 -14 [2]
cmpi r0 0
breq 323
addi r15 r15 -2
store r15 r13 0 [2]
movlo r13 r13 $$CALL_IDX$$
addi r15 r15 -2
store r15 r13 0 [2]
rjmp 37
load r13 r15 0 [2]
addi r15 r15 2
cmpi r12 0
breq 322
addi r15 r15 -2
store r15 r13 0 [2]
movlo r13 r13 $$CALL_IDX$$
addi r15 r15 -2
store r15 r13 0 [2]
rjmp 60
load r13 r15 0 [2]
addi r15 r15 2
move r0 r12
load r1 r13 -14 [2]
subi r1 r1 1
addi r15 r15 -2
store r15 r13 0 [2]
subi r15 r15 2
addi r15 r15 -2
store r15 r0 0 [2]
load r2 r13 -12 [2]
addi r15 r15 -2
store r15 r2 0 [2]
store r13 r0 -16 [2]
store r13 r1 -14 [2]
subi r15 r15 2
movlo r13 r13 $$CALL_IDX$$
addi r15 r15 -2
store r15 r13 0 [2]
rjmp 27
addi r15 r15 8
load r13 r15 0 [2]
addi r15 r15 2
load r0 r13 -12 [2]
addi r0 r0 1
store r13 r0 -12 [2]
rjmp 322
rjmp 276
addi r15 r15 16
move r12 r14
load r13 r15 0 [2]
addi r15 r15 2
subi r13 r13 $$RET_IDX$$
rjmprg r13
move r13 r15
addi r15 r15 -2
store r15 r13 0 [2]
movlo r13 r13 $$CALL_IDX$$
addi r15 r15 -2
store r15 r13 0 [2]
rjmp 37
load r13 r15 0 [2]
addi r15 r15 2
cmpi r12 0
breq 350
addi r15 r15 -2
store r15 r13 0 [2]
movlo r13 r13 $$CALL_IDX$$
addi r15 r15 -2
store r15 r13 0 [2]
rjmp 163
load r13 r15 0 [2]
addi r15 r15 2
rjmp 356
rjmp 350
rjmp 330
move r12 r14
load r13 r15 0 [2]
addi r15 r15 2
subi r13 r13 $$RET_IDX$$
rjmprg r13
(Pre insert_subroutine_indexes)
(Code after 'insert_subroutine_indexes')
 subi r15 r15 1
movlo r13 r13 5
addi r15 r15 -2
store r15 r13 0 [2]
rjmp 329
subi r15 r15 2
rjmp 6
move r13 r15
subi r15 r15 2
load r0 r13 -2 [2]
in r0 1
move r12 r0
addi r15 r15 2
load r13 r15 0 [2]
addi r15 r15 2
subi r13 r13 16
rjmprg r13
move r13 r15
load r0 r13 2 [2]
load r1 r13 4 [4]
store_pm r0 r1 356
store r13 r0 2 [2]
move r12 r14
load r13 r15 0 [2]
addi r15 r15 2
subi r13 r13 26
rjmprg r13
move r13 r15
load r0 r13 4 [2]
load r1 r13 6 [2]
store r0 r1 0 [1]
store r13 r0 4 [2]
move r12 r14
load r13 r15 0 [2]
addi r15 r15 2
subi r13 r13 36
rjmprg r13
move r13 r15
subi r15 r15 2
addi r0 r14 0
subi r15 r15 2
addi r15 r15 -2
store r15 r13 0 [2]
store r13 r0 -2 [2]
movlo r13 r13 48
addi r15 r15 -2
store r15 r13 0 [2]
rjmp 7
load r13 r15 0 [2]
addi r15 r15 2
move r0 r12
subi r15 r15 2
load r1 r14 0 [2]
and r1 r1 r0
move r12 r1
addi r15 r15 6
load r13 r15 0 [2]
addi r15 r15 2
subi r13 r13 59
rjmprg r13
move r13 r15
subi r15 r15 2
addi r15 r15 -2
store r15 r13 0 [2]
subi r15 r15 2
movlo r13 r13 69
addi r15 r15 -2
store r15 r13 0 [2]
rjmp 7
addi r15 r15 2
load r13 r15 0 [2]
addi r15 r15 2
move r0 r12
subi r15 r15 2
store r13 r0 -2 [2]
load r1 r14 0 [2]
subi r1 r1 1
and r0 r0 r1
move r12 r0
addi r15 r15 4
load r13 r15 0 [2]
addi r15 r15 2
subi r13 r13 83
rjmprg r13
move r13 r15
subi r15 r15 2
addi r0 r14 0
subi r15 r15 2
addi r1 r14 1
store r13 r0 -2 [2]
store r13 r1 -4 [2]
load r0 r13 -4 [2]
cmpi r0 0
breq 156
subi r15 r15 2
addi r15 r15 -2
store r15 r13 0 [2]
subi r15 r15 2
movlo r13 r13 102
addi r15 r15 -2
store r15 r13 0 [2]
rjmp 7
addi r15 r15 2
load r13 r15 0 [2]
addi r15 r15 2
move r0 r12
subi r15 r15 2
store r13 r0 -6 [2]
load r1 r14 0 [2]
and r0 r0 r1
subi r15 r15 2
load r2 r13 -6 [2]
subi r1 r1 1
and r2 r2 r1
store r13 r0 -8 [2]
cmpi r0 0
brne 119
addi r0 r14 0
rjmp 120
addi r0 r14 1
store r13 r2 -10 [2]
cmpi r2 10
brlt 125
addi r2 r14 0
rjmp 126
addi r2 r14 1
and r0 r0 r2
cmpi r0 0
breq 136
load r0 r13 -2 [2]
addi r1 r14 10
mul r0 r0 r1
load r1 r13 -10 [2]
add r0 r0 r1
store r13 r0 -2 [2]
rjmp 136
load r0 r13 -8 [2]
cmpi r0 0
brne 141
addi r0 r14 0
rjmp 142
addi r0 r14 1
load r1 r13 -10 [2]
cmpi r1 9
brgt 147
addi r1 r14 0
rjmp 148
addi r1 r14 1
and r0 r0 r1
cmpi r0 0
breq 154
addi r0 r14 0
store r13 r0 -4 [2]
rjmp 154
addi r15 r15 6
rjmp 91
load r0 r13 -2 [2]
move r12 r0
addi r15 r15 4
load r13 r15 0 [2]
addi r15 r15 2
subi r13 r13 162
rjmprg r13
move r13 r15
subi r15 r15 2
addi r15 r15 -2
store r15 r13 0 [2]
subi r15 r15 2
movlo r13 r13 172
addi r15 r15 -2
store r15 r13 0 [2]
rjmp 84
addi r15 r15 2
load r13 r15 0 [2]
addi r15 r15 2
move r0 r12
subi r15 r15 6
addi r1 r14 0
subi r15 r15 2
addi r2 r14 0
subi r15 r15 2
addi r3 r14 0
store r13 r0 -2 [2]
store r13 r1 -8 [4]
store r13 r2 -10 [2]
store r13 r3 -12 [2]
load r0 r13 -2 [2]
cmpi r0 0
breq 258
load r0 r13 -10 [2]
cmpi r0 4
brlt 194
addi r0 r14 0
rjmp 195
addi r0 r14 1
cmpi r0 0
breq 231
addi r15 r15 -2
store r15 r13 0 [2]
movlo r13 r13 203
addi r15 r15 -2
store r15 r13 0 [2]
rjmp 37
load r13 r15 0 [2]
addi r15 r15 2
cmpi r12 0
breq 230
load r0 r13 -8 [4]
addi r1 r14 256
mul r0 r0 r1
addi r15 r15 -2
store r15 r0 0 [2]
addi r15 r15 -2
store r15 r13 0 [2]
subi r15 r15 2
movlo r13 r13 219
addi r15 r15 -2
store r15 r13 0 [2]
rjmp 60
addi r15 r15 2
load r13 r15 0 [2]
addi r15 r15 2
load r0 r15 0 [2]
addi r15 r15 2
add r0 r0 r12
load r1 r13 -10 [2]
addi r1 r1 1
store r13 r0 -8 [4]
store r13 r1 -10 [2]
rjmp 230
rjmp 189
addi r0 r14 0
load r1 r13 -2 [2]
subi r1 r1 1
addi r15 r15 -2
store r15 r13 0 [2]
subi r15 r15 2
load r2 r13 -8 [4]
addi r15 r15 -4
store r15 r2 0 [4]
load r3 r13 -12 [2]
addi r15 r15 -2
store r15 r3 0 [2]
store r13 r0 -10 [2]
store r13 r1 -2 [2]
movlo r13 r13 249
addi r15 r15 -2
store r15 r13 0 [2]
rjmp 17
addi r15 r15 8
load r13 r15 0 [2]
addi r15 r15 2
addi r0 r14 0
load r1 r13 -12 [2]
addi r1 r1 1
store r13 r0 -8 [4]
store r13 r1 -12 [2]
rjmp 186
addi r0 r14 0
subi r15 r15 2
addi r15 r15 -2
store r15 r13 0 [2]
store r13 r0 -12 [2]
subi r15 r15 2
movlo r13 r13 268
addi r15 r15 -2
store r15 r13 0 [2]
rjmp 84
addi r15 r15 2
load r13 r15 0 [2]
addi r15 r15 2
move r0 r12
subi r15 r15 2
addi r1 r14 0
store r13 r0 -14 [2]
store r13 r1 -16 [2]
load r0 r13 -14 [2]
cmpi r0 0
breq 323
addi r15 r15 -2
store r15 r13 0 [2]
movlo r13 r13 285
addi r15 r15 -2
store r15 r13 0 [2]
rjmp 37
load r13 r15 0 [2]
addi r15 r15 2
cmpi r12 0
breq 322
addi r15 r15 -2
store r15 r13 0 [2]
movlo r13 r13 295
addi r15 r15 -2
store r15 r13 0 [2]
rjmp 60
load r13 r15 0 [2]
addi r15 r15 2
move r0 r12
load r1 r13 -14 [2]
subi r1 r1 1
addi r15 r15 -2
store r15 r13 0 [2]
subi r15 r15 2
addi r15 r15 -2
store r15 r0 0 [2]
load r2 r13 -12 [2]
addi r15 r15 -2
store r15 r2 0 [2]
store r13 r0 -16 [2]
store r13 r1 -14 [2]
subi r15 r15 2
movlo r13 r13 315
addi r15 r15 -2
store r15 r13 0 [2]
rjmp 27
addi r15 r15 8
load r13 r15 0 [2]
addi r15 r15 2
load r0 r13 -12 [2]
addi r0 r0 1
store r13 r0 -12 [2]
rjmp 322
rjmp 276
addi r15 r15 16
move r12 r14
load r13 r15 0 [2]
addi r15 r15 2
subi r13 r13 328
rjmprg r13
move r13 r15
addi r15 r15 -2
store r15 r13 0 [2]
movlo r13 r13 336
addi r15 r15 -2
store r15 r13 0 [2]
rjmp 37
load r13 r15 0 [2]
addi r15 r15 2
cmpi r12 0
breq 350
addi r15 r15 -2
store r15 r13 0 [2]
movlo r13 r13 346
addi r15 r15 -2
store r15 r13 0 [2]
rjmp 163
load r13 r15 0 [2]
addi r15 r15 2
rjmp 356
rjmp 350
rjmp 330
move r12 r14
load r13 r15 0 [2]
addi r15 r15 2
subi r13 r13 355
rjmprg r13
(Pre handle_sizes)
(Code after 'handle_sizes')
 subi r15 r15 1
movlo r13 r13 5
addi r15 r15 -2
store r15 r13 0 [2]
rjmp 329
subi r15 r15 2
rjmp 6
move r13 r15
subi r15 r15 2
load r0 r13 -2 [2]
in r0 1
move r12 r0
addi r15 r15 2
load r13 r15 0 [2]
addi r15 r15 2
subi r13 r13 16
rjmprg r13
move r13 r15
load r0 r13 2 [2]
load r1 r13 4 [4]
store_pm r0 r1 356
store r13 r0 2 [2]
move r12 r14
load r13 r15 0 [2]
addi r15 r15 2
subi r13 r13 26
rjmprg r13
move r13 r15
load r0 r13 4 [2]
load r1 r13 6 [2]
store r0 r1 0 [1]
store r13 r0 4 [2]
move r12 r14
load r13 r15 0 [2]
addi r15 r15 2
subi r13 r13 36
rjmprg r13
move r13 r15
subi r15 r15 2
addi r0 r14 0
subi r15 r15 2
addi r15 r15 -2
store r15 r13 0 [2]
store r13 r0 -2 [2]
movlo r13 r13 48
addi r15 r15 -2
store r15 r13 0 [2]
rjmp 7
load r13 r15 0 [2]
addi r15 r15 2
move r0 r12
subi r15 r15 2
load r1 r14 0 [2]
and r1 r1 r0
move r12 r1
addi r15 r15 6
load r13 r15 0 [2]
addi r15 r15 2
subi r13 r13 59
rjmprg r13
move r13 r15
subi r15 r15 2
addi r15 r15 -2
store r15 r13 0 [2]
subi r15 r15 2
movlo r13 r13 69
addi r15 r15 -2
store r15 r13 0 [2]
rjmp 7
addi r15 r15 2
load r13 r15 0 [2]
addi r15 r15 2
move r0 r12
subi r15 r15 2
store r13 r0 -2 [2]
load r1 r14 0 [2]
subi r1 r1 1
and r0 r0 r1
move r12 r0
addi r15 r15 4
load r13 r15 0 [2]
addi r15 r15 2
subi r13 r13 83
rjmprg r13
move r13 r15
subi r15 r15 2
addi r0 r14 0
subi r15 r15 2
addi r1 r14 1
store r13 r0 -2 [2]
store r13 r1 -4 [2]
load r0 r13 -4 [2]
cmpi r0 0
breq 156
subi r15 r15 2
addi r15 r15 -2
store r15 r13 0 [2]
subi r15 r15 2
movlo r13 r13 102
addi r15 r15 -2
store r15 r13 0 [2]
rjmp 7
addi r15 r15 2
load r13 r15 0 [2]
addi r15 r15 2
move r0 r12
subi r15 r15 2
store r13 r0 -6 [2]
load r1 r14 0 [2]
and r0 r0 r1
subi r15 r15 2
load r2 r13 -6 [2]
subi r1 r1 1
and r2 r2 r1
store r13 r0 -8 [2]
cmpi r0 0
brne 119
addi r0 r14 0
rjmp 120
addi r0 r14 1
store r13 r2 -10 [2]
cmpi r2 10
brlt 125
addi r2 r14 0
rjmp 126
addi r2 r14 1
and r0 r0 r2
cmpi r0 0
breq 136
load r0 r13 -2 [2]
addi r1 r14 10
mul r0 r0 r1
load r1 r13 -10 [2]
add r0 r0 r1
store r13 r0 -2 [2]
rjmp 136
load r0 r13 -8 [2]
cmpi r0 0
brne 141
addi r0 r14 0
rjmp 142
addi r0 r14 1
load r1 r13 -10 [2]
cmpi r1 9
brgt 147
addi r1 r14 0
rjmp 148
addi r1 r14 1
and r0 r0 r1
cmpi r0 0
breq 154
addi r0 r14 0
store r13 r0 -4 [2]
rjmp 154
addi r15 r15 6
rjmp 91
load r0 r13 -2 [2]
move r12 r0
addi r15 r15 4
load r13 r15 0 [2]
addi r15 r15 2
subi r13 r13 162
rjmprg r13
move r13 r15
subi r15 r15 2
addi r15 r15 -2
store r15 r13 0 [2]
subi r15 r15 2
movlo r13 r13 172
addi r15 r15 -2
store r15 r13 0 [2]
rjmp 84
addi r15 r15 2
load r13 r15 0 [2]
addi r15 r15 2
move r0 r12
subi r15 r15 6
addi r1 r14 0
subi r15 r15 2
addi r2 r14 0
subi r15 r15 2
addi r3 r14 0
store r13 r0 -2 [2]
store r13 r1 -8 [4]
store r13 r2 -10 [2]
store r13 r3 -12 [2]
load r0 r13 -2 [2]
cmpi r0 0
breq 258
load r0 r13 -10 [2]
cmpi r0 4
brlt 194
addi r0 r14 0
rjmp 195
addi r0 r14 1
cmpi r0 0
breq 231
addi r15 r15 -2
store r15 r13 0 [2]
movlo r13 r13 203
addi r15 r15 -2
store r15 r13 0 [2]
rjmp 37
load r13 r15 0 [2]
addi r15 r15 2
cmpi r12 0
breq 230
load r0 r13 -8 [4]
addi r1 r14 256
mul r0 r0 r1
addi r15 r15 -2
store r15 r0 0 [2]
addi r15 r15 -2
store r15 r13 0 [2]
subi r15 r15 2
movlo r13 r13 219
addi r15 r15 -2
store r15 r13 0 [2]
rjmp 60
addi r15 r15 2
load r13 r15 0 [2]
addi r15 r15 2
load r0 r15 0 [2]
addi r15 r15 2
add r0 r0 r12
load r1 r13 -10 [2]
addi r1 r1 1
store r13 r0 -8 [4]
store r13 r1 -10 [2]
rjmp 230
rjmp 189
addi r0 r14 0
load r1 r13 -2 [2]
subi r1 r1 1
addi r15 r15 -2
store r15 r13 0 [2]
subi r15 r15 2
load r2 r13 -8 [4]
addi r15 r15 -4
store r15 r2 0 [4]
load r3 r13 -12 [2]
addi r15 r15 -2
store r15 r3 0 [2]
store r13 r0 -10 [2]
store r13 r1 -2 [2]
movlo r13 r13 249
addi r15 r15 -2
store r15 r13 0 [2]
rjmp 17
addi r15 r15 8
load r13 r15 0 [2]
addi r15 r15 2
addi r0 r14 0
load r1 r13 -12 [2]
addi r1 r1 1
store r13 r0 -8 [4]
store r13 r1 -12 [2]
rjmp 186
addi r0 r14 0
subi r15 r15 2
addi r15 r15 -2
store r15 r13 0 [2]
store r13 r0 -12 [2]
subi r15 r15 2
movlo r13 r13 268
addi r15 r15 -2
store r15 r13 0 [2]
rjmp 84
addi r15 r15 2
load r13 r15 0 [2]
addi r15 r15 2
move r0 r12
subi r15 r15 2
addi r1 r14 0
store r13 r0 -14 [2]
store r13 r1 -16 [2]
load r0 r13 -14 [2]
cmpi r0 0
breq 323
addi r15 r15 -2
store r15 r13 0 [2]
movlo r13 r13 285
addi r15 r15 -2
store r15 r13 0 [2]
rjmp 37
load r13 r15 0 [2]
addi r15 r15 2
cmpi r12 0
breq 322
addi r15 r15 -2
store r15 r13 0 [2]
movlo r13 r13 295
addi r15 r15 -2
store r15 r13 0 [2]
rjmp 60
load r13 r15 0 [2]
addi r15 r15 2
move r0 r12
load r1 r13 -14 [2]
subi r1 r1 1
addi r15 r15 -2
store r15 r13 0 [2]
subi r15 r15 2
addi r15 r15 -2
store r15 r0 0 [2]
load r2 r13 -12 [2]
addi r15 r15 -2
store r15 r2 0 [2]
store r13 r0 -16 [2]
store r13 r1 -14 [2]
subi r15 r15 2
movlo r13 r13 315
addi r15 r15 -2
store r15 r13 0 [2]
rjmp 27
addi r15 r15 8
load r13 r15 0 [2]
addi r15 r15 2
load r0 r13 -12 [2]
addi r0 r0 1
store r13 r0 -12 [2]
rjmp 322
rjmp 276
addi r15 r15 16
move r12 r14
load r13 r15 0 [2]
addi r15 r15 2
subi r13 r13 328
rjmprg r13
move r13 r15
addi r15 r15 -2
store r15 r13 0 [2]
movlo r13 r13 336
addi r15 r15 -2
store r15 r13 0 [2]
rjmp 37
load r13 r15 0 [2]
addi r15 r15 2
cmpi r12 0
breq 350
addi r15 r15 -2
store r15 r13 0 [2]
movlo r13 r13 346
addi r15 r15 -2
store r15 r13 0 [2]
rjmp 163
load r13 r15 0 [2]
addi r15 r15 2
rjmp 356
rjmp 350
rjmp 330
move r12 r14
load r13 r15 0 [2]
addi r15 r15 2
subi r13 r13 355
rjmprg r13
(Pre handle_instructions)
(Code after 'handle_instructions')
 subi r15 r15 1
movlo r13 r13 5
addi r15 r15 -2
store r15 r13 0 [2]
rjmp 329
subi r15 r15 2
rjmp 6
move r13 r15
subi r15 r15 2
load r0 r13 -2 [2]
in r0 1
move r12 r0
addi r15 r15 2
load r13 r15 0 [2]
addi r15 r15 2
subi r13 r13 16
rjmprg r13
move r13 r15
load r0 r13 2 [2]
load r1 r13 4 [4]
store_pm r0 r1 356
store r13 r0 2 [2]
move r12 r14
load r13 r15 0 [2]
addi r15 r15 2
subi r13 r13 26
rjmprg r13
move r13 r15
load r0 r13 4 [2]
load r1 r13 6 [2]
store r0 r1 0 [1]
store r13 r0 4 [2]
move r12 r14
load r13 r15 0 [2]
addi r15 r15 2
subi r13 r13 36
rjmprg r13
move r13 r15
subi r15 r15 2
addi r0 r14 0
subi r15 r15 2
addi r15 r15 -2
store r15 r13 0 [2]
store r13 r0 -2 [2]
movlo r13 r13 48
addi r15 r15 -2
store r15 r13 0 [2]
rjmp 7
load r13 r15 0 [2]
addi r15 r15 2
move r0 r12
subi r15 r15 2
load r1 r14 0 [2]
and r1 r1 r0
move r12 r1
addi r15 r15 6
load r13 r15 0 [2]
addi r15 r15 2
subi r13 r13 59
rjmprg r13
move r13 r15
subi r15 r15 2
addi r15 r15 -2
store r15 r13 0 [2]
subi r15 r15 2
movlo r13 r13 69
addi r15 r15 -2
store r15 r13 0 [2]
rjmp 7
addi r15 r15 2
load r13 r15 0 [2]
addi r15 r15 2
move r0 r12
subi r15 r15 2
store r13 r0 -2 [2]
load r1 r14 0 [2]
subi r1 r1 1
and r0 r0 r1
move r12 r0
addi r15 r15 4
load r13 r15 0 [2]
addi r15 r15 2
subi r13 r13 83
rjmprg r13
move r13 r15
subi r15 r15 2
addi r0 r14 0
subi r15 r15 2
addi r1 r14 1
store r13 r0 -2 [2]
store r13 r1 -4 [2]
load r0 r13 -4 [2]
cmpi r0 0
breq 156
subi r15 r15 2
addi r15 r15 -2
store r15 r13 0 [2]
subi r15 r15 2
movlo r13 r13 102
addi r15 r15 -2
store r15 r13 0 [2]
rjmp 7
addi r15 r15 2
load r13 r15 0 [2]
addi r15 r15 2
move r0 r12
subi r15 r15 2
store r13 r0 -6 [2]
load r1 r14 0 [2]
and r0 r0 r1
subi r15 r15 2
load r2 r13 -6 [2]
subi r1 r1 1
and r2 r2 r1
store r13 r0 -8 [2]
cmpi r0 0
brne 119
addi r0 r14 0
rjmp 120
addi r0 r14 1
store r13 r2 -10 [2]
cmpi r2 10
brlt 125
addi r2 r14 0
rjmp 126
addi r2 r14 1
and r0 r0 r2
cmpi r0 0
breq 136
load r0 r13 -2 [2]
addi r1 r14 10
mul r0 r0 r1
load r1 r13 -10 [2]
add r0 r0 r1
store r13 r0 -2 [2]
rjmp 136
load r0 r13 -8 [2]
cmpi r0 0
brne 141
addi r0 r14 0
rjmp 142
addi r0 r14 1
load r1 r13 -10 [2]
cmpi r1 9
brgt 147
addi r1 r14 0
rjmp 148
addi r1 r14 1
and r0 r0 r1
cmpi r0 0
breq 154
addi r0 r14 0
store r13 r0 -4 [2]
rjmp 154
addi r15 r15 6
rjmp 91
load r0 r13 -2 [2]
move r12 r0
addi r15 r15 4
load r13 r15 0 [2]
addi r15 r15 2
subi r13 r13 162
rjmprg r13
move r13 r15
subi r15 r15 2
addi r15 r15 -2
store r15 r13 0 [2]
subi r15 r15 2
movlo r13 r13 172
addi r15 r15 -2
store r15 r13 0 [2]
rjmp 84
addi r15 r15 2
load r13 r15 0 [2]
addi r15 r15 2
move r0 r12
subi r15 r15 6
addi r1 r14 0
subi r15 r15 2
addi r2 r14 0
subi r15 r15 2
addi r3 r14 0
store r13 r0 -2 [2]
store r13 r1 -8 [4]
store r13 r2 -10 [2]
store r13 r3 -12 [2]
load r0 r13 -2 [2]
cmpi r0 0
breq 258
load r0 r13 -10 [2]
cmpi r0 4
brlt 194
addi r0 r14 0
rjmp 195
addi r0 r14 1
cmpi r0 0
breq 231
addi r15 r15 -2
store r15 r13 0 [2]
movlo r13 r13 203
addi r15 r15 -2
store r15 r13 0 [2]
rjmp 37
load r13 r15 0 [2]
addi r15 r15 2
cmpi r12 0
breq 230
load r0 r13 -8 [4]
addi r1 r14 256
mul r0 r0 r1
addi r15 r15 -2
store r15 r0 0 [2]
addi r15 r15 -2
store r15 r13 0 [2]
subi r15 r15 2
movlo r13 r13 219
addi r15 r15 -2
store r15 r13 0 [2]
rjmp 60
addi r15 r15 2
load r13 r15 0 [2]
addi r15 r15 2
load r0 r15 0 [2]
addi r15 r15 2
add r0 r0 r12
load r1 r13 -10 [2]
addi r1 r1 1
store r13 r0 -8 [4]
store r13 r1 -10 [2]
rjmp 230
rjmp 189
addi r0 r14 0
load r1 r13 -2 [2]
subi r1 r1 1
addi r15 r15 -2
store r15 r13 0 [2]
subi r15 r15 2
load r2 r13 -8 [4]
addi r15 r15 -4
store r15 r2 0 [4]
load r3 r13 -12 [2]
addi r15 r15 -2
store r15 r3 0 [2]
store r13 r0 -10 [2]
store r13 r1 -2 [2]
movlo r13 r13 249
addi r15 r15 -2
store r15 r13 0 [2]
rjmp 17
addi r15 r15 8
load r13 r15 0 [2]
addi r15 r15 2
addi r0 r14 0
load r1 r13 -12 [2]
addi r1 r1 1
store r13 r0 -8 [4]
store r13 r1 -12 [2]
rjmp 186
addi r0 r14 0
subi r15 r15 2
addi r15 r15 -2
store r15 r13 0 [2]
store r13 r0 -12 [2]
subi r15 r15 2
movlo r13 r13 268
addi r15 r15 -2
store r15 r13 0 [2]
rjmp 84
addi r15 r15 2
load r13 r15 0 [2]
addi r15 r15 2
move r0 r12
subi r15 r15 2
addi r1 r14 0
store r13 r0 -14 [2]
store r13 r1 -16 [2]
load r0 r13 -14 [2]
cmpi r0 0
breq 323
addi r15 r15 -2
store r15 r13 0 [2]
movlo r13 r13 285
addi r15 r15 -2
store r15 r13 0 [2]
rjmp 37
load r13 r15 0 [2]
addi r15 r15 2
cmpi r12 0
breq 322
addi r15 r15 -2
store r15 r13 0 [2]
movlo r13 r13 295
addi r15 r15 -2
store r15 r13 0 [2]
rjmp 60
load r13 r15 0 [2]
addi r15 r15 2
move r0 r12
load r1 r13 -14 [2]
subi r1 r1 1
addi r15 r15 -2
store r15 r13 0 [2]
subi r15 r15 2
addi r15 r15 -2
store r15 r0 0 [2]
load r2 r13 -12 [2]
addi r15 r15 -2
store r15 r2 0 [2]
store r13 r0 -16 [2]
store r13 r1 -14 [2]
subi r15 r15 2
movlo r13 r13 315
addi r15 r15 -2
store r15 r13 0 [2]
rjmp 27
addi r15 r15 8
load r13 r15 0 [2]
addi r15 r15 2
load r0 r13 -12 [2]
addi r0 r0 1
store r13 r0 -12 [2]
rjmp 322
rjmp 276
addi r15 r15 16
move r12 r14
load r13 r15 0 [2]
addi r15 r15 2
subi r13 r13 328
rjmprg r13
move r13 r15
addi r15 r15 -2
store r15 r13 0 [2]
movlo r13 r13 336
addi r15 r15 -2
store r15 r13 0 [2]
rjmp 37
load r13 r15 0 [2]
addi r15 r15 2
cmpi r12 0
breq 350
addi r15 r15 -2
store r15 r13 0 [2]
movlo r13 r13 346
addi r15 r15 -2
store r15 r13 0 [2]
rjmp 163
load r13 r15 0 [2]
addi r15 r15 2
rjmp 356
rjmp 350
rjmp 330
move r12 r14
load r13 r15 0 [2]
addi r15 r15 2
subi r13 r13 355
rjmprg r13
